## Audio extract/encode function

# audio_rip
# need 	SOURCE_FILE
#	AUDIO_AID
#	AUDIO_SOURCE
#	AUDIO_LANG
#	AUDIO_NAME
#	CODEC_AUDIO
#	AUDIO_AC3_QUAL
#	AUDIO_AC3_THREADS
#	AUDIO_OGG_QUAL
#	AUDIO_MP3_MODE
#	AUDIO_MP3_VOL
#	AUDIO_MP3_CBR
#	AUDIO_MP3_VBR
#	DTS_FILE
#	WAV_FILE
#	MP3_FILE
#	OGG_FILE
#	AC3_FILE
#	TITLE_NAME
#	AUDIO_NAME
#	MERGE_TITLE
#	DATE
#	COMMENT
# return AUDIO_FILE
audio_rip () {
	# Audio source format
        case $AUDIO_SOURCE in
	DTS )
		AUDIO_SOURCE_FILE=$DTS_FILE
		;;
	AC3 )
		AUDIO_SOURCE_FILE=$AC3_FILE
		;;
	PCM )
		AUDIO_SOURCE_FILE=$WAV_FILE
		;;
	* )
		echo -ne "\n *************************************\n"
		echo " $AUDIO_SOURCE : audio source format not recognized ! Exiting..."
		echo -ne " *************************************\n"
		exit 1
		;;
	esac

	# extract audio from local working file
	case $CODEC_AUDIO in
	DTS | AC3 )
		# extract AC3/DTS (dump)
		if [ -f $AUDIO_SOURCE_FILE ]
		then
			echo -ne "\n *************************************\n"
			echo " $AUDIO_SOURCE_FILE exists, next..." && sleep 1
			echo -ne " *************************************\n"
		else
			echo -ne "\n *************************************\n"
			echo " Dumping $AUDIO_SOURCE_FILE..."
			ionice -c $IONICENESS nice -n $NICENESS mplayer $SOURCE_FILE -aid $AUDIO_AID -dumpaudio -dumpfile $AUDIO_SOURCE_FILE
		fi
		;;
	VORBIS | MP3 | PCM )
		# extract audio track to wave file
		if [ ! -f $WAV_FILE ]; then
			echo -ne "\n *************************************\n"
			echo " Dumping $WAV_FILE..."
			ionice -c $IONICENESS nice -n $NICENESS mplayer $SOURCE_FILE -aid $AUDIO_AID -ao pcm:waveheader:fast:file=$WAV_FILE -vc null -vo null
		else
			echo -ne "\n *************************************\n"
			echo " $WAV_FILE exists. Next..."  && sleep 1
			echo -ne " *************************************\n"
		fi
		;;
	* )
		echo -ne "\n *************************************\n"
		echo " $CODEC_AUDIO : audio codec not recognized ! Exiting..."
		echo -ne " *************************************\n"
		exit 1
		;;
	esac

	case $CODEC_AUDIO in
	PCM )
		AUDIO_FILE=$WAV_FILE
       		if [ -f $WAV_FILE ]
       		then
			echo -ne "\n *************************************\n"
			echo " $WAV_FILE exists, next..." && sleep 1
			echo -ne " *************************************\n"
		else
			echo -ne "\n *************************************\n"
			echo " $WAV_FILE should already exist but not here ! exiting..."
			echo -ne " *************************************\n"
			exit 1	
		fi
		;;
	DTS )
		AUDIO_FILE=$DTS_FILE
       		if [ -f $AUDIO_FILE ]
       		then
			echo -ne "\n *************************************\n"
			echo " $AUDIO_FILE exists, next..." && sleep 1
			echo -ne " *************************************\n"
		else
			echo -ne "\n *************************************\n"
			echo " $AUDIO_FILE should already exist but not here ! exiting..."
			echo -ne " *************************************\n"
			exit 1	
		fi
		;;
	AC3 )
		AUDIO_FILE=$AC3_FILE
		if [ -f $AUDIO_FILE ]
		then
			echo -ne "\n *************************************\n"
			echo " $AUDIO_FILE exists, next..." && sleep 1
			echo -ne " *************************************\n"
		else
			check_ffmpeg
			# DTS to AC3
			echo -ne "\n *************************************\n"
			echo " Convert $AUDIO_SOURCE_FILE to $AUDIO_FILE..."
			nice -n $NICENESS ffmpeg -threads $AUDIO_AC3_THREADS -i $AUDIO_SOURCE_FILE -acodec ac3 -ab $AUDIO_AC3_QUAL -y $AUDIO_FILE
		fi
		;;
	VORBIS )
		# audio ogg vorbis encode (but oggenc not multithreaded...)
		AUDIO_FILE=$OGG_FILE
		if [ -f $AUDIO_FILE ]
	        then
	             	echo -ne "\n *************************************\n"
	                echo " $AUDIO_FILE exists, next..." && sleep 1
        	     	echo -ne " *************************************\n"
	        else
			check_oggenc
			echo -ne "\n *************************************\n"
			echo " Convert $WAV_FILE to $AUDIO_FILE...\n"
			nice -n $NICENESS oggenc $WAV_FILE -q $AUDIO_OGG_QUAL -o $AUDIO_FILE -a "$TITLE_NAME" -t "$AUDIO_NAME" -l "$MERGE_TITLE" -G "Soundtrack" -d $DATE
		fi
		;;
	MP3 )
		# audio mp3 encode (but lame not multithreaded...)
		AUDIO_FILE=$MP3_FILE
		if [ -f $AUDIO_FILE ]
	        then
	             	echo -ne "\n *************************************\n"
	                echo " $AUDIO_FILE exists, next..." && sleep 1
        	     	echo -ne " *************************************\n"
	        else
			check_lame
			# lame mode choice
			case $AUDIO_MP3_MODE in
			        CBR | cbr )
					AUDIO_MP3_MODE_OPTION="-b $AUDIO_MP3_CBR"
					;;
			        VBR | vbr )
					AUDIO_MP3_MODE_OPTION="-V $AUDIO_MP3_VBR"
					;;
			        * )
					echo -ne "\n *************************************\n"
					echo " $AUDIO_MP3_MODE : lame mp3 encoding mode not recognized ! Exiting..."
					echo -ne " *************************************\n"
					exit 1
					;;
			esac
			nice -n $NICENESS lame --scale $AUDIO_MP3_VOL $AUDIO_MP3_MODE_OPTION --ta "$TITLE_NAME" --tt "$AUDIO_NAME" --tl "$MERGE_TITLE" --tg 24 --ty $DATE --tc "$COMMENT" -h $WAV_FILE $AUDIO_FILE
		fi
		;;
	esac
}
