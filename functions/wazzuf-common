## common functions

# Wazzuf Ripper script usage
wazzuf_usage () {
	echo -ne "\n Usage : $0 [ Video Codec ] [ Audio 1 Codec ] [ Audio 2 Codec ] [GUI]\n"
	exit 1
}

# mount/umount BD iso file
iso_bd_manage () {
	case ${1} in
	mount )
		# check if ISO_BD not already mounted
		if [[ `mount | grep udf | grep "$ISO_MOUNT_POINT" | wc -l` == "1" ]]; then
			echo "$ISO_MOUNT_POINT mount point already used"
			exit 1
		else
			if [[ ${2} == "GUI" ]]; then
				# useless ?
				gksudo --description Wazzuf-Ripper "mkdir -p $ISO_MOUNT_POINT"
				# mounted read-only to avoid warning
				if [[ $DEBUG == "1" ]]; then echo "DEBUG gksudo --description Wazzuf-Ripper \"mount -r -o loop $ISO_FILE_PATH ${ISO_MOUNT_POINT}\"";fi
				gksudo --description Wazzuf-Ripper "mount -r -o loop $ISO_FILE_PATH $ISO_MOUNT_POINT"
			else
				echo "Mount ISO_BD to $ISO_MOUNT_POINT"
				sudo mkdir -p $ISO_MOUNT_POINT
				# mounted read-only to avoid warning
				if [[ $DEBUG == "1" ]]; then echo "DEBUG sudo mount -r -o loop $ISO_FILE_PATH $ISO_MOUNT_POINT";fi
				sudo mount -r -o loop $ISO_FILE_PATH $ISO_MOUNT_POINT
			fi
		fi
		;;
	umount )
		if [[ ${2} == "GUI" ]]; then
			gksudo --description Wazzuf-Ripper "umount $ISO_MOUNT_POINT"
		else
			echo "Umount ISO_BD"
			sudo umount $ISO_MOUNT_POINT
		fi
		;;
	esac
}

# soft_to_install_exit
# need  SOFT_NAME
#	WAZZUF_UI
#
# return nothing
soft_to_install_exit () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --error --title "$ZEN_TITLE" \
			--text "Please install $SOFT_NAME ! Exiting."
	else
		echo -ne "\n *************************************\n"
		echo -ne " Please install $SOFT_NAME ! Exiting. \n"
		echo -ne " *************************************\n"
	fi
	exit 1
}

# file_exists
# need  FILE_NAME
#	WAZZUF_UI
#
# return nothing
file_exists () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --info --title "$ZEN_TITLE" \
			--text "$FILE_NAME file exists. Next..." \
			--timeout=2
	else
		echo -ne "\n *************************************\n"
		echo " $FILE_NAME file exists. Next..."  && sleep 1
		echo -ne " *************************************\n"
	fi
}

# dont_exists_warn
# need  FILE_NAME
#	SOURCE_NAME
#	WAZZUF_UI
#
# return nothing
dont_exists_warn () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --warning --title "$ZEN_TITLE" \
			--text "$FILE_NAME file does not exists in $SOURCE_NAME ! Skipping..." \
			--timeout=2
	else
		echo -ne "\n *************************************\n"
		echo " Warning: $FILE_NAME file does not exists in $SOURCE_NAME ! Skipping..." && sleep 2
		echo -ne " *************************************\n"
	fi
}

# dont_exists_exit
# need  FILE_NAME
#	SOURCE_NAME
#	WAZZUF_UI
#
# return nothing
dont_exists_exit () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --error --title "$ZEN_TITLE" \
			--text "$FILE_NAME file does not exists in $SOURCE_NAME ! Exiting..." \
			--timeout=2
	else
		echo -ne "\n *************************************\n"
		echo " Error: $FILE_NAME file does not exists in $SOURCE_NAME ! Exiting..." && sleep 2
		echo -ne " *************************************\n"
	fi
	exit 1
}

# not_recognized_exit
# need  MESSAGE
#	WAZZUF_UI
#
# return nothing
not_recognized_exit () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --error --title "$ZEN_TITLE" \
			--text "$MESSAGE not recognized ! Exiting."
	else
		echo -ne "\n *************************************\n"
		echo -ne " Error: $MESSAGE not recognized ! Exiting. \n"
		echo -ne " *************************************\n"
	fi
	exit 1
}

# empty_exit
# need  MESSAGE
#	WAZZUF_UI
#
# return nothing
empty_exit () {
	if [[ $WAZZUF_UI == "GUI" ]]; then
		zenity --error --title "$ZEN_TITLE" \
			--text "$MESSAGE is empty ! Exiting."
	else
		echo -ne "\n *************************************\n"
		echo -ne " Error: $MESSAGE is empty ! Exiting. \n"
		echo -ne " *************************************\n"
	fi
	exit 1
}

# wazzuf_quit
# GUI only
#
# return nothing
wazzuf_quit () {
	zenity --info --title "$ZEN_TITLE" \
		--text "$ZEN_TITLE will know quit."
	exit 0
}

