## video encode function

# video_rip
# need 	SOURCE_FILE
#	VIDEO_CROP
#	VIDEO_BITRATE
#	VIDEO_NOSKIP_FORCE
#	VIDEO_X264_FRAMEREF_PASS1
#	VIDEO_X264_FRAMEREF_PASS2
#	VIDEO_X264_SUBQ_PASS1
#	VIDEO_X264_SUBQ_PASS2
#	VIDEO_X264_THREADS
#	VIDEO_XVID_THREADS
#	H264_FILE
#	XVID_FILE
#
# return VIDEO_FILE
video_rip () {
	# frames skipping or not
	if [[ $VIDEO_NOSKIP_FORCE == "yes" ]]; then VIDEO_SKIP="-noskip"; else VIDEO_SKIP=""; fi

	case $CODEC_VIDEO in
	H264 )
		# video h264 (2 pass) encode
		# doc http://www.mplayerhq.hu/DOCS/HTML/fr/menc-feat-x264.html
		check_mencoder
		VIDEO_FILE=$H264_FILE
		if [ ! -f $VIDEO_FILE ]; then

			if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE $VIDEO_SKIP -vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE -ovc x264 -x264encopts bitrate=$VIDEO_BITRATE:frameref=$VIDEO_X264_FRAMEREF_PASS1:mixed_refs:bframes=$VIDEO_X264_BFRAMES_PASS1:b_adapt:b_pyramid=strict:weight_b:partitions=all:8x8dct:me=umh:subq=$VIDEO_X264_SUBQ_PASS1:trellis=$VIDEO_X264_TRELLIS_PASS1:threads=$VIDEO_X264_THREADS:pass=1:log=1 -nosound -nosub"; fi
			nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE \
				$VIDEO_SKIP \
				-vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE \
				-ovc x264 -x264encopts \
				bitrate=$VIDEO_BITRATE:frameref=$VIDEO_X264_FRAMEREF_PASS1:mixed_refs:bframes=$VIDEO_X264_BFRAMES_PASS1:b_adapt:b_pyramid=strict:weight_b:partitions=all:8x8dct:me=umh:subq=$VIDEO_X264_SUBQ_PASS1:trellis=$VIDEO_X264_TRELLIS_PASS1:threads=$VIDEO_X264_THREADS:pass=1:log=1 \
				-nosound -nosub
			
			if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE $VIDEO_SKIP -vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE -ovc x264 -x264encopts bitrate=$VIDEO_BITRATE:frameref=$VIDEO_X264_FRAMEREF_PASS2:mixed_refs:bframes=$VIDEO_X264_BFRAMES_PASS2:b_adapt:b_pyramid=strict:weight_b:partitions=all:8x8dct:me=umh:subq=$VIDEO_X264_SUBQ_PASS2:trellis=$VIDEO_X264_TRELLIS_PASS2:threads=$VIDEO_X264_THREADS:pass=2:log=1 -nosound -nosub"; fi
			nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE \
				$VIDEO_SKIP \
				-vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE \
				-ovc x264 -x264encopts \
				bitrate=$VIDEO_BITRATE:frameref=$VIDEO_X264_FRAMEREF_PASS2:mixed_refs:bframes=$VIDEO_X264_BFRAMES_PASS2:b_adapt:b_pyramid=strict:weight_b:partitions=all:8x8dct:me=umh:subq=$VIDEO_X264_SUBQ_PASS2:trellis=$VIDEO_X264_TRELLIS_PASS2:threads=$VIDEO_X264_THREADS:pass=2:log=1 \
				-nosound -nosub
		else
			echo -ne "\n *************************************\n"
			echo " $VIDEO_FILE file exists. Next..." && sleep 1
			echo -ne " *************************************\n"
		fi
		;;
	XVID )	
		# video xvid encode
		# doc http://www.mplayerhq.hu/DOCS/HTML/fr/menc-feat-xvid.html
		check_mencoder
		VIDEO_FILE=$XVID_FILE
		if [ -f $VIDEO_FILE ]
		then
			echo -ne "\n *************************************\n"
			echo " $VIDEO_FILE file exists. Next..." && sleep 1
			echo -ne " *************************************\n"
		else
			# xvid: bitrate setting is ignored during first pass
			if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n $NICENESS mencoder $SOURCE_FILE -o /dev/null $VIDEO_SKIP -vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE -ovc xvid -xvidencopts pass=1:turbo:threads=$VIDEO_XVID_THREADS:autoaspect:vhq=$VIDEO_XVID_VHQ_PASS1 -nosound -nosub"; fi
			nice -n $NICENESS mencoder $SOURCE_FILE -o /dev/null \
				$VIDEO_SKIP \
				-vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE \
				-ovc xvid -xvidencopts pass=1:turbo:threads=$VIDEO_XVID_THREADS:autoaspect:vhq=$VIDEO_XVID_VHQ_PASS1 \
				-nosound -nosub

			if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE $VIDEO_SKIP -vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE -ovc xvid -xvidencopts pass=2:threads=$VIDEO_XVID_THREADS:autoaspect:vhq=$VIDEO_XVID_VHQ_PASS2:bitrate=$VIDEO_BITRATE -nosound -nosub"; fi
			nice -n $NICENESS mencoder $SOURCE_FILE -o $VIDEO_FILE \
				$VIDEO_SKIP \
				-vf pp=ci,crop=$VIDEO_CROP$MENCODER_SCALE \
				-ovc xvid -xvidencopts pass=2:threads=$VIDEO_XVID_THREADS:autoaspect:vhq=$VIDEO_XVID_VHQ_PASS2:bitrate=$VIDEO_BITRATE \
				-nosound -nosub
		fi
		;;
	DUMP )
		# only dump video without transcoding
		VIDEO_FILE=$DUMP_FILE
		if [ -f $VIDEO_FILE ]
		then
			echo -ne "\n *************************************\n"
			echo " $VIDEO_FILE file exists. Next..." && sleep 1
			echo -ne " *************************************\n"
		 else
			# raw dump using vlc
			check_cvlc
			echo -ne "\n *************************************\n"
			echo " Dumping $VIDEO_FILE from $SOURCE_FILE ..."
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS cvlc -I dummy $SOURCE_FILE --sout "#standard{access=file,mux=raw,dst=$VIDEO_FILE}" vlc://quit --no-repeat --no-sub-autodetect-file --no-sout-audio"; fi
			ionice -c $IONICENESS nice -n $NICENESS cvlc -I dummy \
				$SOURCE_FILE --sout "#standard{access=file,mux=raw,dst=$VIDEO_FILE}" \
				vlc://quit \
				--no-repeat --no-sub-autodetect-file --no-sout-audio
			echo -ne " *************************************\n"
		fi
		;;
	DUMP_CROP )
		# mpeg 'dump' with crop using vlc
		check_cvlc
		VIDEO_FILE=${DUMP_CROP_FILE}
		if [ -f ${VIDEO_FILE} ]
		then
			echo -ne "\n *************************************\n"
			echo " ${VIDEO_FILE} file exists. Next..." && sleep 1
			echo -ne " *************************************\n"
		else
			echo -ne "\n ********************************************************\n"
			echo " Creating ${VIDEO_FILE} as MPEG2 ${VIDEO_BITRATE} kbs/s..." && sleep 1
			echo -ne " **********************************************************\n"
			# cvlc works if VIDEO_CROP is empty
			SIZE_ORIGIN=`avconv -i ${SOURCE_FILE} 2>&1 | grep 'Video: mpeg' | cut -d ',' -f 3 | cut -d ' ' -f 2`
			WIDTH_ORIG=`echo $SIZE_ORIGIN | cut -d 'x' -f1`
			HEIGHT_ORIG=`echo $SIZE_ORIGIN | cut -d 'x' -f2`
			VIDEO_CROP_W=`echo $VIDEO_CROP | cut -d ':' -f 1`
			VIDEO_CROP_H=`echo $VIDEO_CROP | cut -d ':' -f 2`
			VIDEO_CROP_X=`echo $VIDEO_CROP | cut -d ':' -f 3`
			VIDEO_CROP_Y=`echo $VIDEO_CROP | cut -d ':' -f 4`
			VLC_CROP_TOP=$VIDEO_CROP_Y
			VLC_CROP_BOTTOM=$(expr $HEIGHT_ORIG - $VIDEO_CROP_Y - $VIDEO_CROP_H)
			VLC_CROP_LEFT=$VIDEO_CROP_X
			VLC_CROP_RIGHT=$(expr $WIDTH_ORIG - $VIDEO_CROP_X - $VIDEO_CROP_W)

			if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n ${NICENESS} cvlc -I dummy ${SOURCE_FILE} --sout "#transcode{vcodec=mp2v,vb=${VIDEO_BITRATE},vfilter=croppadd{croptop=$VLC_CROP_TOP,cropbottom=$VLC_CROP_BOTTOM,cropleft=$VLC_CROP_LEFT,cropright=$VLC_CROP_RIGHT}}:standard{access=file,mux=raw,dst=${VIDEO_FILE}}" vlc://quit --no-repeat --no-sub-autodetect-file --no-sout-audio"; fi
			nice -n ${NICENESS} cvlc -I dummy \
				${SOURCE_FILE} --sout "#transcode{vcodec=mp2v,vb=${VIDEO_BITRATE},vfilter=croppadd{croptop=$VLC_CROP_TOP,cropbottom=$VLC_CROP_BOTTOM,cropleft=$VLC_CROP_LEFT,cropright=$VLC_CROP_RIGHT}}:standard{access=file,mux=raw,dst=${VIDEO_FILE}}" \
				vlc://quit \
				--no-repeat --no-sub-autodetect-file --no-sout-audio
		fi
		;;
	esac
}
