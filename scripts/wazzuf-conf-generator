#! /bin/bash
# Wazzuf Ripper
# DVD/BD configuration file generator GUI script
# booloki@lokizone.net

# Internationalization
TEXTDOMAINDIR="/usr/share/locale"
export TEXTDOMAINDIR="/usr/share/locale"
TEXTDOMAIN=wazzuf-conf-generator
export TEXTDOMAIN=wazzuf-conf-generator

GLOBAL_CONF_FILE="/etc/wazzuf-ripper/wazzuf-ripper-global.conf"
source ${GLOBAL_CONF_FILE}

# check wazzuf files
source ${FUNCTIONS_CHECK}
checkandsource_wazzuf_files

# Check if user is not a super-user (root)
check_user

WAZZUF_UI="GUI"

# Zenity variables
ZEN_TITLE="$(gettext "Wazzuf Ripper Conf Generator")"
ZEN_COL_CHOICE="$(gettext "Choice")"
ZEN_COL_DESCRIPTION="$(gettext "Description")"
ZEN_COL_TITLE="$(gettext "Title")"
ZEN_COL_LANG="$(gettext "Language")"
ZEN_COL_CHAPTERS="$(gettext "Chapters")"
ZEN_COL_CHANNELS="$(gettext "Channels")"
ZEN_COL_LENGHT="$(gettext "Lenght")"
ZEN_COL_TRACKS_AUDIO="$(gettext "Audio tracks")"
ZEN_COL_TRACKS_SUBTITLES="$(gettext "Subtitle tracks")"
ZEN_LABEL_NEXT="$(gettext "Next")"
ZEN_LABEL_CANCEL="$(gettext "Cancel")"
ZEN_LABEL_QUIT="$(gettext "Quit")"
ZEN_LABEL_YES="$(gettext "Yes")"
ZEN_LABEL_NO="$(gettext "No")"
# Zenity list height composing
# Base height: 95
ZEN_HEIGHT_BASE="95"
# Each new component (line or header): 25
ZEN_HEIGHT_COMPONENT="25"


zenity --question --title "${ZEN_TITLE}" --text "$(gettext "Do you want to generate a <b>new Wazzuf Ripper configuration file</b> ?")" \
	--ok-label "${ZEN_LABEL_YES}" --cancel-label="${ZEN_LABEL_QUIT}"
if [ $? = "1" ]; then wazzuf_quit; fi

## temporary conf file
CONF_FILE_TMP="${CONF_PATH_BASE}/wazzuf-ripper.conf.tmp"
if [ -f ${CONF_FILE_TMP} ]; then rm ${CONF_FILE_TMP}; fi
touch ${CONF_FILE_TMP}
echo "# Wazzuf Ripper" > ${CONF_FILE_TMP}
echo "# Configuration file" >> ${CONF_FILE_TMP}
echo "# generated by wazzuf-conf-generator $(date +%Y-%m-%d) $(date +%H:%M)" >> ${CONF_FILE_TMP}
echo "# See ${CONF_FILE_EXAMPLE} for configuration file example with all options and comments" >> ${CONF_FILE_TMP}


# CONV_PROJECT detection
# Better set in wazzuf-ripper-global.conf file - but need rights
if [[ ${CONV_PROJECT} == "avconv" ]] && [ ! -x "/usr/bin/avconv" ] && [ -x "/usr/bin/ffmpeg" ]; then
	# Linux distribution seems not to be Debian-based
	echo "" >> ${CONF_FILE_TMP}
	echo "# Dirty ffmpeg/libav hack" >> ${CONF_FILE_TMP}
	echo "# You should manually set CONV_PROJECT=\"ffmpeg\" in ${GLOBAL_CONF_FILE} !" >> ${CONF_FILE_TMP}
	echo "CONV_PROJECT=\"ffmpeg\"" >> ${CONF_FILE_TMP}

	# apply parameter
	CONV_PROJECT="ffmpeg"
fi

## MEDIA INFORMATIONS
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## MEDIA INFORMATIONS" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

# zenity height
ZENITY_SOURCE_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 5))
ZENITY_SOURCE_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_SOURCE_HEIGHT_COMPONENTS}))
if [[ ${DEBUG} == "1" ]]; then
	echo "DEBUG ZENITY_SOURCE_HEIGHT_COMPONENTS ${ZENITY_SOURCE_HEIGHT_COMPONENTS}"
	echo "DEBUG ZENITY_SOURCE_HEIGHT ${ZENITY_SOURCE_HEIGHT}"
fi

ZENITY_SOURCE=$(zenity --list --radiolist \
	--title="${ZEN_TITLE}" \
	--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
	--height ${ZENITY_SOURCE_HEIGHT} \
	--column="radiobutton" --column="Media" --column="ID" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
        --text="$(gettext "Which media type do you want to rip ?")" \
        TRUE "$(gettext "Physical DVD")" DVD \
        FALSE "$(gettext "DVD iso file")" ISO_DVD \
        FALSE "$(gettext "Physical Blu-Ray")" BD \
        FALSE "$(gettext "Blu-Ray iso file")" ISO_BD \
        FALSE "$(gettext "m2ts/ts file")" M2TS \
)
if [[ $? == "1" ]]; then wazzuf_quit; fi
echo "SOURCE=\""${ZENITY_SOURCE}"\"" >> ${CONF_FILE_TMP}
SOURCE="${ZENITY_SOURCE}"

zenity --info --title "${ZEN_TITLE}" \
	--ok-label "${ZEN_LABEL_NEXT}" \
	--height "145" \
	--text "$(gettext "Please select your <b>source directory</b>
(m2ts/ts, iso, external subtitles, cover image, episodes list,...).")"
ZENITY_SOURCE_DIRECTORY_BASE="${HOME}"
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SOURCE_DIRECTORY_BASE ${ZENITY_SOURCE_DIRECTORY_BASE}"; fi
ZENITY_SOURCE_DIRECTORY=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "${ZENITY_SOURCE_DIRECTORY_BASE}"/ --directory)
if [ $? = "1" ]; then wazzuf_quit; fi
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SOURCE_DIRECTORY ${ZENITY_SOURCE_DIRECTORY}"; fi
echo "SOURCE_DIRECTORY=\""${ZENITY_SOURCE_DIRECTORY}"\"" >> ${CONF_FILE_TMP}

case $SOURCE in
BD | DVD )
	# device for conf generator only
	zenity --info --title "${ZEN_TITLE}" --text "$(gettext "Please select your <b>Disc Directory</b>. ")" --ok-label "${ZEN_LABEL_NEXT}"
	ZENITY_DISC_DIR=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "/media/" --directory)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_DISC_DIR ${ZENITY_DISC_DIR}"; fi
	;;
ISO_BD | ISO_DVD )
	zenity --info --title "${ZEN_TITLE}" --text "$(gettext "Please select your <b>iso file</b> (source directory only). ")" --ok-label "${ZEN_LABEL_NEXT}"
	ZENITY_ISO_FILE=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "${ZENITY_SOURCE_DIRECTORY}"/)
	if [ $? = "1" ]; then exit 0; fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_ISO_FILE ${ZENITY_ISO_FILE}"; fi 
	# Test if really in source directory
	if [[ $(echo "${ZENITY_ISO_FILE}" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l)  == "1" ]]; then
		# from full path to filename
		ISO_FILE=$(echo ${ZENITY_ISO_FILE} | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%)
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ISO_FILE ${ISO_FILE}"; fi 
		if [[ "${ISO_FILE}" == "" ]]; then
			MESSAGE="Iso file"
			empty_exit
		else
			echo "ISO_FILE=\""${ISO_FILE}"\"" >> ${CONF_FILE_TMP}
			# Prepare the M2TS file variable if source is ISO_BD
			if [[ ${SOURCE} == "ISO_BD" ]]; then
				echo "M2TS_FILE=\"\"" >> ${CONF_FILE_TMP}
			fi
		fi
	else
		SOURCE_NAME="source directory"
		FILE_NAME="Iso"
		dont_exists_exit
	fi
	;;
M2TS )
	zenity --info --title "${ZEN_TITLE}" --text "$(gettext "Please select your <b>m2ts/ts file</b> (source directory only). ")" --ok-label "${ZEN_LABEL_NEXT}"
	ZENITY_M2TS_FILE=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "${ZENITY_SOURCE_DIRECTORY}"/)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_M2TS_FILE ${ZENITY_M2TS_FILE}"; fi 
	# Test if really in source directory
	if [[ $(echo "${ZENITY_M2TS_FILE}" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l)  == "1" ]]; then
		# from full path to filename
		M2TS_FILE=$(echo "${ZENITY_M2TS_FILE}" | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%)
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS_FILE ${M2TS_FILE}"; fi 
		# Test if "empty"
		if [[ "${M2TS_FILE}" == "" ]]; then
			MESSAGE="m2ts/ts file"
			empty_exit
		else
			echo "M2TS_FILE=\""${M2TS_FILE}"\"" >> ${CONF_FILE_TMP}
		fi
	else
		SOURCE_NAME="source directory"
		FILE_NAME="m2ts/ts"
		dont_exists_exit
	fi
        ;;
esac

# Override working files base path (if not set: "$HOME/wazzuf-ripper")
zenity --question --title "${ZEN_TITLE}" --text "$(printf "$(gettext "Do you want to change the <b>working files directory</b> (%s) ?")" "${WORKING_PATH_BASE}")" \
	--ok-label "${ZEN_LABEL_YES}" --cancel-label="${ZEN_LABEL_NO}"
if [ $? = "0" ]; then
ZENITY_WORKING_PATH=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "${WORKING_PATH_BASE}" --directory)
echo "WORKING_PATH_BASE=\""${ZENITY_WORKING_PATH}"\"" >> ${CONF_FILE_TMP}
fi

SOURCE_DIRECTORY="${ZENITY_SOURCE_DIRECTORY}"
cd "${SOURCE_DIRECTORY}"

## TAGGING
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## TAGGING" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

# zenity height
ZENITY_VIDEO_TYPE_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 3))
ZENITY_VIDEO_TYPE_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_VIDEO_TYPE_HEIGHT_COMPONENTS}))
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_VIDEO_TYPE_HEIGHT ${ZENITY_VIDEO_TYPE_HEIGHT}"; fi

ZENITY_VIDEO_TYPE=$(zenity --list --radiolist \
	--title="${ZEN_TITLE}" \
	--width "260" \
	--height ${ZENITY_VIDEO_TYPE_HEIGHT} \
	--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
	--column="radiobutton" --column="Type" --column="ID" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="$(gettext "What is the type of this video media ?")" \
	TRUE "$(gettext "Movie")" MOVIE \
	FALSE "$(gettext "TV show/serie (multiple videos)")" SHOW \
	FALSE "$(gettext "Musical video")" MUSIC \
)
if [[ $? == "1" ]]; then wazzuf_quit; fi
echo "VIDEO_TYPE="\"${ZENITY_VIDEO_TYPE}"\"" >> ${CONF_FILE_TMP}

# zenity: window doesn't come to the center of the screen when using --forms
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
ZENITY_INFOS=$(zenity --forms \
    --title="${ZEN_TITLE}" \
    --text="$(gettext "Videos informations")" \
    --add-entry="$(gettext "Original title *")" \
    --add-entry="$(gettext "Release date")" \
    --separator="|")
if [[ $? == "1" ]]; then wazzuf_quit; fi
ZENITY_TITLE=$(echo "${ZENITY_INFOS}" | cut -d "|" -f1)
ZENITY_DATE=$(echo "${ZENITY_INFOS}" | cut -d "|" -f2)

# test empty ZENITY_TITLE
if  [[ ! ${ZENITY_TITLE} == "" ]]; then
	echo "TITLE_NAME="\"${ZENITY_TITLE}\""" >> ${CONF_FILE_TMP}
	# basic TITLE_NAME to TAG_TITLE_NAME convertion
	echo "TAG_TITLE_NAME="\"$(echo ${ZENITY_TITLE} | sed 's/[!?@#$Â£%^&*]//g' | sed 's/^\ //g' | sed 's/\ $//g' | sed s/[\ \']/./g)\""" >> ${CONF_FILE_TMP}
else
	MESSAGE="Title"
	empty_exit
fi

# test ZENITY_DATE integer
if echo "${ZENITY_DATE}" | egrep -vq '^[0-9]+$'; then
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG Warning ! Provided date is not an integer !"; fi
fi
echo "DATE="\"${ZENITY_DATE}\""" >> ${CONF_FILE_TMP}

# check ImdbID page
TITLE_NAME="${ZENITY_TITLE}"
DATE="${ZENITY_DATE}"

get_imdb_response_title
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG IMDB_RESPONSE ${IMDB_RESPONSE}"; fi

if  [[ ${IMDB_RESPONSE} == "True" ]]; then
	get_imdb_id_title
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG IMDB_ID ${IMDB_ID}"; fi
	zenity --text-info --title "${ZEN_TITLE}" \
		--height "520" \
		--width "700" \
		--checkbox="$(gettext "It is the right one")" \
		--html --url "http://www.imdb.com/title/${IMDB_ID}" \
		--ok-label "${ZEN_LABEL_NEXT}" --cancel-label="${ZEN_LABEL_NO}"
	if [ $? = "1" ]; then
		# If not the good Imdb ID, ask it
		imdb_id_ask_gui
	fi
else
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG No IMdb informations found !"; fi
	imdb_id_ask_gui
fi

if  [[ ! ${IMDB_ID} == "" ]]; then
	echo "IMDB_ID=\"${IMDB_ID}\"" >> ${CONF_FILE_TMP}
	IMDB_URL_COVER=$(imdbtool -i ${IMDB_ID} | sed -n '/^poster/{n;p;}')
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG IMDB_URL_COVER ${IMDB_URL_COVER}"; fi
	# check if url exists
	if [[ ! ${IMDB_URL_COVER} == "N/A" ]]; then
		check_wget
		( wget -q "${IMDB_URL_COVER}" -O cover.jpg ) | zenity --progress \
		        --title="${ZEN_TITLE}" \
		        --text="$(gettext "Downloading cover")" \
		        --cancel-label="${ZEN_LABEL_CANCEL}" \
		        --pulsate \
		        --auto-close
		if [ $? = "1" ]; then
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG Cover download cancelled !"; fi
			echo "COVER="\"\""" >> ${CONF_FILE_TMP}
		else
			echo "COVER="\"cover.jpg\""" >> ${CONF_FILE_TMP}
		fi
	else
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG No cover available !"; fi
		echo "COVER="\"\""" >> ${CONF_FILE_TMP}
	fi
else
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG No ID so no cover"; fi
	echo "IMDB_ID=\"\"" >> ${CONF_FILE_TMP}
	echo "COVER="\"\""" >> ${CONF_FILE_TMP}
fi

# Tags processing
# zenity: window doesn't come to the center of the screen when using --forms
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
ZENITY_TAGS=$(zenity --forms \
    --title="${ZEN_TITLE}" \
    --text="$(gettext "Please provide some tags")" \
    --add-entry="$(gettext "Rip tag (BDRIP DVDRIP DVDDUMP 1080p 720p...)")" \
    --add-entry="$(gettext "Audio tag (MULTI ENGLISH subforced...)")" \
    --add-entry="$(gettext "Signature tag")" \
    --add-entry="$(gettext "Comment")" \
    --separator="|")
if [ $? = "1" ]; then wazzuf_quit; fi
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_TAGS ${ZENITY_TAGS}"; fi
echo "TAG_RIP=\"$(echo "${ZENITY_TAGS}" | cut -d "|" -f1)\"" >> ${CONF_FILE_TMP}
echo "TAG_AUDIO=\"$(echo "${ZENITY_TAGS}" | cut -d "|" -f2)\"" >> ${CONF_FILE_TMP}
echo "TAG_SIGNATURE=\"$(echo "${ZENITY_TAGS}" | cut -d "|" -f3)\"" >> ${CONF_FILE_TMP}
echo "COMMENT=\"$(echo "${ZENITY_TAGS}" | cut -d "|" -f4)\"" >> ${CONF_FILE_TMP}

# Tag processing by video type
case ${ZENITY_VIDEO_TYPE} in
MOVIE )
	# Director Tag processing
	if  [[ ${IMDB_ID} == "" ]]; then
		ZENITY_DIRECTOR=$(zenity --entry \
			--title="${ZEN_TITLE}" \
			--text="$(gettext "Movie director")" \
			--ok-label "OK" --cancel-label="${ZEN_LABEL_NO}" )
		echo "DIRECTOR_NAME=\"${ZENITY_DIRECTOR}\"" >> ${CONF_FILE_TMP}		
	else
		echo "DIRECTOR_NAME=\"\"" >> ${CONF_FILE_TMP}
	fi
	;;
MUSIC )	
	# Artist/Band Tag processing
	ZENITY_ARTIST_NAME=$(zenity --entry \
		--title="${ZEN_TITLE}" \
		--text="$(gettext "Artist/Band Name")" \
		--ok-label "OK" --cancel-label="${ZEN_LABEL_NO}" )
	echo "ARTIST_NAME="\"${ZENITY_ARTIST_NAME}\""" >> ${CONF_FILE_TMP}
	;;
SHOW )
	# Episodes processing
	# zenity: window doesn't come to the center of the screen when using --forms
	# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
	ZENITY_SHOW=$(zenity --forms \
		--title="${ZEN_TITLE}" \
		--text="$(gettext "About the Show")" \
		--add-entry="$(gettext "Season number (ex: 02)")" \
		--add-entry="$(gettext "Total episodes number in the season")" \
		--separator="|")
	if [ $? = "1" ]; then wazzuf_quit; fi
	echo "SEASON_NUMBER=\"$(echo "${ZENITY_SHOW}" | cut -d "|" -f1)\"" >> ${CONF_FILE_TMP}
	echo "EPISODES_TOTAL_NUMBER=\"$(echo "${ZENITY_SHOW}" | cut -d "|" -f2)\"" >> ${CONF_FILE_TMP}

	# Episodes file choice
	# zenity height
	ZENITY_EPISODES_FILE_CHOICE_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 3))
	ZENITY_EPISODES_FILE_CHOICE_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_EPISODES_FILE_CHOICE_HEIGHT_COMPONENTS}))
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_EPISODES_FILE_CHOICE_HEIGHT ${ZENITY_EPISODES_FILE_CHOICE_HEIGHT}"; fi

	ZENITY_EPISODES_FILE_CHOICE=$(zenity --list --radiolist \
		--title="${ZEN_TITLE}" \
		--height ${ZENITY_EPISODES_FILE_CHOICE_HEIGHT} \
		--width "500" \
		--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
		--column="button" --column="description" --column="${ZEN_COL_CHOICE}" \
		--print-column="3" \
		--hide-column="3" \
		--hide-header \
		--text="$(gettext "About the episodes list (text file)")" \
		TRUE "$(gettext "None")" 0 \
		FALSE "$(printf "$(gettext "Select one (in %s source directory only)")" "${ZENITY_SOURCE_DIRECTORY}")" 1 \
		FALSE "$(gettext "Create one")" 2 \
	)
	if [[ $? == "1" ]]; then wazzuf_quit; fi
	case ${ZENITY_EPISODES_FILE_CHOICE} in
	0 )
		echo "EPISODES_FILE=\"\"" >> ${CONF_FILE_TMP}
		;;
	1 )
		ZENITY_EPISODES_FILE=$(zenity --file-selection --title "${ZEN_TITLE}" --filename "${ZENITY_SOURCE_DIRECTORY}/")
		# Test if really in source directory
		if [[ $(echo "${ZENITY_EPISODES_FILE}" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l)  == "1" ]]; then
			# from full path to filename
			EPISODES_FILE=$(echo ${ZENITY_EPISODES_FILE} | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%)
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG EPISODES_FILE ${EPISODES_FILE}"; fi
			# Test if "empty"
			if [[ $(echo ${EPISODES_FILE}) == "" ]]; then
				if [[ ${DEBUG} == "1" ]]; then
					echo "DEBUG No episode file !"
					echo "EPISODES_FILE="\"\""" >> ${CONF_FILE_TMP}
				fi
			else
				echo "EPISODES_FILE="\"${EPISODES_FILE}\""" >> ${CONF_FILE_TMP}
			fi
		else
			SOURCE_NAME="source directory"
			FILE_NAME="Episode"
			dont_exists_exit
		fi		
		;;
	2 )
		# Episodes file explanations
		zenity --info --title "${ZEN_TITLE}" --text "$(gettext "Episode file syntax with ordered lines like: 05 - The haunted episode.
Line numbers corresponds to CHAPTERS or TITLES (depends on DVD_EPISODES_ORG). ")" --ok-label "${ZEN_LABEL_NEXT}"
		touch "${ZENITY_SOURCE_DIRECTORY}/episodes.txt"
		# edit episodes file
		echo "EPISODES_FILE=\"episodes.txt\"" >> ${CONF_FILE_TMP}
		EPISODES_FILE_NEW=$(zenity --text-info --title "${ZEN_TITLE}" --editable --filename "${ZENITY_SOURCE_DIRECTORY}/episodes.txt")
		echo "${EPISODES_FILE_NEW}" > "${ZENITY_SOURCE_DIRECTORY}/episodes.txt"
		;;
	esac
	;;
esac


## MEDIA ORGANIZATION
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## MEDIA ORGANIZATION" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

ISO_FILE_PATH="${SOURCE_DIRECTORY}/${ISO_FILE}"
M2TS_FILE_PATH="${SOURCE_DIRECTORY}/${M2TS_FILE}"


## Media analyse

case $SOURCE in
BD | ISO_BD )
	BD_PATH="${ZENITY_DISC_DIR}"
	echo "M2TS_FILE="\"\""" >> ${CONF_FILE_TMP}
	# If an iso, mount the device
	if [[ ${SOURCE} == "ISO_BD" ]]; then
		iso_manage mount GUI
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ISO_MOUNT_POINT ${ISO_MOUNT_POINT}"; fi
		BD_MOUNT="${ISO_MOUNT_POINT}"
	else
		BD_MOUNT="${BD_PATH}"
	fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG BD_MOUNT ${BD_MOUNT}"; fi

	# Compare the provided media device type with the detected one
	MOUNT_PATH="${BD_MOUNT}"
	get_media_device_type
	if [[ ! ${MEDIA_DEVICE_TYPE} == "BD" ]]; then
		zenity --error --title "${ZEN_TITLE}" \
			--text "$(gettext "Media device not recognized as Blu-Ray but as ${MEDIA_DEVICE_TYPE} ! ")" \
			--timeout=5
		wazzuf_quit
	fi
	get_media_title

	# Get BD informations
	( echo 10; mplayer -nolirc -v -vo null -ao null -frames 0 -identify br:// -bluray-device "${BD_MOUNT}" 2> ${MEDIA_TITLE}-mplayer.err > ${MEDIA_TITLE}-mplayer.info ) | zenity --progress \
	        --title="${ZEN_TITLE}" \
	        --text="$(gettext "BD analyse ")" \
	        --cancel-label="${ZEN_LABEL_CANCEL}" \
	        --pulsate \
	        --auto-close

	# Warning if not decrypted
	if [[ $(grep "Error calculating media key. Missing right processing key" ${MEDIA_TITLE}-mplayer.err) ]]; then
		zenity --error --title "${ZEN_TITLE}" \
			--text "$(gettext "AACS Key Error. Exiting ! ")" \
			--timeout=5
		wazzuf_quit
	fi

	if [[ ${SOURCE} == "BD" ]]; then
		# Propose to copy BD to local iso file
		# need  ISO_FILE
		zenity --question --title "${ZEN_TITLE}" --text "$(gettext "Do you want to <b>make a local iso</b> file of your BD ? ")" --ok-label "${ZEN_LABEL_YES}" --cancel-label="${ZEN_LABEL_NO}"
		if [ $? = "0" ]; then
			# only if ISO_FILE exists
			if [[ "${ISO_FILE}" == "" ]]; then
				# pas top
				#ISO_FILE="${TITLE_NAME}-BD-$(date +%d-%H.%M).iso"
				ISO_FILE="${MEDIA_TITLE}.iso"
				sed -i "s/^SOURCE=\"BD\"$/SOURCE=\"BD\"\nISO_FILE=\"${ISO_FILE}\"/" ${CONF_FILE_TMP}
			fi
			copy_bd2iso
			# Change SOURCE="BD" to "ISO_BD" in configuration file
			sed -i 's/^SOURCE="BD"$/SOURCE="ISO_BD"/' ${CONF_FILE_TMP}
		fi
	fi

	if [[ ${ZENITY_VIDEO_TYPE} == "SHOW" ]]; then
		# Multiple videos
		# BD Episodes choice
		DVD_EPISODES_ORG="TITLES"
		echo "DVD_EPISODES_ORG="\"${DVD_EPISODES_ORG}\""" >> ${CONF_FILE_TMP}
		BD_TOTAL_TITLES=$(grep ^ID_BLURAY_TITLES ${MEDIA_TITLE}-mplayer.info | cut -d'=' -f2)
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG BD_TOTAL_TITLES ${BD_TOTAL_TITLES}"; fi

		# Titles
		TITLE=1
		while [[ ${TITLE} -le ${BD_TOTAL_TITLES} ]]
		do
                        BD_TITLE_LENGTH[${TITLE}]=$(($(grep ^ID_BLURAY_TITLE_${TITLE}_LENGTH ${MEDIA_TITLE}-mplayer.info | cut -d'=' -f2 | cut -d'.' -f1) / 60))
                        BD_TITLE_CHAPTERS[$TITLE]=$(grep ^ID_BLURAY_TITLE_${TITLE}_CHAPTERS ${MEDIA_TITLE}-mplayer.info | cut -d'=' -f2)
                        BD_TITLE_PLAYLIST_POSITION[${TITLE}]=$(grep ^ID_BLURAY_TITLE_${TITLE}_PLAYLIST ${MEDIA_TITLE}-mplayer.info | cut -d'=' -f2)
                        BD_TITLE_ANGLES[${TITLE}]=$(grep ^ID_BLURAY_TITLE_${TITLE}_ANGLE ${MEDIA_TITLE}-mplayer.info | cut -d'=' -f2)
			if [[ ${DEBUG} == "1" ]]; then
				echo "DEBUG TITLE ${TITLE}"
				echo "DEBUG BD_TITLE_LENGTH[${TITLE}] ${BD_TITLE_LENGTH[$TITLE]}"
				echo "DEBUG BD_TITLE_CHAPTERS[${TITLE}] ${BD_TITLE_CHAPTERS[$TITLE]}"
				echo "DEBUG BD_TITLE_PLAYLIST_POSITION[$TITLE] ${BD_TITLE_PLAYLIST_POSITION[$TITLE]}"
				echo "DEBUG BD_TITLE_ANGLES[${TITLE}] ${BD_TITLE_ANGLES[$TITLE]}"
			fi
			TITLE=$((${TITLE} + 1))
		done

		# zenity height
		# Add radiolist header to component number
		ZENITY_TITLES_COMPONENTS=${TITLE}
		ZENITY_TITLES_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_TITLES_COMPONENTS}))
		ZENITY_TITLES_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_TITLES_HEIGHT_COMPONENTS}))
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_TITLES_HEIGHT ${ZENITY_TITLES_HEIGHT}"; fi

		# Display all Titles but don't check Titles with DVD_TITLE_LENGTH < 5 min
		ZENITY_TITLES=$(
			for ((l=1; l < $TITLE ; l++)); do if [[ $(echo ${BD_TITLE_LENGTH[l]}) -lt "5" ]]; then echo FALSE; else echo TRUE; fi ; echo "$l"; echo "${BD_TITLE_LENGTH[l]}"; echo "${BD_TITLE_CHAPTERS[l]}"; echo "${BD_TITLE_PLAYLIST_POSITION[l]}"; echo "${BD_TITLE_ANGLES[l]} "; done | zenity --list --checklist \
				--title="${ZEN_TITLE}" \
				--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
				--width "550" \
				--height ${ZENITY_TITLES_HEIGHT} \
				--column="${ZEN_COL_CHOICE}" --column="${ZEN_COL_TITLE}" --column="${ZEN_COL_LENGHT} (min)" --column="${ZEN_COL_CHAPTERS}" --column="Playlist position" --column="Angles" \
				--print-column="2" \
				--separator=' ' \
				--text="$(gettext "BD Title(s) choice")"
		)
		if [ $? = "1" ]; then wazzuf_quit; fi
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_TITLES ${ZENITY_TITLES}"; fi

		BD_TITLE_LIST="${ZENITY_TITLES}"
		echo "BD_TITLE_LIST="\"${BD_TITLE_LIST}\""" >> ${CONF_FILE_TMP}

	else
		# single video
		bd_get_longest_title
		BD_LONGEST_TITLE_CHAPTERS=$(grep ^ID_BLURAY_TITLE_${BD_LONGEST_TITLE_NUMBER}_CHAPTERS ${MEDIA_TITLE}-mplayer.info | cut -d '=' -f2)
		BD_TOTAL_TITLES=$(grep ^ID_BLURAY_TITLES ${MEDIA_TITLE}-mplayer.info | cut -d '=' -f2)
	
		if [[ ${DEBUG} == "1" ]]; then
			echo "DEBUG BD_LONGEST_TITLE_NUMBER ${BD_LONGEST_TITLE_NUMBER}"
			echo "DEBUG BD_TOTAL_TITLES ${BD_TOTAL_TITLES}"
			echo "DEBUG BD_LONGEST_TITLE_CHAPTERS ${BD_LONGEST_TITLE_CHAPTERS}"
		fi

		zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The longest track is <b>Title %s</b> / %s (Chapters: %s).
This one will be use for cropping detection.")" "${BD_LONGEST_TITLE_NUMBER}" "${BD_TOTAL_TITLES}" ${BD_LONGEST_TITLE_CHAPTERS})" --ok-label "${ZEN_LABEL_NEXT}"
	fi
	;;
DVD | ISO_DVD )
	check_lsdvd
	DVD_PATH="${ZENITY_DISC_DIR}"

	if [[ $SOURCE == "DVD" ]]; then
		# If an iso, mount the device
		if [[ ${SOURCE} == "ISO_DVD" ]]; then
			iso_manage mount GUI
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ISO_MOUNT_POINT ${ISO_MOUNT_POINT}"; fi
			DVD_MOUNT_PATH="${ISO_MOUNT_POINT}"
		else
			DVD_MOUNT_PATH="${DVD_PATH}"
		fi
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG BD_MOUNT ${BD_MOUNT}"; fi

		# Compare the provided media device type with the detected one
		MOUNT_PATH="${DVD_MOUNT_PATH}"
		get_media_device_type
		if [[ ! ${MEDIA_DEVICE_TYPE} == "DVD" ]]; then
			zenity --error --title "${ZEN_TITLE}" \
				--text "$(gettext "Media device not recognized as DVD but as ${MEDIA_DEVICE_TYPE} ! ")" \
				--timeout=5
			wazzuf_quit
		fi
		get_media_title

		# Propose to copy DVD to local iso file
		# need  ISO_FILE
		#	DVD_MOUNT_PATH
		zenity --question --title "${ZEN_TITLE}" --text "$(gettext "Do you want to <b>make a local iso</b> file of your DVD ? ")" --ok-label "${ZEN_LABEL_YES}" --cancel-label="${ZEN_LABEL_NO}"
		if [ $? = "0" ]; then
			# only if ISO_FILE exists
			if [[ "${ISO_FILE}" == "" ]]; then
				ISO_FILE="${MEDIA_TITLE}.iso"
				sed -i "s/^SOURCE=\"DVD\"$/SOURCE=\"DVD\"\nISO_FILE=\"${ISO_FILE}\"/" ${CONF_FILE_TMP}
			fi
			copy_dvd2iso
			# Change SOURCE="DVD" to "ISO_DVD" in configuration file
			sed -i 's/^SOURCE="DVD"$/SOURCE="ISO_DVD"/' ${CONF_FILE_TMP}
		fi
		DVD_SOURCE="${DVD_PATH}"
	else
		DVD_SOURCE="${ISO_FILE_PATH}"
		
		MEDIA_TITLE=$(echo ${ISO_FILE_PATH} | awk 'BEGIN {FS = "/"} ; {print $NF}' | sed 's/.iso//')
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG MEDIA_TITLE ${MEDIA_TITLE}";fi
	fi

	( lsdvd -acsv "${DVD_SOURCE}" 2>/dev/null > ${MEDIA_TITLE}-lsdvd.info ) | zenity --progress \
	        --title="${ZEN_TITLE}" \
	        --text="$(gettext "DVD analyse ")" \
	        --cancel-label="${ZEN_LABEL_CANCEL}" \
	        --pulsate \
	        --auto-close
	if [[ $? == "1" ]]; then wazzuf_quit; fi

	if [[ ${ZENITY_VIDEO_TYPE} == "SHOW" ]]; then
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG Warning ! Assume DVD_EPISODES_ORG is TITLES !"; fi
		# Episodes are classified on DVD CHAPTERS ("CHAPTERS") *or* on DVD TITLES ("TITLES")
		# Default: Titles
		DVD_EPISODES_ORG="TITLES"
	#	DVD_EPISODES_ORG="CHAPTERS"
		echo "DVD_EPISODES_ORG="\"${DVD_EPISODES_ORG}\""" >> ${CONF_FILE_TMP}

		case ${DVD_EPISODES_ORG} in
		TITLES )
			# If episodes are on DVD TITLES
			strings ${MEDIA_TITLE}-lsdvd.info | grep "^Title:" > ${MEDIA_TITLE}-Titles-lsdvd.info

			# Titles
			i=0
			while read LINE
			do
				i=$(($i + 1))
				DVD_TITLE_ID[$i]=$(echo ${LINE} | cut -d ',' -f1 | cut -d ':' -f2 | sed s/\ //)
				DVD_TITLE_LENGTH[$i]=$(echo ${LINE} | cut -d ',' -f2 | cut -d '.' -f1 | sed s/\ //| cut -d ' ' -f2)
				DVD_TITLE_CHAPTERS[$i]=$(echo ${LINE} | cut -d ',' -f2 | cut -d '.' -f2 | cut -d ':' -f2 | sed s/\ //)
				DVD_TITLE_TRACKS_AUDIO[$i]=$(echo ${LINE} | cut -d ',' -f4 | cut -d ':' -f2 | sed s/\ //)
				DVD_TITLE_TRACKS_SUBTITLES[$i]=$(echo ${LINE} | cut -d ',' -f5 | cut -d ':' -f2 | sed s/\ //)
				if [[ ${DEBUG} == "1" ]]; then
					echo "DEBUG i $i"
					echo "DEBUG DVD_TITLE_ID[$i] ${DVD_TITLE_ID[$i]}"
					echo "DEBUG DVD_TITLE_LENGTH[$i] ${DVD_TITLE_LENGTH[$i]}"
					echo "DEBUG DVD_TITLE_CHAPTERS[$i] ${DVD_TITLE_CHAPTERS[$i]}"
					echo "DEBUG DVD_TITLE_TRACKS_AUDIO[$i] ${DVD_TITLE_TRACKS_AUDIO[$i]}"
					echo "DEBUG DVD_TITLE_TRACKS_SUBTITLES[$i] ${DVD_TITLE_TRACKS_SUBTITLES[$i]}"
				fi
			done  < ${MEDIA_TITLE}-Titles-lsdvd.info

			# zenity height
			# Add radiolist header to component number
			ZENITY_TITLES_COMPONENTS=$(($i + 1))
			ZENITY_TITLES_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_TITLES_COMPONENTS}))
			ZENITY_TITLES_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_TITLES_HEIGHT_COMPONENTS}))
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_TITLES_HEIGHT ${ZENITY_TITLES_HEIGHT}"; fi
	
			# Display all Titles but don't check Titles with DVD_TITLE_LENGTH < "00:01:00"
			ZENITY_TITLES=$(
				for ((l=1; l <= $i ; l++)); do if [[ $(echo "${DVD_TITLE_LENGTH[l]}" | cut -d ':' -f 1-2) == "00:00" ]]; then echo FALSE; else echo TRUE; fi ; echo "${DVD_TITLE_ID[l]}"; echo "${DVD_TITLE_LENGTH[l]}"; echo "${DVD_TITLE_CHAPTERS[l]}"; echo "${DVD_TITLE_TRACKS_AUDIO[l]}"; echo "${DVD_TITLE_TRACKS_SUBTITLES[l]} "; done | zenity --list --checklist \
				--title="${ZEN_TITLE}" \
				--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
				--width "550" \
				--height ${ZENITY_TITLES_HEIGHT} \
				--column="${ZEN_COL_CHOICE}" --column="${ZEN_COL_TITLE}" --column="${ZEN_COL_LENGHT}" --column="${ZEN_COL_CHAPTERS}" --column="${ZEN_COL_TRACKS_AUDIO}" --column="${ZEN_COL_TRACKS_SUBTITLES}" \
				--print-column="2" \
				--separator=' ' \
				--text="$(gettext "DVD Title(s) choice")"
			)
			if [ $? = "1" ]; then wazzuf_quit; fi
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_TITLES ${ZENITY_TITLES}"; fi

			DVD_TITLE_LIST="${ZENITY_TITLES}"
			echo "DVD_TITLE_LIST="\"${DVD_TITLE_LIST}\""" >> ${CONF_FILE_TMP}
			;;
		CHAPTERS )
			# If episodes are on DVD CHAPTERS
			# Not used for now
			DVD_TITLE_NUMBER=$(strings ${MEDIA_TITLE}-lsdvd.info | grep "^Longest track:" | sed s/'Longest track: '//)
			echo "DVD_TITLE_NUMBER="\"${DVD_TITLE_NUMBER}\""" >> ${CONF_FILE_TMP}
			DVD_CHAPTER_FIRST="1"
			DVD_CHAPTER_LAST=$(strings ${MEDIA_TITLE}-lsdvd.info | grep "^Title: ${DVD_TITLE_NUMBER}" | cut -d ',' -f2 | cut -d '.' -f2 | cut -d ':' -f2 | sed s/\ //)
			echo "DVD_CHAPTER_FIRST="\"${DVD_CHAPTER_FIRST}\""" >> ${CONF_FILE_TMP}
			echo "DVD_CHAPTER_LAST="\"${DVD_CHAPTER_LAST}\""" >> ${CONF_FILE_TMP}
			;;
		esac
	else
		DVD_TITLE_NUMBER=$(strings ${MEDIA_TITLE}-lsdvd.info | grep "^Longest track:" | sed s/'Longest track: '//)
		echo "DVD_TITLE_NUMBER="\"${DVD_TITLE_NUMBER}\""" >> ${CONF_FILE_TMP}
		zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The longest track is <b>Title %s</b>.
This one will be use for cropping detection.")" ${DVD_TITLE_NUMBER})" --ok-label "${ZEN_LABEL_NEXT}"
	fi
	;;
M2TS )
	( echo 10; mplayer -nolirc -v -vo null -ao null -frames 0 -identify "${M2TS_FILE_PATH}" 2>/dev/null > M2TS-mplayer.info; ${CONV_PROJECT} -i "${M2TS_FILE_PATH}" 2> M2TS-${CONV_PROJECT}.info ) | zenity --progress \
	        --title="${ZEN_TITLE}" \
	        --text="$(gettext "M2TS analyse ")" \
	        --cancel-label="${ZEN_LABEL_CANCEL}" \
	        --pulsate \
	        --auto-close

	# extract informations from associated mpls or clpi file
	MPLS_FILE_PATH=$(echo "${M2TS_FILE_PATH}" | sed 's!m2ts$!mpls!')
	check_mediainfo
	if [ -f "${MPLS_FILE_PATH}" ]; then
		mediainfo --Language=raw --LogFile=M2TS-mediainfo.info "${MPLS_FILE_PATH}" 1>/dev/null
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS-mediainfo.info extracted from mpls file"; fi
	else
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG no associated mpls file found"; fi
		CLPI_FILE_PATH=$(echo "${M2TS_FILE_PATH}" | sed 's!m2ts$!clpi!')
		if [ -f "${CLPI_FILE_PATH}" ]; then
			mediainfo --Language=raw --LogFile=M2TS-mediainfo.info "${CLPI_FILE_PATH}" 1>/dev/null
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS-mediainfo.info extracted from clpi file"; fi
		else
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG no associated clpi file found"; fi
		fi
	fi

	echo "# useless for m2ts/ts files" >> ${CONF_FILE_TMP}
        ;;
esac

## TRACKS OPTIONS
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## TRACKS OPTIONS" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

case ${SOURCE} in
M2TS )
	# Begin with video crop detection
	cropdetect GUI
	if [[ "${VIDEO_CROP}" == "" ]]; then
		zenity --info --title "${ZEN_TITLE}" --text "$(gettext "The m2ts/ts video crop has not been found ")" --ok-label "${ZEN_LABEL_NEXT}"
	else
		zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The m2ts/ts video crop has been set to %s")" ${VIDEO_CROP})" --ok-label "${ZEN_LABEL_NEXT}"
	fi
	echo "VIDEO_CROP="\"${VIDEO_CROP}\""" >> ${CONF_FILE_TMP}


	# Check file to analyse
	# CLPI first, then MPLS, finaly SOURCE
	if [[ -f "${CLPI_FILE_PATH}" ]]; then
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG CLPI file found."; fi
		M2TS_FILE_TOANALYSE="${CLPI_FILE_PATH}"
	elif [[ -f "${MPLS_FILE_PATH}" ]]; then
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG MPLS file found."; fi
		M2TS_FILE_TOANALYSE="${MPLS_FILE_PATH}"
	else
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG No available MPLS or CLPI file found."; fi
		M2TS_FILE_TOANALYSE="${M2TS_FILE_PATH}"
	fi

	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS_FILE_TOANALYSE ${M2TS_FILE_TOANALYSE}"; fi


	# Audio

	M2TS_AUDIOS_NUMBER=$(mediainfo --Inform="General;%AudioCount%" "${M2TS_FILE_TOANALYSE}")
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS_AUDIOS_NUMBER ${M2TS_AUDIOS_NUMBER}"; fi

	M2TS_CONF_AUDIOS_PATH="/tmp/wazzuf-conf-audio.txt"
	M2TS_CONF_AUDIOS_FINAL_PATH="/tmp/wazzuf-conf-audio-final.txt"
	( mediainfo --Inform="Audio;%ID%|%Format%|%Language/String%|%Channel(s)%|%BitRate%\n" "${M2TS_FILE_TOANALYSE}" > ${M2TS_CONF_AUDIOS_PATH} ) | zenity --progress \
	        --title="${ZEN_TITLE}" \
	        --text="$(gettext "Audio analyze ")" \
	        --cancel-label="${ZEN_LABEL_CANCEL}" \
	        --pulsate \
	        --auto-close

	# Drop last line
	head -n $(($(cat ${M2TS_CONF_AUDIOS_PATH} | wc -l) - 1)) ${M2TS_CONF_AUDIOS_PATH} > ${M2TS_CONF_AUDIOS_FINAL_PATH}

	if [[ "${M2TS_AUDIOS_NUMBER}" -ge "1" ]]; then
		i=0
		while read LINE
		do
			i=$(($i + 1))
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG i $i"; fi

			M2TS_AUDIO_ID[$i]=$(echo ${LINE} | cut -d '|' -f 1)
			M2TS_AUDIO_FORMAT[$i]=$(echo ${LINE} | cut -d '|' -f 2)
			M2TS_AUDIO_LANG[$i]=$(echo ${LINE} | cut -d '|' -f 3)
			if [[ ${M2TS_AUDIO_LANG[$i]} == "" ]]; then M2TS_AUDIO_LANG[$i]="unknown"; fi

			# If M2TS_FILE_TOANALYSE is a CLPI or MPLS file, there's no Channels and Bitrate info ! So back to m2ts analyse.
			if [[ ${M2TS_FILE_TOANALYSE} == *.clpi || ${M2TS_FILE_TOANALYSE} == *.mpls ]]; then
				M2TS_AUDIO_CHANNELS[$i]=$(mediainfo --Inform="Audio;%ID%%Channel(s)%\n" "${M2TS_FILE_PATH}" | grep ${M2TS_AUDIO_ID[$i]} | sed s/${M2TS_AUDIO_ID[$i]}// | tee >( zenity --progress \
				        --title="${ZEN_TITLE}" \
				        --text="$(printf "$(gettext "Audio analyze - Track %s Channel")" "$i")" \
				        --cancel-label="${ZEN_LABEL_CANCEL}" \
				        --pulsate \
				        --auto-close))

				M2TS_AUDIO_BITRATE[$i]=$(mediainfo --Inform="Audio;%ID%%BitRate%\n" "${M2TS_FILE_PATH}" | grep ${M2TS_AUDIO_ID[$i]} | sed s/${M2TS_AUDIO_ID[$i]}// | head -c -4 | tee >( zenity --progress \
				        --title="${ZEN_TITLE}" \
				        --text="$(printf "$(gettext "Audio analyze - Track %s BitRate")" "$i")" \
				        --cancel-label="${ZEN_LABEL_CANCEL}" \
				        --pulsate \
				        --auto-close))
			else
				M2TS_AUDIO_CHANNELS[$i]=$(echo ${LINE} | cut -d '|' -f 4)
				M2TS_AUDIO_BITRATE[$i]=$(echo ${LINE} | cut -d '|' -f 5)
			fi

			if [[ ${DEBUG} == "1" ]]; then
				echo "DEBUG M2TS_AUDIO_ID[$i] ${M2TS_AUDIO_ID[$i]}"
				echo "DEBUG M2TS_AUDIO_LANG[$i] ${M2TS_AUDIO_LANG[$i]}"
				echo "DEBUG M2TS_AUDIO_FORMAT[$i] ${M2TS_AUDIO_FORMAT[$i]}"
				echo "DEBUG M2TS_AUDIO_CHANNELS[$i] ${M2TS_AUDIO_CHANNELS[$i]}"
				echo "DEBUG M2TS_AUDIO_BITRATE[$i] ${M2TS_AUDIO_BITRATE[$i]}"
			fi
		done < ${M2TS_CONF_AUDIOS_FINAL_PATH}
	else
		echo "Error ! No audio track(s) found !"
		exit 1
	fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG i $i"; fi

	# Add checklist header to component number
	ZENITY_AUDIO_TRACKS_COMPONENTS=$(($i + 1))
	ZENITY_AUDIO_TRACKS_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_AUDIO_TRACKS_COMPONENTS}))
	ZENITY_AUDIO_TRACKS_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_AUDIO_TRACKS_HEIGHT_COMPONENTS}))
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS_HEIGHT ${ZENITY_AUDIO_TRACKS_HEIGHT}"; fi

	ZENITY_AUDIO_TRACKS=$(
		for ((l=1; l <= $i ; l++)); do echo TRUE; echo "${M2TS_AUDIO_ID[l]}"; echo "${M2TS_AUDIO_LANG[l]}"; echo "${M2TS_AUDIO_FORMAT[l]}"; echo "${M2TS_AUDIO_CHANNELS[l]}"; echo "${M2TS_AUDIO_BITRATE[l]}"; done | zenity --list --checklist \
		--title="${ZEN_TITLE}" \
		--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
		--width "520" \
		--height ${ZENITY_AUDIO_TRACKS_HEIGHT} \
		--column="${ZEN_COL_CHOICE}" --column="AID" --column="${ZEN_COL_LANG}" --column="Format" --column="${ZEN_COL_CHANNELS}" --column="Bitrate" \
		--print-column="2" \
		--separator=' ' \
		--text="$(gettext "Audio track(s) choice")"
	)
	if [[ $? == "1" ]]; then wazzuf_quit; fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS ${ZENITY_AUDIO_TRACKS}"; fi

	j=0	
	for ZENITY_AUDIO_TRACK in ${ZENITY_AUDIO_TRACKS}
	do
		j=$(($j + 1))
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG j -> $j - ZENITY_AUDIO_TRACK ${ZENITY_AUDIO_TRACK}"; fi
		# loop on origin lines number (i)
		for ((k=1; k <= $i ; k++))
		do
			if [[ "${M2TS_AUDIO_ID[$k]}" == "${ZENITY_AUDIO_TRACK}" ]]; then
				if [[ ${DEBUG} == "1" ]]; then echo "DEBUG k -> $k - AID ${M2TS_AUDIO_ID[$k]}"; fi
				echo "" >> ${CONF_FILE_TMP}

				if [[ "${M2TS_AUDIO_LANG[$k]}" == "unknown" || "${M2TS_AUDIO_LANG[$k]}" == "" ]]; then
					echo "AUDIO_${j}_LANG=\"und\"" >> ${CONF_FILE_TMP}
				else
					echo "AUDIO_${j}_LANG=\"${M2TS_AUDIO_LANG[$k]}\"" >> ${CONF_FILE_TMP}
				fi

				echo "AUDIO_${j}_AID=\"${M2TS_AUDIO_ID[$k]}\"" >> ${CONF_FILE_TMP}

				ZENITY_AUDIO_TRACK_SOURCE=$(echo ${M2TS_AUDIO_FORMAT[$k]} | cut -d '|' -f3)
				case ${ZENITY_AUDIO_TRACK_SOURCE} in
				ac3* | AC-3 )
					echo "AUDIO_${j}_SOURCE=\"AC3\"" >> ${CONF_FILE_TMP}
					;;
				"dca(DTS)" | "dca(DTS-HDMA)" | "DTS" | dts* )
					echo "AUDIO_${j}_SOURCE=\"DTS\"" >> ${CONF_FILE_TMP}
					;;
				pcm_bluray* | PCM )
					echo "AUDIO_${j}_SOURCE=\"PCM-BR\"" >> ${CONF_FILE_TMP}
					;;
				truehd | TrueHD )
					echo "AUDIO_${j}_SOURCE=\"THD\"" >> ${CONF_FILE_TMP}
					;;
				* )
					echo "AUDIO_${j}_SOURCE=\"${ZENITY_AUDIO_TRACK_SOURCE}\"" >> ${CONF_FILE_TMP}
					;;
				esac
		
				echo "AUDIO_${j}_NAME=\"${M2TS_AUDIO_CHANNELS[$k]}\"" >> ${CONF_FILE_TMP}
			fi
		done
	done


	# subtitles
	M2TS_SUBS_NUMBER=$(mediainfo --Inform="General;%TextCount%" "${M2TS_FILE_TOANALYSE}")
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG M2TS_SUBS_NUMBER ${M2TS_SUBS_NUMBER}"; fi

	M2TS_CONF_SUBS_PATH="/tmp/wazzuf-conf-subs.txt"
	M2TS_CONF_SUBS_FINAL_PATH="/tmp/wazzuf-conf-subs-final.txt"
	( mediainfo --Inform="Text;%ID%|%Format%|%Language/String%\n" "${M2TS_FILE_TOANALYSE}" > ${M2TS_CONF_SUBS_PATH} ) | zenity --progress \
	        --title="${ZEN_TITLE}" \
	        --text="$(gettext "Subtitle analyze ")" \
	        --cancel-label="${ZEN_LABEL_CANCEL}" \
	        --pulsate \
	        --auto-close

	# Drop last line
	head -n $(($(cat ${M2TS_CONF_SUBS_PATH} | wc -l) - 1)) ${M2TS_CONF_SUBS_PATH} > ${M2TS_CONF_SUBS_FINAL_PATH}

	if [[ "${M2TS_SUBS_NUMBER}" -ge "1" ]]; then
		i=0
		while read LINE
		do
			i=$(($i + 1))
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG i $i"; fi
			SID=$(echo ${LINE} | cut -d '|' -f 1)
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG SID ${SID}"; fi

			if echo "${SID}" | egrep -vq '^[0-9]+$'; then
				# Check if a CC sub
				M2TS_SUB_FORMAT[$i]=$(echo ${LINE} | cut -d '|' -f 2)
				if [[ ${M2TS_SUB_FORMAT[$i]} == "EIA-608" ]]; then
					if [[ ${DEBUG} == "1" ]]; then echo "DEBUG SID ${SID} recognized as CC subtitle track"; fi
					M2TS_SUB_ID[$i]=${SID}
					M2TS_SUB_LANG[$i]="unknown"
				else
					M2TS_SUB_FORMAT[$i]="error"
				fi
			else
				# should be always PGS (Blu-ray)
				M2TS_SUB_ID[$i]=${SID}
				M2TS_SUB_LANG[$i]=$(echo ${LINE} | cut -d '|' -f 3)
				if [[ ${M2TS_SUB_LANG[$i]} == "" ]]; then M2TS_SUB_LANG[$i]="unknown"; fi
				M2TS_SUB_FORMAT[$i]=$(echo ${LINE} | cut -d '|' -f 2)
			fi

			if [[ ${DEBUG} == "1" ]]; then
				echo "DEBUG M2TS_SUB_ID[$i] ${M2TS_SUB_ID[$i]}"
				echo "DEBUG M2TS_SUB_LANG[$i] ${M2TS_SUB_LANG[$i]}"
				echo "DEBUG M2TS_SUB_FORMAT[$i] ${M2TS_SUB_FORMAT[$i]}"
			fi
		done < ${M2TS_CONF_SUBS_FINAL_PATH}

		# zenity height
		# Add checklist header to component number
		ZENITY_SUBTITLE_TRACKS_COMPONENTS=$(($i + 1))
		ZENITY_SUBTITLE_TRACKS_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_SUBTITLE_TRACKS_COMPONENTS}))
		ZENITY_SUBTITLE_TRACKS_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_SUBTITLE_TRACKS_HEIGHT_COMPONENTS}))
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS_HEIGHT ${ZENITY_SUBTITLE_TRACKS_HEIGHT}"; fi

		ZENITY_SUBTITLE_TRACKS=$(
			for ((l=1; l <= $i ; l++)); do echo TRUE; echo "${M2TS_SUB_ID[l]}"; echo "${M2TS_SUB_LANG[l]}"; echo "${M2TS_SUB_FORMAT[l]} "; done | zenity --list --checklist \
			--title="${ZEN_TITLE}" \
			--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
			--width "330" \
			--height ${ZENITY_SUBTITLE_TRACKS_HEIGHT} \
			--column="${ZEN_COL_CHOICE}" --column="SID" --column="${ZEN_COL_LANG}" --column="Format" \
			--print-column="2" \
			--separator=' ' \
			--text="$(gettext "Subtitle track(s) choice")"
		)
		if [[ $? == "1" ]]; then wazzuf_quit; fi
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS ${ZENITY_SUBTITLE_TRACKS}"; fi

		j=0	
		for ZENITY_SUBTITLE_TRACK in ${ZENITY_SUBTITLE_TRACKS}
		do
			j=$(($j + 1))
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG j -> $j - ZENITY_SUBTITLE_TRACK ${ZENITY_SUBTITLE_TRACK}"; fi
			# loop on original lines number (i)
			for ((k=1; k <= $i ; k++))
			do
				if [[ ${M2TS_SUB_ID[$k]} == ${ZENITY_SUBTITLE_TRACK} ]]; then
					if [[ ${DEBUG} == "1" ]]; then echo "DEBUG k -> $k - SID ${M2TS_SUB_ID[$k]}"; fi
					echo "" >> ${CONF_FILE_TMP}

					if [[ ${M2TS_SUB_FORMAT[$k]} == "pgssub" ||  ${M2TS_SUB_FORMAT[$k]} == "PGS" ]]; then
						echo "SUBTITLE_${j}_LANG=\"$(echo ${M2TS_SUB_LANG[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_SID=\"$(echo ${M2TS_SUB_ID[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_SOURCE=\"PGS\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_NAME=\"$(echo ${M2TS_SUB_LANG[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_FILE_FORCE=\"\"" >> ${CONF_FILE_TMP}
					elif [[ ${M2TS_SUB_FORMAT[$k]} == "EIA-608" ]]; then
						echo "SUBTITLE_${j}_LANG=\"und\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_SID=\"$(echo ${M2TS_SUB_ID[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_SOURCE=\"CC\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_NAME=\"$(echo ${M2TS_SUB_LANG[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_FILE_FORCE=\"\"" >> ${CONF_FILE_TMP}
					else
						if [[ ${M2TS_SUB_LANG[$k]} == "unknown" ]]; then
							echo "SUBTITLE_${j}_LANG=\"und\"" >> ${CONF_FILE_TMP}
						else
							echo "SUBTITLE_${j}_LANG=\"${M2TS_SUB_LANG[$k]}\"" >> ${CONF_FILE_TMP}
						fi
						echo "SUBTITLE_${j}_SID=\"$(echo ${M2TS_SUB_ID[$k]})\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_SOURCE=\"Unknown\"" >> ${CONF_FILE_TMP}
						echo "SUBTITLE_${j}_NAME=\"$(echo ${M2TS_SUB_ID[$k]})\"" >> ${CONF_FILE_TMP}
					fi
				fi
			done
		done
	else
		echo "No subtitle track(s) found."
	fi
	;;
ISO_BD | BD )
	cropdetect GUI
	# VIDEO_CROP value check
	if [[ ${VIDEO_CROP} == "" ]]; then
		zenity --info --title "${ZEN_TITLE}" --text "$(gettext "The BD video crop has not been found. ")" --ok-label "${ZEN_LABEL_NEXT}"
		echo "VIDEO_CROP="\"\"" # not found" >> ${CONF_FILE_TMP}
	else
		zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The BD video crop has been set to %s")" ${VIDEO_CROP})" --ok-label "${ZEN_LABEL_NEXT}"
		echo "VIDEO_CROP="\"${VIDEO_CROP}\""" >> ${CONF_FILE_TMP}
	fi

	if [[ $SOURCE == "ISO_BD" ]]; then iso_manage umount GUI; fi
	;;
DVD | ISO_DVD )
	if [[ ${ZENITY_VIDEO_TYPE} == "SHOW" && ${DVD_EPISODES_ORG} == "TITLES" ]]; then
		for DVD_TITLE_NUMBER in ${DVD_TITLE_LIST}
		do
			cropdetect GUI
			# VIDEO_CROP for each TITLE (for information only)
			echo "#VIDEO_CROP_TITLE_${DVD_TITLE_NUMBER}="\"${VIDEO_CROP}\""" >> ${CONF_FILE_TMP}
			lsdvd -t ${DVD_TITLE_NUMBER} -acsv ${DVD_SOURCE} 2>/dev/null | grep -E "Subtitle|Audio|VTS" > ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}.info
			lsdvd -t ${DVD_TITLE_NUMBER} -acsv "${DVD_SOURCE}" 2>/dev/null | grep -E "Audio: " > ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-audio.info
		done
		# default VIDEO_CROP: the "biggest"
		echo "VIDEO_CROP="\"$(grep ^#VIDEO_CROP_TITLE_ ${CONF_FILE_TMP} | cut -d '"' -f 2 | sort -n | tail -1)\""" >> ${CONF_FILE_TMP}
		# VIDEO_CROP value check
		if [[ ${VIDEO_CROP} == "" ]]; then
			zenity --info --title "${ZEN_TITLE}" --text "$(gettext "The DVD video crop has not been found. ")" --ok-label "${ZEN_LABEL_NEXT}"
		else
			zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The DVD video crop has been set to %s.
This is the biggest one. Crop detection for all choosen Titles are in conf file too.")" ${VIDEO_CROP})" --ok-label "${ZEN_LABEL_NEXT}"
		fi
	else
		cropdetect GUI
		# VIDEO_CROP value check
		if [[ ${VIDEO_CROP} == "" ]]; then
			zenity --info --title "${ZEN_TITLE}" --text "$(gettext "The DVD video crop has not been found. ")" --ok-label "${ZEN_LABEL_NEXT}"
			echo "VIDEO_CROP="\"\"" # not found" >> ${CONF_FILE_TMP}
		else
			zenity --info --title "${ZEN_TITLE}" --text "$(printf "$(gettext "The DVD video crop has been set to %s")" ${VIDEO_CROP})" --ok-label "${ZEN_LABEL_NEXT}"
			echo "VIDEO_CROP="\"${VIDEO_CROP}\""" >> ${CONF_FILE_TMP}
		fi

		lsdvd -t ${DVD_TITLE_NUMBER} -acsv "${DVD_SOURCE}" 2>/dev/null | grep "Audio:" > ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-audio.info
	fi

	# audio
	i=0
	while read LINE
	do
		i=$(($i + 1))
		ID_HEX=$(echo ${LINE} | grep -o '.\{5\}$' | sed s/,//)
		if [[ ! ${ID_HEX} == "" ]]; then
			ID=$(($ID_HEX))
			DVD_AUDIO_ID[$i]=${ID}
			DVD_AUDIO_LANG[$i]=$(echo ${LINE} | cut -d ',' -f2 | cut -d ':' -f2 | sed s/\ //)
			DVD_AUDIO_FORMAT[$i]=$(echo ${LINE} | cut -d ',' -f3 | cut -d ':' -f2 | sed s/\ //)
			DVD_AUDIO_CHANNELS[$i]=$(echo ${LINE} | cut -d ',' -f6 | cut -d ':' -f2 | sed s/\ //)
		fi
	done  < ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-audio.info
	if [[ ${DEBUG} == "1" ]]; then
		echo "DEBUG DVD_AUDIO_ID_[X] ${DVD_AUDIO_ID[1]} ${DVD_AUDIO_ID[2]} ${DVD_AUDIO_ID[3]} ${DVD_AUDIO_ID[4]}"
	fi

	# zenity height
	# Add checklist header to component number
	ZENITY_AUDIO_TRACKS_COMPONENTS=$(($i + 1))
	ZENITY_AUDIO_TRACKS_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_AUDIO_TRACKS_COMPONENTS}))
	ZENITY_AUDIO_TRACKS_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_AUDIO_TRACKS_HEIGHT_COMPONENTS}))
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS_HEIGHT ${ZENITY_AUDIO_TRACKS_HEIGHT}"; fi

	ZENITY_AUDIO_TRACKS=$(
		for ((l=1; l <= $i ; l++)); do echo TRUE; echo "${DVD_AUDIO_ID[l]}"; echo "${DVD_AUDIO_LANG[l]}"; echo "${DVD_AUDIO_FORMAT[l]}"; echo "${DVD_AUDIO_CHANNELS[l]} "; done | zenity --list --checklist \
		--title="${ZEN_TITLE}" \
		--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
		--width "430" \
		--height ${ZENITY_AUDIO_TRACKS_HEIGHT} \
		--column="${ZEN_COL_CHOICE}" --column="AID" --column="${ZEN_COL_LANG}" --column="Format" --column="${ZEN_COL_CHANNELS}" \
		--print-column="2" \
		--separator=' ' \
		--text="$(gettext "Audio track(s) choice")"
	)
	if [[ $? == "1" ]]; then wazzuf_quit; fi
	if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS ${ZENITY_AUDIO_TRACKS}"; fi

	j=0	
	for ZENITY_AUDIO_TRACK in ${ZENITY_AUDIO_TRACKS}
	do
		j=$(($j + 1))
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG j -> $j - ZENITY_AUDIO_TRACK ${ZENITY_AUDIO_TRACK}"; fi
		# loop on original lines number (i)
		for ((k=1; k <= $i ; k++))
		do
			if [[ ${DVD_AUDIO_ID[$k]} == ${ZENITY_AUDIO_TRACK} ]]; then
				if [[ ${DEBUG} == "1" ]]; then echo "DEBUG k -> $k - AID ${DVD_AUDIO_ID[$k]}"; fi
				echo "" >> ${CONF_FILE_TMP}

				ZENITY_AUDIO_TRACK_LANG=$(echo ${DVD_AUDIO_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f1 | sed s/\ //)
				if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACK_LANG ${ZENITY_AUDIO_TRACK_LANG}"; fi
				if [[ ${ZENITY_AUDIO_TRACK_LANG} == "xx" || ${ZENITY_AUDIO_TRACK_LANG} == "ï¿½ï¿½" ]]; then
					# replace xx or ï¿½ï¿½ by und (Undetermined)
					echo "AUDIO_${j}_LANG=\"und\"" >> ${CONF_FILE_TMP}
				else
					echo "AUDIO_${j}_LANG=\"${ZENITY_AUDIO_TRACK_LANG}\"" >> ${CONF_FILE_TMP}
				fi

				echo "AUDIO_${j}_AID=\"$(echo ${DVD_AUDIO_ID[$k]} | cut -d '|' -f1)\"" >> ${CONF_FILE_TMP}

				ZENITY_AUDIO_TRACK_SOURCE=$(echo ${DVD_AUDIO_FORMAT[$k]} | cut -d '|' -f3)
				case ${ZENITY_AUDIO_TRACK_SOURCE} in
				ac3 )
					echo "AUDIO_${j}_SOURCE=\"AC3\"" >> ${CONF_FILE_TMP}
					;;
				lpcm )
					echo "AUDIO_${j}_SOURCE=\"PCM\"" >> ${CONF_FILE_TMP}
					;;
				dts )
					echo "AUDIO_${j}_SOURCE=\"DTS\"" >> ${CONF_FILE_TMP}
					;;
				* )
					echo "AUDIO_${j}_SOURCE=\"${ZENITY_AUDIO_TRACK_SOURCE}\"" >> ${CONF_FILE_TMP}
					;;
				esac

				ZENITY_AUDIO_TRACK_CHANNELS=$(echo ${DVD_AUDIO_CHANNELS[$k]} | cut -d '|' -f4)
				case ${ZENITY_AUDIO_TRACK_CHANNELS} in
				2 )
					echo "AUDIO_${j}_NAME=\"Stereo\"" >> ${CONF_FILE_TMP}
					;;
				6 )
					echo "AUDIO_${j}_NAME=\"5.1\"" >> ${CONF_FILE_TMP}
					;;
				# exists ?
				8 )
					echo "AUDIO_${j}_NAME=\"7.1\"" >> ${CONF_FILE_TMP}
					;;
				* )
					echo "AUDIO_${j}_NAME=\"${ZENITY_AUDIO_TRACK_CHANNELS}\"" >> ${CONF_FILE_TMP}
					;;
				esac
			fi
		done
	done

	# Subtitles
	lsdvd -t ${DVD_TITLE_NUMBER} -acsv "${DVD_SOURCE}" 2>/dev/null | grep "Subtitle:" > ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-sub.info

	if [ $(cat ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-sub.info | wc -l) -ge "1" ]; then
		i=0
		while read LINE
		do
			i=$(($i + 1))
			ID_HEX=$(echo ${LINE} | grep -o '.\{6\}$' | sed s/,//)
			if [[ ! ${ID_HEX} == "" ]]; then
				SID=$(($ID_HEX))
				DVD_SUB_ID[$i]=${SID}
				DVD_SUB_LANG[$i]=$(echo ${LINE} | cut -d ',' -f2 | cut -d ':' -f2 | sed s/\ //)
			fi
		done < ${MEDIA_TITLE}-lsdvd-T${DVD_TITLE_NUMBER}-sub.info
		if [[ ${DEBUG} == "1" ]]; then
			echo "DEBUG DVD_SUB_ID[X] ${DVD_SUB_ID[1]} ${DVD_SUB_ID[2]} ${DVD_SUB_ID[3]} ${DVD_SUB_ID[4]}"
		fi

		# zenity height
		# Add checklist header to component number
		ZENITY_SUBTITLE_TRACKS_COMPONENTS=$(($i + 1))
		ZENITY_SUBTITLE_TRACKS_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * ${ZENITY_SUBTITLE_TRACKS_COMPONENTS}))
		ZENITY_SUBTITLE_TRACKS_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_SUBTITLE_TRACKS_HEIGHT_COMPONENTS}))
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS_HEIGHT ${ZENITY_SUBTITLE_TRACKS_HEIGHT}"; fi

		ZENITY_SUBTITLE_TRACKS=$(
			for ((l=1; l <= $i ; l++)); do echo FALSE; echo "${DVD_SUB_ID[l]}"; echo "${DVD_SUB_LANG[l]} "; done | zenity --list --checklist \
			--title="${ZEN_TITLE}" \
			--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
			--width "350" \
			--height ${ZENITY_SUBTITLE_TRACKS_HEIGHT} \
			--column="${ZEN_COL_CHOICE}" --column="SID" --column="${ZEN_COL_LANG}" \
			--print-column="2" \
			--separator=' ' \
			--text="$(gettext "Subtitle track(s) choice")"
		)
		if [[ $? == "1" ]]; then wazzuf_quit; fi
		if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS ${ZENITY_SUBTITLE_TRACKS}"; fi
	
		j=0	
		for ZENITY_SUBTITLE_TRACK in ${ZENITY_SUBTITLE_TRACKS}
		do
			j=$(($j + 1))
			if [[ ${DEBUG} == "1" ]]; then echo "DEBUG j -> $j - ZENITY_SUBTITLE_TRACK ${ZENITY_SUBTITLE_TRACK}"; fi
			# loop on original lines number (i)
			for ((k=1; k <= $i ; k++))
			do
				if [[ ${DVD_SUB_ID[$k]} == ${ZENITY_SUBTITLE_TRACK} ]]; then
					if [[ ${DEBUG} == "1" ]]; then echo "DEBUG k -> $k - SID ${DVD_SUB_ID[$k]}"; fi
					echo "" >> ${CONF_FILE_TMP}
	
					ZENITY_SUBTITLE_TRACK_LANG=$(echo ${DVD_SUB_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f1 | sed s/\ //)
					if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACK_LANG ${ZENITY_SUBTITLE_TRACK_LANG}"; fi
					if [[ ${ZENITY_SUBTITLE_TRACK_LANG} == "xx" || ${ZENITY_SUBTITLE_TRACK_LANG} == "ï¿½ï¿½" ]]; then
						# replace xx or ï¿½ï¿½ by und (Undetermined)
						echo "SUBTITLE_${j}_LANG=\"und\"" >> ${CONF_FILE_TMP}
					else
						echo "SUBTITLE_${j}_LANG=\"${ZENITY_SUBTITLE_TRACK_LANG}\"" >> ${CONF_FILE_TMP}
					fi
	
					echo "SUBTITLE_${j}_NAME=\"$(echo ${DVD_SUB_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f2 | sed s/\ //)\"" >> ${CONF_FILE_TMP}
					
					echo "SUBTITLE_${j}_SID=\"$(echo ${DVD_SUB_ID[$k]} | cut -d '|' -f1)\"" >> ${CONF_FILE_TMP}
				fi
			done
		done
	fi
        ;;
esac

## OTHER OPTIONS
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## OTHER OPTIONS" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

ZENITY_OTHERS_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 4))
ZENITY_OTHERS_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_OTHERS_HEIGHT_COMPONENTS}))
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_OTHERS_HEIGHT ${ZENITY_OTHERS_HEIGHT}"; fi

ZENITY_OTHERS=$(zenity --list --checklist \
        --title="${ZEN_TITLE}" \
        --ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
        --width "300" \
        --height ${ZENITY_OTHERS_HEIGHT} \
        --column="${ZEN_COL_CHOICE}" --column="Option" --column="OPTION_VAR" \
        --print-column="3" \
        --hide-column="3" \
        --separator=' ' \
        --text="$(gettext "Other options choice")" \
        TRUE "$(gettext "NFO file creation")" NFO \
        FALSE "$(gettext "Video screenshots creation")" SCREENSHOTS \
        FALSE "$(gettext "Debug")" DEBUG \
)
if [[ $? == "1" ]]; then wazzuf_quit; fi
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_OTHERS ${ZENITY_OTHERS}"; fi

for ZENITY_OTHER in ${ZENITY_OTHERS}
do
	case ${ZENITY_OTHER} in
		NFO )
			echo "CREATE_NFO=\"1\"" >> ${CONF_FILE_TMP}
			;;
		SCREENSHOTS )
			echo "CREATE_SCREENSHOTS=\"1\"" >> ${CONF_FILE_TMP}
			;;
		DEBUG )
			echo "DEBUG=\"1\"" >> ${CONF_FILE_TMP}
			;;
	esac
done

## CODECS OPTIONS
echo "" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}
echo "## CODECS OPTIONS" >> ${CONF_FILE_TMP}
echo "" >> ${CONF_FILE_TMP}

# zenity height
ZENITY_CODEC_VIDEO_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 5))
ZENITY_CODEC_VIDEO_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_CODEC_VIDEO_HEIGHT_COMPONENTS}))
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_CODEC_VIDEO_HEIGHT ${ZENITY_CODEC_VIDEO_HEIGHT}"; fi

# default codecs
ZENITY_CODEC_VIDEO=$(zenity --list --radiolist \
	--title="${ZEN_TITLE}" \
	--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
	--width "420" \
	--height ${ZENITY_CODEC_VIDEO_HEIGHT} \
	--column="ID" --column="${ZEN_COL_DESCRIPTION}" --column="codec" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="$(gettext "Please choose your default video codec")" \
	TRUE "Xvid" XVID \
	FALSE "h264" H264 \
	FALSE "HEVC" HEVC \
	FALSE "$(gettext "Dump (faster) (original video track, mpeg source only)")" DUMP \
	FALSE "$(gettext "Dump with crop (mpeg source only)")" DUMP_CROP \
)
if [[ $? == "1" ]]; then wazzuf_quit; fi
echo "DEFAULT_CODEC_VIDEO="\"${ZENITY_CODEC_VIDEO}"\"" >> ${CONF_FILE_TMP}

# zenity height
ZENITY_CODEC_AUDIO_HEIGHT_COMPONENTS=$((${ZEN_HEIGHT_COMPONENT} * 5))
ZENITY_CODEC_AUDIO_HEIGHT=$((${ZEN_HEIGHT_BASE} + ${ZENITY_CODEC_AUDIO_HEIGHT_COMPONENTS}))
if [[ ${DEBUG} == "1" ]]; then echo "DEBUG ZENITY_CODEC_AUDIO_HEIGHT ${ZENITY_CODEC_AUDIO_HEIGHT}"; fi

ZENITY_CODEC_AUDIO=$(zenity --list --radiolist \
	--title="${ZEN_TITLE}" \
	--ok-label "${ZEN_LABEL_NEXT}" --cancel-label "${ZEN_LABEL_QUIT}" \
	--width "200" \
	--height ${ZENITY_CODEC_AUDIO_HEIGHT} \
	--column="ID" --column="${ZEN_COL_DESCRIPTION}" --column="codec" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="$(gettext "Please choose your default audio codec")" \
	FALSE "$(gettext "AC3 (DTS source only)")" AC3 \
	FALSE "MP3" MP3 \
	FALSE "Ogg Vorbis" VORBIS \
	FALSE "Opus" OPUS \
	TRUE "$(gettext "Dump (original audio track)")" DUMP \
)
if [[ $? == "1" ]]; then wazzuf_quit; fi
echo "DEFAULT_CODEC_AUDIO="\"${ZENITY_CODEC_AUDIO}"\"" >> ${CONF_FILE_TMP}

# for others codecs parameters
echo "" >> ${CONF_FILE_TMP}
# To get the template conf values:
CONF_FILE_EXAMPLE_LINE=$(grep -n "^# Others codecs options" ${CONF_FILE_EXAMPLE} | cut -d ':' -f 1)
tail -n +${CONF_FILE_EXAMPLE_LINE} ${CONF_FILE_EXAMPLE} >> ${CONF_FILE_TMP}

zenity --info --title "${ZEN_TITLE}" \
	--text "$(printf "$(gettext "Your Wazzuf configuration file has been saved to <b>%s</b>
(If you want to use it with Wazzuf Ripper, it must be %s )")" "${CONF_FILE_TMP}" "${CONF_FILE}")"

exit 0
