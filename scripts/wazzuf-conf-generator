#! /bin/bash
# Wazzuf Ripper
# DVD/BD configuration file generator GUI script
# booloki@lokizone.net

GLOBAL_CONF_FILE="/etc/wazzuf-ripper/wazzuf-ripper-global.conf"
source $GLOBAL_CONF_FILE

# check wazzuf files
source $FUNCTIONS_CHECK
checkandsource_wazzuf_files

WAZZUF_UI="GUI"

# global
ZEN_TITLE="Wazzuf Ripper Conf Generator"

zenity --question --title "$ZEN_TITLE" --text "Do you want to generate a <b>new Wazzuf Ripper configuration file</b> ?" --ok-label "OK" --cancel-label="Quit"
if [ $? = "1" ]; then wazzuf_quit; fi

## temporary conf file
CONF_FILE_TMP="$CONF_PATH_BASE/wazzuf-ripper.conf.tmp"
if [ -f $CONF_FILE_TMP ]; then rm $CONF_FILE_TMP; fi
touch $CONF_FILE_TMP
echo "# Wazzuf Ripper" > $CONF_FILE_TMP
echo "# Configuration file" >> $CONF_FILE_TMP
echo "# generated by wazzuf-conf-generator `date +%Y-%m-%d` `date +%H:%M`" >> $CONF_FILE_TMP
echo "# See $CONF_FILE_EXAMPLE for configuration file example with all options and comments " >> $CONF_FILE_TMP


# CONV_PROJECT detection
# Better set in wazzuf-ripper-global.conf file - but need rights
if [[ $CONV_PROJECT == "avconv" ]] && [ ! -x "/usr/bin/avconv" ] && [ -x "/usr/bin/ffmpeg" ]; then
	# Linux distribution seems not to be Debian-based
	echo "" >> $CONF_FILE_TMP
	echo "# Dirty ffmpeg/libav hack" >> $CONF_FILE_TMP
	echo "# You should manually set CONV_PROJECT=\"ffmpeg\" in /etc/wazzuf-ripper/wazzuf-ripper-global.conf !" >> $CONF_FILE_TMP
	echo "CONV_PROJECT=\"ffmpeg\"" >> $CONF_FILE_TMP
	
fi

## MEDIA INFORMATIONS
echo "" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP
echo "## MEDIA INFORMATIONS" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP

ZENITY_SOURCE=$(zenity --list --radiolist \
	--title="$ZEN_TITLE" \
	--ok-label "Next" --cancel-label "Quit" \
	--height "220" \
	--column="radiobutton" --column="Media" --column="ID" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="Which media type do you want to rip ?" \
	TRUE "Physical DVD" DVD \
	FALSE "DVD iso file" ISO_DVD \
	FALSE "Physical Blu-Ray" BD \
	FALSE "Blu-Ray iso file" ISO_BD \
	FALSE "m2ts/ts file" M2TS \
)
if [ $? = "1" ]; then wazzuf_quit; fi
echo "SOURCE=\""$ZENITY_SOURCE"\"" >> $CONF_FILE_TMP
SOURCE="$ZENITY_SOURCE"

zenity --info --title "$ZEN_TITLE" \
	--ok-label "Next" \
	--height "100" \
	--text "Please select your <b>source directory</b>
(m2ts/ts, iso, external subtitles, cover image, episodes list,...)."
ZENITY_SOURCE_DIRECTORY_BASE="$HOME"
if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_SOURCE_DIRECTORY_BASE $ZENITY_SOURCE_DIRECTORY_BASE"; fi
ZENITY_SOURCE_DIRECTORY=$(zenity --file-selection --title "$ZEN_TITLE" --filename "$ZENITY_SOURCE_DIRECTORY_BASE"/ --directory)
if [ $? = "1" ]; then wazzuf_quit; fi
if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_SOURCE_DIRECTORY $ZENITY_SOURCE_DIRECTORY"; fi
echo "SOURCE_DIRECTORY=\""$ZENITY_SOURCE_DIRECTORY"\"" >> $CONF_FILE_TMP

case $SOURCE in
BD | DVD )
	# device for conf generator only
	zenity --info --title "$ZEN_TITLE" --text "Please select your <b>Disc Directory</b>. " --ok-label "Next"
	ZENITY_DISC_DIR=$(zenity --file-selection --title "$ZEN_TITLE" --filename "/media/" --directory)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_DISC_DIR $ZENITY_DISC_DIR"; fi
	;;
ISO_BD | ISO_DVD )
	zenity --info --title "$ZEN_TITLE" --text "Please select your <b>iso file</b> (source directory only)." --ok-label "Next"
	ZENITY_ISO_FILE=$(zenity --file-selection --title "$ZEN_TITLE" --filename "$ZENITY_SOURCE_DIRECTORY"/)
	if [ $? = "1" ]; then exit 0; fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_ISO_FILE $ZENITY_ISO_FILE"; fi 
	# Test if really in source directory
	if [[ "`echo "$ZENITY_ISO_FILE" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l`"  == "1" ]]; then
		# from full path to filename
		ISO_FILE="`echo ${ZENITY_ISO_FILE} | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%`"
		if [[ $DEBUG == "1" ]]; then echo "DEBUG ISO_FILE $ISO_FILE"; fi 
		if [[ "${ISO_FILE}" == "" ]]; then
			MESSAGE="Iso file"
			empty_exit
		else
			echo "ISO_FILE=\""${ISO_FILE}"\"" >> $CONF_FILE_TMP
			echo "M2TS_FILE=\"\"" >> $CONF_FILE_TMP
		fi
	else
		SOURCE_NAME="source directory"
		FILE_NAME="Iso"
		dont_exists_exit
	fi
	;;
M2TS )
	zenity --info --title "$ZEN_TITLE" --text "Please select your <b>m2ts/ts file</b> (source directory only)." --ok-label "Next"
	ZENITY_M2TS_FILE=$(zenity --file-selection --title "$ZEN_TITLE" --filename "$ZENITY_SOURCE_DIRECTORY"/)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_M2TS_FILE $ZENITY_M2TS_FILE"; fi 
	# Test if really in source directory
	if [[ "`echo "$ZENITY_M2TS_FILE" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l`"  == "1" ]]; then
		# from full path to filename
		M2TS_FILE="`echo "${ZENITY_M2TS_FILE}" | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%`"
		if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS_FILE $M2TS_FILE"; fi 
		# Test if "empty"
		if [[ "${M2TS_FILE}" == "" ]]; then
			MESSAGE="m2ts/ts file"
			empty_exit
		else
			echo "M2TS_FILE=\""${M2TS_FILE}"\"" >> $CONF_FILE_TMP
		fi
	else
		SOURCE_NAME="source directory"
		FILE_NAME="m2ts/ts"
		dont_exists_exit
	fi
        ;;
esac

# Override working files base path (if not set: "$HOME/wazzuf-ripper")
zenity --question --title "$ZEN_TITLE" --text "Do you want to change the <b>working files directory</b> ($WORKING_PATH_BASE) ?" --ok-label "Yes" --cancel-label="No"
if [ $? = "0" ]; then
ZENITY_WORKING_PATH=$(zenity --file-selection --title "$ZEN_TITLE" --filename "$WORKING_PATH_BASE" --directory)
echo "WORKING_PATH_BASE=\""${ZENITY_WORKING_PATH}"\"" >> $CONF_FILE_TMP
fi

SOURCE_DIRECTORY="$ZENITY_SOURCE_DIRECTORY"
cd "$SOURCE_DIRECTORY"

## TAGGING
echo "" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP
echo "## TAGGING" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP

ZENITY_VIDEO_TYPE=$(zenity --list --radiolist \
	--title="$ZEN_TITLE" \
	--ok-label "Next" --cancel-label "Quit" \
	--column="radiobutton" --column="Type" --column="ID" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="What is the type of this video Media ?" \
	TRUE "Movie" MOVIE \
	FALSE "TV show/serie (multiple videos)" SHOW \
	FALSE "Musical video" MUSIC \
)
if [ $? = "1" ]; then wazzuf_quit; fi
echo "VIDEO_TYPE="\"${ZENITY_VIDEO_TYPE}"\"" >> $CONF_FILE_TMP

# zenity: window doesn't come to the center of the screen when using --forms
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
ZENITY_INFOS=$(zenity --forms \
    --title="$ZEN_TITLE" \
    --text="Videos informations" \
    --add-entry="Original title *" \
    --add-entry="Release date" \
    --separator="|")
if [ $? = "1" ]; then wazzuf_quit; fi
ZENITY_TITLE="`echo "${ZENITY_INFOS}" | cut -d "|" -f1`"
ZENITY_DATE="`echo "${ZENITY_INFOS}" | cut -d "|" -f2`"

# test empty ZENITY_TITLE
if  [[ ! $ZENITY_TITLE == "" ]]; then
	echo "TITLE_NAME="\"$ZENITY_TITLE\""" >> $CONF_FILE_TMP
	# basic TITLE_NAME to TAG_TITLE_NAME convertion
	echo "TAG_TITLE_NAME="\"`echo $ZENITY_TITLE | sed 's/[!?@#$Â£%^&*]//g' | sed 's/^\ //g' | sed 's/\ $//g' | sed s/[\ \']/./g`\""" >> $CONF_FILE_TMP
else
	MESSAGE="Title"
	empty_exit
fi

# test ZENITY_DATE integer
if echo "$ZENITY_DATE" | egrep -vq '^[0-9]+$'; then
	if [[ $DEBUG == "1" ]]; then echo "DEBUG Warning ! Provided date is not an integer !"; fi
	# exit 1
	echo "DATE="\"$ZENITY_DATE\""" >> $CONF_FILE_TMP
else
	echo "DATE="\"$ZENITY_DATE\""" >> $CONF_FILE_TMP
fi

# check ImdbID page
TITLE_NAME="$ZENITY_TITLE"
DATE="$ZENITY_DATE"
get_imdb_response_title
if  [[ $IMDB_RESPONSE == "True" ]]; then
	get_imdb_id_title
	if [[ $DEBUG == "1" ]]; then echo "DEBUG IMDB_ID $IMDB_ID"; fi
	zenity --text-info --title "$ZEN_TITLE" \
		--height "520" \
		--width "700" \
		--checkbox="It's the right one" \
		--html --url "http://www.imdb.com/title/$IMDB_ID" \
		--ok-label "OK" --cancel-label="No"
	if [ $? = "1" ]; then
		# If not the good Imdb ID, ask it
		imdb_id_ask_gui
	fi
else
	if [[ $DEBUG == "1" ]]; then echo "DEBUG No IMdb informations found !"; fi
	imdb_id_ask_gui
fi
if  [[ ! $IMDB_ID == "" ]]; then
	echo "IMDB_ID=\"$IMDB_ID\"" >> $CONF_FILE_TMP
	IMDB_URL_COVER=`imdbtool -i $IMDB_ID | sed -n '/^poster/{n;p;}'`
	if [[ $DEBUG == "1" ]]; then echo "DEBUG IMDB_URL_COVER $IMDB_URL_COVER"; fi
	# check if url exists
	if [[ ! $IMDB_URL_COVER == "N/A" ]]; then
		( wget -q "$IMDB_URL_COVER" -O cover.jpg ) | zenity --progress \
		        --title="$ZEN_TITLE" \
		        --text="Downloading cover" \
		        --cancel-label="Cancel" \
		        --pulsate \
		        --auto-close
		if [ $? = "1" ]; then
			if [[ $DEBUG == "1" ]]; then echo "DEBUG Cover download cancelled !"; fi
			echo "COVER="\"\""" >> $CONF_FILE_TMP
		else
			echo "COVER="\"cover.jpg\""" >> $CONF_FILE_TMP
		fi
	else
		if [[ $DEBUG == "1" ]]; then echo "DEBUG No cover available !"; fi
		echo "COVER="\"\""" >> $CONF_FILE_TMP
	fi
else
	if [[ $DEBUG == "1" ]]; then echo "DEBUG No ID so no cover"; fi
	echo "IMDB_ID=\"\"" >> $CONF_FILE_TMP
	echo "COVER="\"\""" >> $CONF_FILE_TMP
fi

# zenity: window doesn't come to the center of the screen when using --forms
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
ZENITY_TAGS=$(zenity --forms \
    --title="$ZEN_TITLE" \
    --text="Please provide some tags" \
    --add-entry="Rip tag (BDRIP DVDRIP DVDDUMP 1080p 720p...)" \
    --add-entry="Audio tag (ENGLISH FRENCH MULTI VOST subforced...)" \
    --add-entry="Signature tag" \
    --add-entry="Comment" \
    --separator="|")
if [ $? = "1" ]; then wazzuf_quit; fi
if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_TAGS $ZENITY_TAGS"; fi
echo "TAG_RIP=\"`echo "${ZENITY_TAGS}" | cut -d "|" -f1`\"" >> $CONF_FILE_TMP
echo "TAG_AUDIO=\"`echo "${ZENITY_TAGS}" | cut -d "|" -f2`\"" >> $CONF_FILE_TMP
echo "TAG_SIGNATURE=\"`echo "${ZENITY_TAGS}" | cut -d "|" -f3`\"" >> $CONF_FILE_TMP
echo "COMMENT=\"`echo "${ZENITY_TAGS}" | cut -d "|" -f4`\"" >> $CONF_FILE_TMP

case $ZENITY_VIDEO_TYPE in
MOVIE )
	if  [[ $IMDB_ID == "" ]]; then
		ZENITY_DIRECTOR=$(zenity --entry \
			--title="$ZEN_TITLE" \
			--text="Movie director " \
			--ok-label "OK" --cancel-label="No" )
		echo "DIRECTOR_NAME=\"$ZENITY_DIRECTOR\"" >> $CONF_FILE_TMP		
	else
		echo "DIRECTOR_NAME=\"\"" >> $CONF_FILE_TMP
	fi
	;;
MUSIC )	
	ZENITY_ARTIST_NAME=$(zenity --entry \
		--title="$ZEN_TITLE" \
		--text="Artist/Band Name " \
		--ok-label "OK" --cancel-label="No" )
	echo "ARTIST_NAME="\"$ZENITY_ARTIST_NAME\""" >> $CONF_FILE_TMP
	;;
SHOW )
	# zenity: window doesn't come to the center of the screen when using --forms
	# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691357
	ZENITY_SHOW=$(zenity --forms \
		--title="$ZEN_TITLE" \
		--text="About the Show" \
		--add-entry="Season number (ex: 02)" \
		--add-entry="Total episodes number in the season" \
		--separator="|")
	if [ $? = "1" ]; then wazzuf_quit; fi	
	echo "SEASON_NUMBER=\"`echo "${ZENITY_SHOW}" | cut -d "|" -f1`\"" >> $CONF_FILE_TMP
	echo "EPISODES_TOTAL_NUMBER=\"`echo "${ZENITY_SHOW}" | cut -d "|" -f2`\"" >> $CONF_FILE_TMP

	ZENITY_EPISODES_FILE_CHOICE=$(zenity --list --radiolist \
		--title="$ZEN_TITLE" \
		--height "200" \
		--width "500" \
		--ok-label "Next" --cancel-label "Quit" \
		--column="button" --column="description" --column="choice" \
		--print-column="3" \
		--hide-column="3" \
		--hide-header \
		--text="About the episodes list (text file)" \
		TRUE "None" 0 \
		FALSE "Select one (in $ZENITY_SOURCE_DIRECTORY source directory only)" 1 \
		FALSE "Create one" 2 \
	)
	if [ $? = "1" ]; then wazzuf_quit; fi
	case $ZENITY_EPISODES_FILE_CHOICE in
	0 )
		echo "EPISODES_FILE=\"\"" >> $CONF_FILE_TMP
		;;
	1 )
		ZENITY_EPISODES_FILE=$(zenity --file-selection --title "$ZEN_TITLE" --filename "$ZENITY_SOURCE_DIRECTORY/")
		# Test if really in source directory
		if [[ "`echo "$ZENITY_EPISODES_FILE" | grep "${ZENITY_SOURCE_DIRECTORY}" | wc -l`"  == "1" ]]; then
			# from full path to filename
			EPISODES_FILE="`echo ${ZENITY_EPISODES_FILE} | sed s%"${ZENITY_SOURCE_DIRECTORY}"/%%`"
			if [[ $DEBUG == "1" ]]; then echo "DEBUG EPISODES_FILE $EPISODES_FILE"; fi 
			# Test if "empty"
			if [[ "`echo ${EPISODES_FILE}`" == "" ]]; then
				if [[ $DEBUG == "1" ]]; then
					echo "DEBUG No episode file !"
					echo "EPISODES_FILE="\"\""" >> $CONF_FILE_TMP
				fi
			else
				echo "EPISODES_FILE="\"$EPISODES_FILE\""" >> $CONF_FILE_TMP
			fi
		else
			SOURCE_NAME="source directory"
			FILE_NAME="Episode"
			dont_exists_exit
		fi		
		;;
	2 )
		# explanations
		zenity --info --title "$ZEN_TITLE" --text "Episode file syntax with ordered lines like: 05 - The haunted episode.
Line numbers corresponds to CHAPTERS or TITLES (depends on DVD_EPISODES_ORG)." --ok-label "Next"
		touch "$ZENITY_SOURCE_DIRECTORY/episodes.txt"
		# edit episodes file
		echo "EPISODES_FILE=\"episodes.txt\"" >> $CONF_FILE_TMP
		EPISODES_FILE_NEW=$(zenity --text-info --title "$ZEN_TITLE" --editable --filename "$ZENITY_SOURCE_DIRECTORY/episodes.txt")
		echo "$EPISODES_FILE_NEW" > "$ZENITY_SOURCE_DIRECTORY/episodes.txt"
		;;
	esac
	;;
esac


## MEDIA ORGANIZATION
echo "" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP
echo "## MEDIA ORGANIZATION" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP

ISO_FILE_PATH="$SOURCE_DIRECTORY/$ISO_FILE"
M2TS_FILE_PATH="$SOURCE_DIRECTORY/$M2TS_FILE"

# Media analyse
case $SOURCE in
BD | ISO_BD )
	echo "M2TS_FILE="\"\""" >> $CONF_FILE_TMP
	if [[ $SOURCE == "ISO_BD" ]]; then
		check_device ISO_BD PRE
		iso_bd_manage mount GUI
		BD_MOUNT=$ISO_MOUNT_POINT
	else
		check_device BD PRE
		BD_MOUNT="`mount | grep udf | sed s/" type udf "/""/g | cut -d '(' -f 1 | cut -d ' ' -f 3-10`"
	fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG BD_MOUNT ${BD_MOUNT}"; fi
	( echo 10; mplayer -v -vo null -ao null -frames 0 -identify br:// -bluray-device "$BD_MOUNT" 2> BD-mplayer.err > BD-mplayer.info ) | zenity --progress \
	        --title="$ZEN_TITLE" \
	        --text="BD analyse" \
	        --cancel-label="Cancel" \
	        --pulsate \
	        --auto-close

	if [[ `grep "Error calculating media key. Missing right processing key" BD-mplayer.err` ]]; then 
		zenity --error --title "$ZEN_TITLE" \
			--text "AACS Key Error. Exiting !" \
			--timeout=2
		wazzuf_quit
	fi

	bd_get_longest_title
	BD_LONGEST_TITLE_CHAPTERS="`grep ^ID_BLURAY_TITLE_$BD_LONGEST_TITLE_NUMBER BD-mplayer.info | grep _CHAPTERS | cut -d '=' -f 2`"
	BD_TOTAL_TITLES="`grep ^ID_BLURAY_TITLES BD-mplayer.info | cut -d '=' -f 2`"

	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG BD_LONGEST_TITLE_NUMBER $BD_LONGEST_TITLE_NUMBER"
		echo "DEBUG BD_TOTAL_TITLES $BD_TOTAL_TITLES"
		echo "DEBUG BD_LONGEST_TITLE_CHAPTERS $BD_LONGEST_TITLE_CHAPTERS"
	#	echo "BD_TITLE_NUMBER="\"$BD_LONGEST_TITLE_NUMBER\""" >> $CONF_FILE_TMP
	fi

	zenity --info --title "$ZEN_TITLE" --text "The longest track is <b>Title $BD_LONGEST_TITLE_NUMBER</b> / $BD_TOTAL_TITLES (Chapters: $BD_LONGEST_TITLE_CHAPTERS).
This one will be use for cropping detection." --ok-label "Next"
	;;
DVD | ISO_DVD )
	check_lsdvd
	DVD_PATH="$ZENITY_DISC_DIR"

	if [[ $SOURCE == "DVD" ]]; then
		DVD_MOUNT_PATH=$DVD_PATH
		# Propose to copy DVD to local iso file
		zenity --question --title "$ZEN_TITLE" --text "Do you want to <b>make a local iso</b> file of your DVD ?" --ok-label "Yes" --cancel-label="No"
		if [ $? = "0" ]; then
			if [[ "$ISO_FILE" == "" ]]; then
				ISO_FILE="$TITLE_NAME-DVD-`date +%d-%H.%M`.iso"
				sed -i "s/^SOURCE=\"DVD\"$/SOURCE=\"DVD\"\nISO_FILE=\"${ISO_FILE}\"/" $CONF_FILE_TMP
			fi
			copy-dvd2iso
			# Change SOURCE="DVD" to "ISO_DVD" in configuration file
			sed -i 's/^SOURCE="DVD"$/SOURCE="ISO_DVD"/' $CONF_FILE_TMP
		fi
		DVD_SOURCE="$DVD_PATH"
	else
		DVD_SOURCE="$ISO_FILE_PATH"
	fi

	# does zenity really works ??
	( lsdvd -acsv "$DVD_SOURCE" 2>/dev/null > DVD-lsdvd.info ) | zenity --progress \
	        --title="$ZEN_TITLE" \
	        --text="DVD analyse" \
	        --cancel-label="Cancel" \
	        --pulsate \
	        --auto-close
	if [ $? = "1" ]; then wazzuf_quit; fi

	if [[ $ZENITY_VIDEO_TYPE == "SHOW" ]]; then
		if [[ $DEBUG == "1" ]]; then echo "DEBUG Warning ! Assume DVD_EPISODES_ORG is TITLES !"; fi
		# Episodes are classified on DVD CHAPTERS ("CHAPTERS") *or* on DVD TITLES ("TITLES")
		# Default: Titles
		DVD_EPISODES_ORG="TITLES"
	#	DVD_EPISODES_ORG="CHAPTERS"
		echo "DVD_EPISODES_ORG="\"$DVD_EPISODES_ORG\""" >> $CONF_FILE_TMP

		case $DVD_EPISODES_ORG in
		TITLES )
			# If episodes are on DVD TITLES
			grep "^Title:" DVD-lsdvd.info > DVD-Titles-lsdvd.info

			# Titles
			i=0
			while read line
			do
				i=`expr $i + 1`
				DVD_TITLE_ID[$i]="`echo ${line} | cut -d ',' -f1 | cut -d ':' -f2 | sed s/\ //`"
				DVD_TITLE_LENGTH[$i]="`echo ${line} | cut -d ',' -f2 | cut -d '.' -f1 | sed s/\ //| cut -d ' ' -f2`"
				DVD_TITLE_CHAPTERS[$i]="`echo ${line} | cut -d ',' -f2 | cut -d '.' -f2 | cut -d ':' -f2 | sed s/\ //`"
				DVD_TITLE_TRACKS_AUDIO[$i]="`echo ${line} | cut -d ',' -f4 | cut -d ':' -f2 | sed s/\ //`"
				DVD_TITLE_TRACKS_SUBTITLES[$i]="`echo ${line} | cut -d ',' -f5 | cut -d ':' -f2 | sed s/\ //`"
			done  < DVD-Titles-lsdvd.info
			if [[ $DEBUG == "1" ]]; then
				echo "DEBUG DVD_TITLE_IDs ${DVD_TITLE_ID[1]} ${DVD_TITLE_ID[2]} ${DVD_TITLE_ID[3]} ${DVD_TITLE_ID[4]}"
			fi
	
			# Display all Titles but don't check Titles with DVD_TITLE_LENGTH < "00:01:00"
			ZENITY_TITLES=$(
				for ((l=1; l <= $i ; l++)); do if [[ "`echo "${DVD_TITLE_LENGTH[l]}" | cut -d ':' -f 1-2`" == "00:00" ]]; then echo FALSE; else echo TRUE; fi ; echo "${DVD_TITLE_ID[l]}"; echo "${DVD_TITLE_LENGTH[l]}"; echo "${DVD_TITLE_CHAPTERS[l]}"; echo "${DVD_TITLE_TRACKS_AUDIO[l]}"; echo "${DVD_TITLE_TRACKS_SUBTITLES[l]} "; done | zenity --list --checklist \
				--title="$ZEN_TITLE" \
				--ok-label "Next" --cancel-label "Quit" \
				--width "600" \
				--height "400" \
				--column="Choice" --column="Title" --column="Lenght" --column="Chapters" --column="Audio tracks" --column="Subtitle tracks" \
				--print-column="2" \
				--separator=' ' \
				--text="DVD Title(s) choice"
			)
			if [ $? = "1" ]; then wazzuf_quit; fi
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_TITLES $ZENITY_TITLES"; fi

			DVD_TITLE_LIST="$ZENITY_TITLES"
			echo "DVD_TITLE_LIST="\"$DVD_TITLE_LIST\""" >> $CONF_FILE_TMP
			;;
		CHAPTERS )
			# If episodes are on DVD CHAPTERS
			# Not used for now
			DVD_TITLE_NUMBER="`grep "^Longest track:" DVD-lsdvd.info | sed s/'Longest track: '//`"
			echo "DVD_TITLE_NUMBER="\"$DVD_TITLE_NUMBER\""" >> $CONF_FILE_TMP
			DVD_CHAPTER_FIRST="1"
			DVD_CHAPTER_LAST="`grep "^Title: $DVD_TITLE_NUMBER" DVD-lsdvd.info | cut -d ',' -f2 | cut -d '.' -f2 | cut -d ':' -f2 | sed s/\ //`"
			echo "DVD_CHAPTER_FIRST="\"$DVD_CHAPTER_FIRST\""" >> $CONF_FILE_TMP
			echo "DVD_CHAPTER_LAST="\"$DVD_CHAPTER_LAST\""" >> $CONF_FILE_TMP
			;;
		esac
	else
		DVD_TITLE_NUMBER="`grep "^Longest track:" DVD-lsdvd.info | sed s/'Longest track: '//`"
		echo "DVD_TITLE_NUMBER="\"$DVD_TITLE_NUMBER\""" >> $CONF_FILE_TMP
		zenity --info --title "$ZEN_TITLE" --text "The longest track is <b>Title $DVD_TITLE_NUMBER</b>.
This one will be use for cropping detection." --ok-label "Next"
	fi
	;;
M2TS )
	( echo 10; mplayer -v -vo null -ao null -frames 0 -identify "$M2TS_FILE_PATH" 2>/dev/null > M2TS-mplayer.info; $CONV_PROJECT -i "$M2TS_FILE_PATH" 2> M2TS-$CONV_PROJECT.info ) | zenity --progress \
	        --title="$ZEN_TITLE" \
	        --text="M2TS analyse" \
	        --cancel-label="Cancel" \
	        --pulsate \
	        --auto-close

	# extract informations from associated mpls or clpi file
	MPLS_FILE_PATH="`echo "$M2TS_FILE_PATH" | sed 's!m2ts$!mpls!'`"
	check_mediainfo
	if [ -f "$MPLS_FILE_PATH" ]; then
		mediainfo --Language=raw --LogFile=M2TS-mediainfo.info "$MPLS_FILE_PATH" 1>/dev/null
		if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS-mediainfo.info extracted from mpls file"; fi
	else
		if [[ $DEBUG == "1" ]]; then echo "DEBUG no associated mpls file found"; fi
		CLPI_FILE_PATH="`echo "$M2TS_FILE_PATH" | sed 's!m2ts$!clpi!'`"
		if [ -f "$CLPI_FILE_PATH" ]; then
			mediainfo --Language=raw --LogFile=M2TS-mediainfo.info "$CLPI_FILE_PATH" 1>/dev/null
			if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS-mediainfo.info extracted from clpi file"; fi
		else
			if [[ $DEBUG == "1" ]]; then echo "DEBUG no associated clpi file found"; fi
		fi
	fi

	echo "# useless for m2ts/ts files" >> $CONF_FILE_TMP
        ;;
esac

## TRACKS OPTIONS
echo "" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP
echo "## TRACKS OPTIONS" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP

case $SOURCE in
M2TS )
	cropdetect GUI
	zenity --info --title "$ZEN_TITLE" --text "The m2ts/ts video crop has been set to $VIDEO_CROP" --ok-label "Next"
	echo "VIDEO_CROP="\"$VIDEO_CROP\""" >> $CONF_FILE_TMP

	# Audio
	if [[ `grep "Invalid data found" M2TS-$CONV_PROJECT.info`  == "" ]]; then
		if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS-$CONV_PROJECT.info seems valid."; fi
		grep 'Audio: ' M2TS-$CONV_PROJECT.info > M2TS-$CONV_PROJECT-audio.info

		i=0
		while read line
		do
			i=`expr $i + 1`
			ID_HEX="`echo "${line}" | cut -d '[' -f 2 | cut -d ']' -f 1`"
			if [[ ! $ID_HEX == "" ]]; then
				ID=$(($ID_HEX))
				M2TS_AUDIO_ID[$i]=$ID
	
				if [[ -f "$MPLS_FILE_PATH" || -f "$CLPI_FILE_PATH" ]]; then
					if [[ $DEBUG == "1" ]]; then
						echo "DEBUG Available MPLS or CLPI file found."
					fi
					M2TS_AUDIO_LANG[$i]="`mediainfo --Inform="Audio;%ID%%Language/String%\n" "$MPLS_FILE_PATH" | grep $ID | sed s/$ID//`"
				else
					if [[ $DEBUG == "1" ]]; then
						echo "DEBUG No available MPLS or CLPI file found."
					fi
					M2TS_AUDIO_LANG[$i]="`mediainfo --Inform="Audio;%ID%%Language%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID//`"
					if [[ "${M2TS_AUDIO_LANG[$i]}" == "" ]]; then
						M2TS_AUDIO_LANG[$i]="unknown"
					fi
				fi

				M2TS_AUDIO_FORMAT[$i]="`mediainfo --Inform="Audio;%ID%%Format%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID//`"
				M2TS_AUDIO_CHANNELS[$i]="`mediainfo --Inform="Audio;%ID%%Channel(s)%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID//`"
				M2TS_AUDIO_BITRATE[$i]="`mediainfo --Inform="Audio;%ID%%BitRate%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID// | head -c -4`"

				if [[ $DEBUG == "1" ]]; then
					echo "DEBUG M2TS_AUDIO_ID[$i] ${M2TS_AUDIO_ID[$i]}"
					echo "DEBUG M2TS_AUDIO_LANG[$i] ${M2TS_AUDIO_LANG[$i]}"
					echo "DEBUG M2TS_AUDIO_FORMAT[$i] ${M2TS_AUDIO_FORMAT[$i]}"
					echo "DEBUG M2TS_AUDIO_CHANNELS[$i] ${M2TS_AUDIO_CHANNELS[$i]}"
					echo "DEBUG M2TS_AUDIO_BITRATE[$i] ${M2TS_AUDIO_BITRATE[$i]}"
				fi
			fi
		done < M2TS-$CONV_PROJECT-audio.info
	else
		if [[ $DEBUG == "1" ]]; then echo "DEBUG WARNING! M2TS-$CONV_PROJECT.info is invalid !"; fi

		grep -A 7 'Audio #' M2TS-mediainfo.info > M2TS-mediainfo-audio.info
		M2TS_AUDIO_TRACKS_TOTAL=`grep "ID/String" M2TS-mediainfo-audio.info | wc -l`
		for ((i=1; i <= $M2TS_AUDIO_TRACKS_TOTAL ; i++)); do
			ID=`grep "ID/String" M2TS-mediainfo-audio.info | head -n $i | tail -n 1 | cut -d ':' -f2 | sed 's/ //' | cut -d ' ' -f1`
			M2TS_AUDIO_ID[$i]=$ID
			M2TS_AUDIO_LANG[$i]="`mediainfo --Inform="Audio;%ID%%Language/String%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID//`"
			M2TS_AUDIO_FORMAT[$i]="`mediainfo --Inform="Audio;%ID%%Format%\n" "$M2TS_FILE_PATH" | grep $ID | sed s/$ID//`"

			if [[ $DEBUG == "1" ]]; then
				echo "DEBUG M2TS_AUDIO_ID[$i] ${M2TS_AUDIO_ID[$i]}"
				echo "DEBUG M2TS_AUDIO_LANG[$i] ${M2TS_AUDIO_LANG[$i]}"
				echo "DEBUG M2TS_AUDIO_FORMAT[$i] ${M2TS_AUDIO_FORMAT[$i]}"
				echo "DEBUG M2TS_AUDIO_CHANNELS[$i] ${M2TS_AUDIO_CHANNELS[$i]}"
				echo "DEBUG M2TS_AUDIO_BITRATE[$i] ${M2TS_AUDIO_BITRATE[$i]}"
			fi
		done
		i=`expr $i - 1`
	fi
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG i $i"
	fi

	ZENITY_AUDIO_TRACKS=$(
		for ((l=1; l <= $i ; l++)); do echo TRUE; echo "${M2TS_AUDIO_ID[l]}"; echo "${M2TS_AUDIO_LANG[l]}"; echo "${M2TS_AUDIO_FORMAT[l]}"; echo "${M2TS_AUDIO_CHANNELS[l]}"; echo "${M2TS_AUDIO_BITRATE[l]}"; done | zenity --list --checklist \
		--title="$ZEN_TITLE" \
		--ok-label "Next" --cancel-label "Quit" \
		--width "520" \
		--height "300" \
		--column="Choice" --column="AID" --column="Language" --column="Format" --column="Channels" --column="Bitrate" \
		--print-column="2" \
		--separator=' ' \
		--text="Audio track(s) choice"
	)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS $ZENITY_AUDIO_TRACKS"; fi

	j=0	
	for ZENITY_AUDIO_TRACK in ${ZENITY_AUDIO_TRACKS}
	do
		j=`expr $j + 1`
		if [[ $DEBUG == "1" ]]; then echo "DEBUG j -> $j - ZENITY_AUDIO_TRACK $ZENITY_AUDIO_TRACK"; fi
		for ((k=1; k <= $i ; k++))
		do
			if [[ "${M2TS_AUDIO_ID[$k]}" == "$ZENITY_AUDIO_TRACK" ]]; then
				if [[ $DEBUG == "1" ]]; then echo "DEBUG k -> $k - AID ${M2TS_AUDIO_ID[$k]}"; fi
				echo "" >> $CONF_FILE_TMP

				if [[ "${M2TS_AUDIO_LANG[$k]}" == "unknown" || "${M2TS_AUDIO_LANG[$k]}" == "" ]]; then
					echo "AUDIO_${j}_LANG=\"und\"" >> $CONF_FILE_TMP
				else
					echo "AUDIO_${j}_LANG=\"${M2TS_AUDIO_LANG[$k]}\"" >> $CONF_FILE_TMP
				fi

				echo "AUDIO_${j}_AID=\"${M2TS_AUDIO_ID[$k]}\"" >> $CONF_FILE_TMP

				ZENITY_AUDIO_TRACK_SOURCE="`echo ${M2TS_AUDIO_FORMAT[$k]} | cut -d '|' -f3`"
				case $ZENITY_AUDIO_TRACK_SOURCE in
				ac3* | AC-3 )
					echo "AUDIO_${j}_SOURCE=\"AC3\"" >> $CONF_FILE_TMP
					;;
				"dca(DTS)" | "dca(DTS-HDMA)" | "DTS" | dts* )
					echo "AUDIO_${j}_SOURCE=\"DTS\"" >> $CONF_FILE_TMP
					;;
				pcm_bluray* | PCM )
					echo "AUDIO_${j}_SOURCE=\"PCM-BR\"" >> $CONF_FILE_TMP
					;;
				truehd | TrueHD )
					echo "AUDIO_${j}_SOURCE=\"THD\"" >> $CONF_FILE_TMP
					;;
				* )
					echo "AUDIO_${j}_SOURCE=\"$ZENITY_AUDIO_TRACK_SOURCE\"" >> $CONF_FILE_TMP
					;;
				esac
		
				echo "AUDIO_${j}_NAME=\"${M2TS_AUDIO_CHANNELS[$k]}\"" >> $CONF_FILE_TMP
			fi
		done
	done

	# subtitles
	grep ': Subtitle: ' M2TS-$CONV_PROJECT.info > M2TS-$CONV_PROJECT-sub.info

	if [ "`cat M2TS-$CONV_PROJECT-sub.info | wc -l`" -ge "1" ]; then
		i=0
		while read line
		do
			i=`expr $i + 1`
			ID_HEX="`echo ${line} | cut -d '[' -f 2 | cut -d ']' -f 1`"
			if [[ ! $ID_HEX == "" ]]; then
				SID=$(($ID_HEX))
				M2TS_SUB_ID[$i]=$SID
				# no language display...
				# unless corresponding mpls/clpi (+ xml extraction)
				if [[ -f "$MPLS_FILE_PATH" || -f "$CLPI_FILE_PATH" ]]; then
					if [[ $DEBUG == "1" ]]; then
						echo "DEBUG Available MPLS or CLPI file found."
					fi
					M2TS_SUB_LANG[$i]="`grep -A 3 $SID M2TS-mediainfo.info | grep "Language/String" | cut -d ':' -f2 | sed 's/ //'`"
					# should be always PGS
					M2TS_SUB_FORMAT[$i]="`grep -A 3 $SID M2TS-mediainfo.info | grep "Format" | cut -d ':' -f2 | sed 's/ //'`"
				else
					if [[ $DEBUG == "1" ]]; then
						echo "DEBUG No available MPLS or CLPI file found."
					fi
					M2TS_SUB_LANG[$i]="unknown"
					# Should be always pgssub
					M2TS_SUB_FORMAT[$i]="`mediainfo --Inform="Text;%ID%%Format%\n" "$M2TS_FILE_PATH" | grep $SID | sed s/$SID//`"
				fi
			fi
		done < M2TS-$CONV_PROJECT-sub.info
		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG M2TS_SUB_ID[X] ${M2TS_SUB_ID[1]} ${M2TS_SUB_ID[2]} ${M2TS_SUB_ID[3]} ${M2TS_SUB_ID[4]}"
		fi

		ZENITY_SUBTITLE_TRACKS=$(
			for ((l=1; l <= $i ; l++)); do echo FALSE; echo "${M2TS_SUB_ID[l]}"; echo "${M2TS_SUB_LANG[l]}"; echo "${M2TS_SUB_FORMAT[l]} "; done | zenity --list --checklist \
			--title="$ZEN_TITLE" \
			--ok-label "Next" --cancel-label "Quit" \
			--width "330" \
			--height "300" \
			--column="Choice" --column="SID" --column="Language" --column="Format" \
			--print-column="2" \
			--separator=' ' \
			--text="Subtitle track(s) choice"
		)
		if [ $? = "1" ]; then wazzuf_quit; fi
		if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS $ZENITY_SUBTITLE_TRACKS"; fi

		j=0	
		for ZENITY_SUBTITLE_TRACK in ${ZENITY_SUBTITLE_TRACKS}
		do
			j=`expr $j + 1`
			if [[ $DEBUG == "1" ]]; then echo "DEBUG j -> $j - ZENITY_SUBTITLE_TRACK $ZENITY_SUBTITLE_TRACK"; fi
			# loop on original lines number (i)
			for ((k=1; k <= $i ; k++))
			do
				if [[ ${M2TS_SUB_ID[$k]} == $ZENITY_SUBTITLE_TRACK ]]; then
					if [[ $DEBUG == "1" ]]; then echo "DEBUG k -> $k - SID ${M2TS_SUB_ID[$k]}"; fi
					echo "" >> $CONF_FILE_TMP

					if [[ ${M2TS_SUB_FORMAT[$k]} == "pgssub" ||  ${M2TS_SUB_FORMAT[$k]} == "PGS" ]]; then
						echo "SUBTITLE_${j}_LANG=\"`echo ${M2TS_SUB_LANG[$k]}`\"" >> $CONF_FILE_TMP
						echo "SUBTITLE_${j}_SID=\"`echo ${M2TS_SUB_ID[$k]}`\"" >> $CONF_FILE_TMP
						echo "SUBTITLE_${j}_NAME=\"`echo "${M2TS_SUB_ID[$k]}-${M2TS_SUB_LANG[$k]}"`\"" >> $CONF_FILE_TMP
						echo "SUBTITLE_${j}_FILE_FORCE=\"\"" >> $CONF_FILE_TMP
					else
						if [[ ${M2TS_SUB_LANG[$k]} == "unknown" ]]; then
							echo "SUBTITLE_${j}_LANG=\"und\"" >> $CONF_FILE_TMP
						else
							echo "SUBTITLE_${j}_LANG=\"${M2TS_SUB_LANG[$k]}\"" >> $CONF_FILE_TMP
						fi
						echo "SUBTITLE_${j}_SID=\"`echo ${M2TS_SUB_ID[$k]}`\"" >> $CONF_FILE_TMP
						echo "SUBTITLE_${j}_NAME=\"`echo ${M2TS_SUB_ID[$k]}`\"" >> $CONF_FILE_TMP
					fi
				fi
			done
		done
	fi
	;;
ISO_BD | BD )
	cropdetect GUI
	# VIDEO_CROP value check
	if [[ $VIDEO_CROP == "" ]]; then
		zenity --info --title "$ZEN_TITLE" --text "The BD video crop has not been found." --ok-label "Next"
		echo "VIDEO_CROP="\"\"" # not found" >> $CONF_FILE_TMP
	else
		zenity --info --title "$ZEN_TITLE" --text "The BD video crop has been set to $VIDEO_CROP" --ok-label "Next"
		echo "VIDEO_CROP="\"$VIDEO_CROP\""" >> $CONF_FILE_TMP
	fi

	if [[ $SOURCE == "ISO_BD" ]]; then iso_bd_manage umount GUI; fi
	;;
DVD | ISO_DVD )
	if [[ $ZENITY_VIDEO_TYPE == "SHOW" && $DVD_EPISODES_ORG == "TITLES" ]]; then
		for DVD_TITLE_NUMBER in $DVD_TITLE_LIST
		do
			cropdetect GUI
			# VIDEO_CROP for each TITLE (for information only)
			echo "#VIDEO_CROP_TITLE_$DVD_TITLE_NUMBER="\"$VIDEO_CROP\""" >> $CONF_FILE_TMP
			lsdvd -t $DVD_TITLE_NUMBER -acsv $DVD_SOURCE 2>/dev/null | grep -E "Subtitle|Audio|VTS" > DVD-lsdvd-T$DVD_TITLE_NUMBER.info
			lsdvd -t $DVD_TITLE_NUMBER -acsv "$DVD_SOURCE" 2>/dev/null | grep -E "Audio: " > DVD-lsdvd-T$DVD_TITLE_NUMBER-audio.info
		done
		# default VIDEO_CROP: the "biggest"
		echo "VIDEO_CROP="\"`grep ^#VIDEO_CROP_TITLE_ $CONF_FILE_TMP | cut -d '"' -f 2 | sort -n | tail -1`\""" >> $CONF_FILE_TMP
		# VIDEO_CROP value check
		if [[ $VIDEO_CROP == "" ]]; then
			zenity --info --title "$ZEN_TITLE" --text "The DVD video crop has not been found." --ok-label "Next"
		else
			zenity --info --title "$ZEN_TITLE" --text "The DVD video crop has been set to $VIDEO_CROP .
This is the biggest one. Crop detection for all choosen Titles are in conf file too." --ok-label "Next"
		fi
	else
		cropdetect GUI
		# VIDEO_CROP value check
		if [[ $VIDEO_CROP == "" ]]; then
			zenity --info --title "$ZEN_TITLE" --text "The DVD video crop has not been found." --ok-label "Next"
			echo "VIDEO_CROP="\"\"" # not found" >> $CONF_FILE_TMP
		else
			zenity --info --title "$ZEN_TITLE" --text "The DVD video crop has been set to $VIDEO_CROP" --ok-label "Next"
			echo "VIDEO_CROP="\"$VIDEO_CROP\""" >> $CONF_FILE_TMP
		fi

		lsdvd -t $DVD_TITLE_NUMBER -acsv "$DVD_SOURCE" 2>/dev/null | grep "Audio:" > DVD-lsdvd-T$DVD_TITLE_NUMBER-audio.info
	fi

	# audio
	i=0
	while read line
	do
		i=`expr $i + 1`
		ID_HEX="`echo ${line} | grep -o '.\{5\}$' | sed s/,//`"
		if [[ ! $ID_HEX == "" ]]; then
			ID=$(($ID_HEX))
			DVD_AUDIO_ID[$i]=$ID
			DVD_AUDIO_LANG[$i]="`echo ${line} | cut -d ',' -f2 | cut -d ':' -f2 | sed s/\ //`"
			DVD_AUDIO_FORMAT[$i]="`echo ${line} | cut -d ',' -f3 | cut -d ':' -f2 | sed s/\ //`"
			DVD_AUDIO_CHANNELS[$i]="`echo ${line} | cut -d ',' -f6 | cut -d ':' -f2 | sed s/\ //`"
		fi
	done  < DVD-lsdvd-T$DVD_TITLE_NUMBER-audio.info
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG DVD_AUDIO_ID_[X] ${DVD_AUDIO_ID[1]} ${DVD_AUDIO_ID[2]} ${DVD_AUDIO_ID[3]} ${DVD_AUDIO_ID[4]}"
	fi

	ZENITY_AUDIO_TRACKS=$(
		for ((l=1; l <= $i ; l++)); do echo TRUE; echo "${DVD_AUDIO_ID[l]}"; echo "${DVD_AUDIO_LANG[l]}"; echo "${DVD_AUDIO_FORMAT[l]}"; echo "${DVD_AUDIO_CHANNELS[l]} "; done | zenity --list --checklist \
		--title="$ZEN_TITLE" \
		--ok-label "Next" --cancel-label "Quit" \
		--width "430" \
		--height "300" \
		--column="Choice" --column="AID" --column="Language" --column="Format" --column="Channels" \
		--print-column="2" \
		--separator=' ' \
		--text="Audio track(s) choice"
	)
	if [ $? = "1" ]; then wazzuf_quit; fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACKS $ZENITY_AUDIO_TRACKS"; fi

	j=0	
	for ZENITY_AUDIO_TRACK in ${ZENITY_AUDIO_TRACKS}
	do
		j=`expr $j + 1`
		if [[ $DEBUG == "1" ]]; then echo "DEBUG j -> $j - ZENITY_AUDIO_TRACK $ZENITY_AUDIO_TRACK"; fi
		for ((k=1; k <= $i ; k++))
		do
			if [[ ${DVD_AUDIO_ID[$k]} == $ZENITY_AUDIO_TRACK ]]; then
				if [[ $DEBUG == "1" ]]; then echo "DEBUG k -> $k - AID ${DVD_AUDIO_ID[$k]}"; fi
				echo "" >> $CONF_FILE_TMP

				ZENITY_AUDIO_TRACK_LANG="`echo ${DVD_AUDIO_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f1 | sed s/\ //`"
				if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_AUDIO_TRACK_LANG $ZENITY_AUDIO_TRACK_LANG"; fi
				if [[ $ZENITY_AUDIO_TRACK_LANG == "xx" || $ZENITY_AUDIO_TRACK_LANG == "ï¿½ï¿½" ]]; then
					# replace xx or ï¿½ï¿½ by und (Undetermined)
					echo "AUDIO_${j}_LANG=\"und\"" >> $CONF_FILE_TMP
				else
					echo "AUDIO_${j}_LANG=\"$ZENITY_AUDIO_TRACK_LANG\"" >> $CONF_FILE_TMP
				fi

				echo "AUDIO_${j}_AID=\"`echo ${DVD_AUDIO_ID[$k]} | cut -d '|' -f1`\"" >> $CONF_FILE_TMP

				ZENITY_AUDIO_TRACK_SOURCE="`echo ${DVD_AUDIO_FORMAT[$k]} | cut -d '|' -f3`"
				case $ZENITY_AUDIO_TRACK_SOURCE in
				ac3 )
					echo "AUDIO_${j}_SOURCE=\"AC3\"" >> $CONF_FILE_TMP
					;;
				lpcm )
					echo "AUDIO_${j}_SOURCE=\"PCM\"" >> $CONF_FILE_TMP
					;;
				dts )
					echo "AUDIO_${j}_SOURCE=\"DTS\"" >> $CONF_FILE_TMP
					;;
				* )
					echo "AUDIO_${j}_SOURCE=\"$ZENITY_AUDIO_TRACK_SOURCE\"" >> $CONF_FILE_TMP
					;;
				esac

				ZENITY_AUDIO_TRACK_CHANNELS="`echo ${DVD_AUDIO_CHANNELS[$k]} | cut -d '|' -f4`"
				case $ZENITY_AUDIO_TRACK_CHANNELS in
				2 )
					echo "AUDIO_${j}_NAME=\"Stereo\"" >> $CONF_FILE_TMP
					;;
				6 )
					echo "AUDIO_${j}_NAME=\"5.1\"" >> $CONF_FILE_TMP
					;;
				# exists ?
				8 )
					echo "AUDIO_${j}_NAME=\"7.1\"" >> $CONF_FILE_TMP
					;;
				* )
					echo "AUDIO_${j}_NAME=\"$ZENITY_AUDIO_TRACK_CHANNELS channels\"" >> $CONF_FILE_TMP
					;;
				esac
			fi
		done
	done

	# Subtitles
	lsdvd -t $DVD_TITLE_NUMBER -acsv "$DVD_SOURCE" 2>/dev/null | grep "Subtitle:" > DVD-lsdvd-T$DVD_TITLE_NUMBER-sub.info

	if [ "`cat DVD-lsdvd-T$DVD_TITLE_NUMBER-sub.info | wc -l`" -ge "1" ]; then
		i=0
		while read line
		do
			i=`expr $i + 1`
			ID_HEX="`echo ${line} | grep -o '.\{6\}$' | sed s/,//`"
			if [[ ! $ID_HEX == "" ]]; then
				SID=$(($ID_HEX))
				DVD_SUB_ID[$i]=$SID
				DVD_SUB_LANG[$i]="`echo ${line} | cut -d ',' -f2 | cut -d ':' -f2 | sed s/\ //`"
			fi
		done < DVD-lsdvd-T$DVD_TITLE_NUMBER-sub.info
		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG DVD_SUB_ID[X] ${DVD_SUB_ID[1]} ${DVD_SUB_ID[2]} ${DVD_SUB_ID[3]} ${DVD_SUB_ID[4]}"
		fi
	
		ZENITY_SUBTITLE_TRACKS=$(
			for ((l=1; l <= $i ; l++)); do echo FALSE; echo "${DVD_SUB_ID[l]}"; echo "${DVD_SUB_LANG[l]} "; done | zenity --list --checklist \
			--title="$ZEN_TITLE" \
			--ok-label "Next" --cancel-label "Quit" \
			--width "350" \
			--height "300" \
			--column="Choice" --column="SID" --column="Language" \
			--print-column="2" \
			--separator=' ' \
			--text="Subtitle track(s) choice"
		)
		if [ $? = "1" ]; then wazzuf_quit; fi
		if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACKS $ZENITY_SUBTITLE_TRACKS"; fi
	
		j=0	
		for ZENITY_SUBTITLE_TRACK in ${ZENITY_SUBTITLE_TRACKS}
		do
			j=`expr $j + 1`
			if [[ $DEBUG == "1" ]]; then echo "DEBUG j -> $j - ZENITY_SUBTITLE_TRACK $ZENITY_SUBTITLE_TRACK"; fi
			for ((k=1; k <= $i ; k++))
			do
				if [[ ${DVD_SUB_ID[$k]} == $ZENITY_SUBTITLE_TRACK ]]; then
					if [[ $DEBUG == "1" ]]; then echo "DEBUG k -> $k - SID ${DVD_SUB_ID[$k]}"; fi
					echo "" >> $CONF_FILE_TMP
	
					ZENITY_SUBTITLE_TRACK_LANG="`echo ${DVD_SUB_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f1 | sed s/\ //`"
					if [[ $DEBUG == "1" ]]; then echo "DEBUG ZENITY_SUBTITLE_TRACK_LANG $ZENITY_SUBTITLE_TRACK_LANG"; fi
					if [[ $ZENITY_SUBTITLE_TRACK_LANG == "xx" || $ZENITY_SUBTITLE_TRACK_LANG == "ï¿½ï¿½" ]]; then
						# replace xx or ï¿½ï¿½ by und (Undetermined)
						echo "SUBTITLE_${j}_LANG=\"und\"" >> $CONF_FILE_TMP
					else
						echo "SUBTITLE_${j}_LANG=\"$ZENITY_SUBTITLE_TRACK_LANG\"" >> $CONF_FILE_TMP
					fi
	
					echo "SUBTITLE_${j}_NAME=\"`echo ${DVD_SUB_LANG[$k]} | cut -d '|' -f2 | cut -d '-' -f2 | sed s/\ //`\"" >> $CONF_FILE_TMP
					
					echo "SUBTITLE_${j}_SID=\"`echo ${DVD_SUB_ID[$k]} | cut -d '|' -f1`\"" >> $CONF_FILE_TMP
				fi
			done
		done
	fi
        ;;
esac

## CODECS OPTIONS
echo "" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP
echo "## CODECS OPTIONS" >> $CONF_FILE_TMP
echo "" >> $CONF_FILE_TMP

# default codecs
ZENITY_CODEC_VIDEO=$(zenity --list --radiolist \
	--title="$ZEN_TITLE" \
	--ok-label "Next" --cancel-label "Quit" \
	--width "420" \
	--height "180" \
	--column="ID" --column="Description" --column="codec" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="Please choose your default video codec" \
	FALSE "h264" H264 \
	TRUE "Xvid" XVID \
	FALSE "Dump (faster) (original video track, mpeg source only)" DUMP \
	FALSE "Dump with crop (mpeg source only)" DUMP_CROP \
)
if [ $? = "1" ]; then wazzuf_quit; fi
echo "DEFAULT_CODEC_VIDEO="\"${ZENITY_CODEC_VIDEO}"\"" >> $CONF_FILE_TMP

ZENITY_CODEC_AUDIO=$(zenity --list --radiolist \
	--title="$ZEN_TITLE" \
	--ok-label "Next" --cancel-label "Quit" \
	--width "200" \
	--height "210" \
	--column="ID" --column="Description" --column="codec" \
	--print-column="3" \
	--hide-column="3" \
	--hide-header \
	--text="Please choose your default audio codec" \
	FALSE "AC3 (DTS source only)" AC3 \
	FALSE "MP3" MP3 \
	FALSE "Ogg Vorbis" VORBIS \
	FALSE "Opus (experimental)" OPUS \
	TRUE "Dump (original audio track)" DUMP \
)
if [ $? = "1" ]; then wazzuf_quit; fi
echo "DEFAULT_CODEC_AUDIO="\"${ZENITY_CODEC_AUDIO}"\"" >> $CONF_FILE_TMP

# for others codecs parameters
echo "" >> $CONF_FILE_TMP
# To get the template conf values:
CONF_FILE_EXAMPLE_LINE=`grep -n "^# Others codecs options" $CONF_FILE_EXAMPLE | cut -d ':' -f 1`
tail -n +$CONF_FILE_EXAMPLE_LINE $CONF_FILE_EXAMPLE >> $CONF_FILE_TMP

zenity --info --title "$ZEN_TITLE" \
	--text "Your Wazzuf configuration file has been saved to <b>$CONF_FILE_TMP</b>
(If you want to use it with Wazzuf Ripper, it must be $CONF_FILE )"

exit 0
