#! /bin/bash
# Wazzuf Ripper
# DVD/BD pre-rip script helping to fill configuration file
# booloki@lokizone.net

GLOBAL_CONF_FILE="/etc/wazzuf-ripper/wazzuf-ripper-global.conf"
source $GLOBAL_CONF_FILE

# check wazzuf files
source $FUNCTIONS_CHECK
checkandsource_wazzuf_conf
checkandsource_wazzuf_files

check_mplayer
if [[ $CONV_PROJECT == "ffmpeg" ]] ; then
	check_ffmpeg
elif [[ $CONV_PROJECT == "avconv" ]]; then
	check_avconv
fi

ISO_FILE_PATH="$SOURCE_DIRECTORY/$ISO_FILE"
M2TS_FILE_PATH="$SOURCE_DIRECTORY/$M2TS_FILE"
WAZZUF_UI=""

# enter source directory
if  [[ "$SOURCE_DIRECTORY" == "" ]]; then
	echo -ne "\n *************************************\n"
	echo " Please provide SOURCE_DIRECTORY in $CONF_FILE ! Exiting..."
	echo -ne " *************************************\n"
	exit 1
fi
mkdir -p "$SOURCE_DIRECTORY"
cd "$SOURCE_DIRECTORY"

# pre-rip source choice
case $SOURCE in
BD | ISO_BD )
	if [[ $SOURCE == "ISO_BD" ]]; then
		check_device ISO_BD PRE
		iso_bd_manage mount
		BD_MOUNT=$ISO_MOUNT_POINT
	else
		check_device BD PRE
		BD_MOUNT=`mount | grep udf | sed s/" type udf "/""/g | cut -d '(' -f 1 | cut -d ' ' -f 3-10`
	fi
	mplayer -v -vo null -ao null -frames 0 -identify br:// -bluray-device "$BD_MOUNT" 2>/dev/null > BD-mplayer.info

	bd_get_longest_title
	BD_LONGEST_TITLE_CHAPTERS=`grep ^ID_BLURAY_TITLE_$BD_LONGEST_TITLE_NUMBER BD-mplayer.info | grep _CHAPTERS | cut -d '=' -f 2`
	BD_TOTAL_TITLES=`grep ^ID_BLURAY_TITLES BD-mplayer.info | cut -d '=' -f 2`

	echo -ne " *************************************\n"
	echo ${BD_MOUNT}
	echo "Longest track chosen for crop detection: Title $BD_LONGEST_TITLE_NUMBER / $BD_TOTAL_TITLES (Chapters: $BD_LONGEST_TITLE_CHAPTERS)"
	cropdetect
	echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"
	echo -ne " *************************************\n"

	if [[ $SOURCE == "ISO_BD" ]]; then iso_bd_manage umount; fi

	echo -ne " *************************************\n"
	echo " No more informations directly from BD."
	echo " Please run wazzuf-ripper to extract .m2ts file,"
	echo " and re-run wazzuf-pre-ripper with M2TS in SOURCE (configuration file)."
	echo -ne " *************************************\n"
	;;
M2TS )
	check_device M2TS PRE
	echo -ne " *************************************\n"
	echo " MPlayer informations"
	mplayer -v -vo null -ao null -frames 0 -identify "$M2TS_FILE_PATH" 2>/dev/null > M2TS-mplayer.info
	echo "-> see M2TS-mplayer.info"

	echo -ne " *************************************\n"
	echo " $CONV_PROJECT informations"
	$CONV_PROJECT -i "$M2TS_FILE_PATH" 2> M2TS-$CONV_PROJECT.info
	echo "-> see M2TS-$CONV_PROJECT.info"

	echo -ne " *************************************\n"
	echo M2TS_FILE_PATH=\"$M2TS_FILE_PATH\"
	cropdetect
	echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"

	echo -ne "*************************************\n"
	echo "All tracks:"
	avconv-decode M2TS-$CONV_PROJECT.info
	;;
DVD )
	DVD_PATH="$DEVICE_PATH_BASE"
	check_device DVD PRE
	check_lsdvd
	echo -ne "*************************************\n"
	echo " lsdvd informations"
 	lsdvd -acsv $DVD_PATH 2>/dev/null > DVD-lsdvd.info
	echo "-> see DVD-lsdvd.info"

	echo -ne "*************************************\n"
	echo " MPlayer informations"
	mplayer -v -vo null -ao null -frames 0 -identify $DVD_PATH 2>/dev/null > DVD-mplayer.info
	echo "-> see DVD-player.info"

	echo -ne "*************************************\n"
	echo " $CONV_PROJECT informations"
	$CONV_PROJECT -i $DVD_PATH 2> DVD-$CONV_PROJECT.info
	echo "-> see DVD-$CONV_PROJECT.info"

	check_7z
	echo -ne "*************************************\n"
	echo " DVD structure informations"
	7z l $DVD_PATH > DVD-DVDstruct.info
	echo "-> see DVD-DVDstruct.info"

	echo -ne "*************************************\n"
	grep "^Disc Title" DVD-lsdvd.info
	DVD_TITLE_NUMBER=`grep "^Longest track:" DVD-lsdvd.info | sed s/'Longest track: '//`
	if [[ $DVD_EPISODES_ORG == "" ]]; then
		MESSAGE="DVD_EPISODES_ORG"
		empty_exit
	fi
	if [[ $VIDEO_TYPE == "SHOW" && $DVD_EPISODES_ORG == "TITLES" ]]; then
		for DVD_TITLE_NUMBER in $DVD_TITLE_LIST
		do
			echo "######### Title: $DVD_TITLE_NUMBER #########"
			lsdvd -t $DVD_TITLE_NUMBER -acsv $DVD_PATH 2>/dev/null | grep -E "Subtitle|Audio|VTS" > DVD-lsdvd-T$DVD_TITLE_NUMBER.info
			echo `grep "Title: " DVD-lsdvd-T$DVD_TITLE_NUMBER.info | cut -d "," -f 2`
			DVD_SOURCE="$DVD_PATH"
			cropdetect
			echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"
			grep VTS DVD-lsdvd-T$DVD_TITLE_NUMBER.info
			lsdvd-decode DVD-lsdvd-T$DVD_TITLE_NUMBER.info
		done
	else
		echo "Longest track chosen for crop detection: Title $DVD_TITLE_NUMBER"
		echo `grep "Title: $DVD_TITLE_NUMBER" DVD-lsdvd.info | cut -d "," -f 2`
		DVD_SOURCE="$DVD_PATH"
		cropdetect
		echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"

		echo -ne "*************************************\n"
		echo "Title $DVD_TITLE_NUMBER Tracks:"
		lsdvd -t $DVD_TITLE_NUMBER -acsv $DVD_PATH 2>/dev/null | grep -E "Subtitle|Audio|VTS" > DVD-lsdvd-T$DVD_TITLE_NUMBER.info
		grep VTS DVD-lsdvd-T$DVD_TITLE_NUMBER.info
		lsdvd-decode DVD-lsdvd-T$DVD_TITLE_NUMBER.info

		echo "Note: For multiple Title crop detection, set VIDEO_TYPE to SHOW and DVD_EPISODES_ORG to TITLES"
	fi

	# choice to copy DVD to iso file
	DVD_MOUNT_PATH=`mount | grep udf | sed s/" type udf "/""/g | cut -d '(' -f 1 | cut -d ' ' -f 3-10`
	DVD_MOUNT_NAME=`echo $DVD_MOUNT_PATH | cut -d '/' -f 3`
	echo -ne "*************************************\n"
	echo -ne " Do you want to make a local iso file of your DVD ? (N/y)\n"
	echo -ne " ( $DVD_MOUNT_PATH to $SOURCE_DIRECTORY/$ISO_FILE )\n"
	read answer
	case $answer in
	y* | Y* )
		# only if ISO_FILE exists
		if [[ "$ISO_FILE" == "" ]]; then
			echo -ne " Please provide a filename in ISO_FILE first !\n"
			echo -ne " Skip DVD copy.\n"
		else
			copy-dvd2iso
			echo -ne "\n You can now use ISO_DVD instead of DVD in $CONF_FILE.\n"
		fi
		;;
	* )
		echo -ne " Skip DVD copy.\n"
		;;
	esac
	echo -ne "*************************************\n"
	;;
ISO_DVD )
	check_device ISO_DVD PRE
	check_lsdvd
	echo -ne "*************************************\n"
	echo " lsdvd informations"
	lsdvd -acsv "$ISO_FILE_PATH" 2>/dev/null > ISO-lsdvd.info
	echo "-> see ISO-lsdvd.info"
	
	echo -ne "*************************************\n"
	echo " MPlayer informations"
	mplayer -v -vo null -ao null -frames 0 -identify "$ISO_FILE_PATH" 2>/dev/null > ISO-mplayer.info
	echo "-> see ISO-mplayer.info"

	echo -ne "*************************************\n"
	echo " $CONV_PROJECT informations"
	$CONV_PROJECT -i "$ISO_FILE_PATH" 2> ISO-$CONV_PROJECT.info
	echo "-> see ISO-$CONV_PROJECT.info"

	check_7z
	echo -ne "*************************************\n"
	echo " DVD structure informations"
	7z l "$ISO_FILE_PATH" > ISO-DVDstruct.info
	echo "-> see ISO-DVDstruct.info"

	echo -ne "*************************************\n"
	echo "Tested iso: $ISO_FILE_PATH"
	grep "^Disc Title" ISO-lsdvd.info
	DVD_TITLE_NUMBER=`grep "^Longest track:" ISO-lsdvd.info | sed s/'Longest track: '//`
	if [[ $DVD_EPISODES_ORG == "" ]]; then
		MESSAGE="DVD_EPISODES_ORG"
		empty_exit
	fi
	if  [[ $VIDEO_TYPE == "SHOW" && $DVD_EPISODES_ORG == "TITLES" ]]; then
		for DVD_TITLE_NUMBER in $DVD_TITLE_LIST
		do
			echo "######### Title: $DVD_TITLE_NUMBER #########"
			lsdvd -t $DVD_TITLE_NUMBER -acsv "$ISO_FILE_PATH" 2>/dev/null | grep -E "Subtitle|Audio|VTS" > ISO-lsdvd-T$DVD_TITLE_NUMBER.info
			echo `grep "Title: " ISO-lsdvd-T$DVD_TITLE_NUMBER.info | cut -d "," -f 2`
			DVD_SOURCE="$ISO_FILE_PATH"
			cropdetect
			echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"
			grep VTS ISO-lsdvd-T$DVD_TITLE_NUMBER.info
			lsdvd-decode ISO-lsdvd-T$DVD_TITLE_NUMBER.info
		done
	else
		echo "Longest track chosen for crop detection: Title $DVD_TITLE_NUMBER"
		echo `grep "Title: $DVD_TITLE_NUMBER" ISO-lsdvd.info | cut -d "," -f 2`
		cropdetect
		echo -ne "VIDEO_CROP=\"${VIDEO_CROP}\"\n"

		echo -ne "*************************************\n"
		echo "Title $DVD_TITLE_NUMBER Tracks:"
		lsdvd -t $DVD_TITLE_NUMBER -acsv "$ISO_FILE_PATH" 2>/dev/null | grep -E "Subtitle|Audio|VTS" > ISO-lsdvd-T$DVD_TITLE_NUMBER.info
		grep VTS ISO-lsdvd-T$DVD_TITLE_NUMBER.info
		lsdvd-decode ISO-lsdvd-T$DVD_TITLE_NUMBER.info

		# not so interesting
		#avconv-decode ISO-avconv.info

		echo "Note: For multiple Title crop detection, set VIDEO_TYPE to SHOW and DVD_EPISODES_ORG to TITLES"
	fi
	;;
* )
        echo -ne "\n Media source issue: make sure you filled DVD, ISO_DVD, BD or ISO_BD in configuration file.\n"
        exit 1
        ;;
esac

# IMDb: get ID / download poster image
echo -ne "*************************************\n"
if [[ $DEBUG == "1" ]]; then
	echo "DEBUG TITLE_NAME $TITLE_NAME"
	echo "DEBUG DATE $DATE"
fi
if  [[ $IMDB_ID == "" ]]; then
	echo -ne " Try to get IMDb ID with: $TITLE_NAME ? (Y/n)"
	read IMDB_ANSWER
	case $IMDB_ANSWER in
	N* | n* )
		echo -ne " Skip IMDb informations.\n"
		echo -ne "*************************************\n"
		;;
	* )
		check_imdb
		get_imdb_response_title
		if  [[ $IMDB_RESPONSE == "True" ]]; then
			get_imdb_id_title
			echo -ne " IMdb ID seems to be $IMDB_ID\n"
			echo " Please check in http://www.imdb.com/title/$IMDB_ID"
			download_imdb_poster
			echo -ne "*************************************\n"
		else
			echo -ne " No IMdb informations found !\n"
			echo -ne "\n Trying with: $TITLE_NAME + $DATE.\n"
			get_imdb_response_title_date
			if  [[ $IMDB_RESPONSE == "True" ]]; then
				get_imdb_id_title_date
				echo -ne " IMdb ID seems to be $IMDB_ID\n"
				echo " Please check in http://www.imdb.com/title/$IMDB_ID"
				download_imdb_poster
				echo -ne "*************************************\n"
			else
				echo -ne " No IMdb informations found !\n"
				echo -ne "\n Try with another release date (first season release date for show)\n"
				echo -ne " Or directly search at http://www.imdb.com \n"
				echo -ne " -> IMdb ID is XXXXXXXXX in URL: http://www.imdb.com/title/XXXXXXXXX \n"
				echo -ne "*************************************\n"
			fi
		fi
		;;
	esac
else
	echo -ne " Provided IMDb ID is $IMDB_ID .\n"
	download_imdb_poster
	echo -ne "*************************************\n"
fi

exit 0
