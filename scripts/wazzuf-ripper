#! /bin/bash
# Wazzuf Ripper
# DVD/BD rip script
# booloki@lokizone.net

GLOBAL_CONF_FILE="/etc/wazzuf-ripper/wazzuf-ripper-global.conf"
source $GLOBAL_CONF_FILE

# basic error catching
trap "echo -e '\nWazzuf Ripper failed !' && exit 1" 15

# check wazzuf files
source $FUNCTIONS_CHECK
checkandsource_wazzuf_conf
checkandsource_wazzuf_files

# video codec choice check
case $1 in
h264 | x264 | H264 | X264 )
	CODEC_VIDEO="H264"
	;;
xvi* | Xvi* | XVI* )
	CODEC_VIDEO="XVID"
	;;
dump | DUMP )
	CODEC_VIDEO="DUMP"
	;;
dump_crop | DUMP_CROP )
	CODEC_VIDEO="DUMP_CROP"
	;;
"" | GUI )
	# use default CODEC_VIDEO
	CODEC_VIDEO=$DEFAULT_CODEC_VIDEO
	;;
* )
	wazzuf_usage
	;;
esac

# audio 1 codec choice check
case $2 in
DUMP )
	CODEC_AUDIO_1=$AUDIO_1_SOURCE
	;;
AC3 | AC351 | AC320 )
	CODEC_AUDIO_1=$2
	;;
ogg | vorbis | OGG | VORBIS )
	CODEC_AUDIO_1="VORBIS"
	;;
mp3 | MP3 | Mp3 )
	CODEC_AUDIO_1="MP3"
	;;
OPUS | Opus | opus )
	CODEC_AUDIO_1="OPUS"
	;;
"" | GUI )
	# use default CODEC_AUDIO
	if [ $DEFAULT_CODEC_AUDIO == "DUMP" ]; then
		CODEC_AUDIO_1=$AUDIO_1_SOURCE
	else
		CODEC_AUDIO_1=$DEFAULT_CODEC_AUDIO
	fi
	;;
* )
        wazzuf_usage
        ;;
esac
if [[ $DEBUG == "1" ]]; then echo "DEBUG CODEC_AUDIO_1 $CODEC_AUDIO_1"; fi

# audio 2 codec choice check
if [[ ! $AUDIO_2_LANG == "" ]]; then
	case $3 in
	DUMP )
		CODEC_AUDIO_2=$AUDIO_2_SOURCE
		;;
	AC3 | AC351 | AC320 )
		CODEC_AUDIO_2="AC3"
		;;
	ogg | vorbis | OGG | VORBIS )
		CODEC_AUDIO_2="VORBIS"
		;;
	mp3 | MP3 | Mp3 )
		CODEC_AUDIO_2="MP3"
		;;
	OPUS | Opus | opus )
		CODEC_AUDIO_2="OPUS"
		;;
	* )
		# use default CODEC_AUDIO
		if [ $DEFAULT_CODEC_AUDIO == "DUMP" ]; then
			CODEC_AUDIO_2=$AUDIO_2_SOURCE
		else
			CODEC_AUDIO_2=$DEFAULT_CODEC_AUDIO
		fi
	        ;;
	esac
else
	CODEC_AUDIO_2=""
fi
if [[ $DEBUG == "1" ]]; then echo "DEBUG CODEC_AUDIO_2 $CODEC_AUDIO_2"; fi

# others audio track(s) codec
# max audio tracks arbitrary set to 20
for number in `seq 3 20`
do
	CODEC_AUDIO_VARNAME=CODEC_AUDIO_${number}
	if [ $DEFAULT_CODEC_AUDIO == "DUMP" ]; then
		AUDIO_SOURCE_VARNAME="AUDIO_${number}_SOURCE"
		eval ${CODEC_AUDIO_VARNAME}=${!AUDIO_SOURCE_VARNAME}
	else
		eval ${CODEC_AUDIO_VARNAME}=${DEFAULT_CODEC_AUDIO}
		CODEC_AUDIO_VALUE=${!CODEC_AUDIO_VARNAME}
		if [[ $DEBUG == "1" ]]; then echo "DEBUG $CODEC_AUDIO_VARNAME $CODEC_AUDIO_VALUE"; fi
	fi
done
if [[ $DEBUG == "1" ]]; then
	echo "DEBUG CODEC_AUDIO_3 $CODEC_AUDIO_3"
	echo "DEBUG CODEC_AUDIO_4 $CODEC_AUDIO_4"
	echo "DEBUG CODEC_AUDIO_5 $CODEC_AUDIO_5"
fi

for argument in $1 $2 $3 $4
do
	if [[ $argument == "GUI" ]]; then
		WAZZUF_UI="GUI"
		ZEN_TITLE="Wazzuf Ripper"
	fi
done
if [[ $DEBUG == "1" ]]; then echo "DEBUG WAZZUF_UI $WAZZUF_UI"; fi

# enter working directory
mkdir -p "$WORKING_PATH_BASE/$TAG_TITLE_NAME"
cd $WORKING_PATH_BASE/$TAG_TITLE_NAME

# check VIDEO_TYPE empty or not recognized
case $VIDEO_TYPE in
	MOVIE |	SHOW | MUSIC )
		# VIDEO_TYPE is OK
		;;
	"" )
		MESSAGE="VIDEO_TYPE (MOVIE, SHOW or MUSIC)"
		empty_exit
		;;
	* )
		MESSAGE="VIDEO_TYPE $VIDEO_TYPE"
		not_recognized_exit
		;;
esac

# set organization
case $SOURCE in
BD | ISO_BD )
	case $VIDEO_TYPE in
	MOVIE )
		TITLE_LONG="$TITLE_NAME"
		TITLE_LIST="1"
		CHAPTER_FIRST="1"
		CHAPTER_LAST="1"
		;;
	SHOW )
		TITLE_LONG="$TITLE_NAME - $SEASON_DENOMINATION $SEASON_NUMBER"
		TITLE_LIST="1"
		CHAPTER_FIRST="1"
		CHAPTER_LAST="1"
		;;
	MUSIC )
		TITLE_LONG="$ARTIST_NAME - $TITLE_NAME"
		TITLE_LIST="1"
		CHAPTER_FIRST="1"
		CHAPTER_LAST="1"
		;;
	esac
	;;
M2TS )
	TITLE_LONG="$TITLE_NAME"
	TITLE_LIST="1"
	CHAPTER_FIRST="1"
	CHAPTER_LAST="1"
	;;
DVD | ISO_DVD )
	case $VIDEO_TYPE in
	MOVIE )
		TITLE_LONG="$TITLE_NAME"
		CHAPTER_FIRST="1"
		CHAPTER_LAST="1"
		TITLE_LIST=$DVD_TITLE_NUMBER
		;;
	SHOW )
		TITLE_LONG="$TITLE_NAME - $SEASON_DENOMINATION $SEASON_NUMBER"
		case $DVD_EPISODES_ORG in
		CHAPTERS )
			TITLE_LIST=$DVD_TITLE_NUMBER
			CHAPTER_FIRST=$DVD_CHAPTER_FIRST
			CHAPTER_LAST=$DVD_CHAPTER_LAST
			;;
		TITLES )
			TITLE_LIST="$DVD_TITLE_LIST"
			CHAPTER_FIRST="1"
			CHAPTER_LAST="1"
			;;
		"" )
			MESSAGE="DVD_EPISODES_ORG"
			empty_exit
			;;
		* )
			MESSAGE="DVD_EPISODES_ORG"
			not_recognized_exit
			;;
		esac
		;;
	MUSIC )
		TITLE_LONG="$ARTIST_NAME - $TITLE_NAME"
		CHAPTER_FIRST="1"
		CHAPTER_LAST="1"
		TITLE_LIST=$DVD_TITLE_NUMBER
		;;
	esac
	;;
"" )
	MESSAGE="SOURCE (DVD, ISO_DVD, BD, ISO_BD or M2TS)"
	empty_exit
	;;
* )
	MESSAGE="SOURCE $SOURCE"
	not_recognized_exit
	;;
esac

if [[ $DEBUG == "1" ]]; then
	echo "DEBUG TITLE_LIST $TITLE_LIST"
	echo "DEBUG CHAPTER_FIRST $CHAPTER_FIRST"
	echo "DEBUG CHAPTER_LAST $CHAPTER_LAST"
fi

if [[ $WAZZUF_UI == "GUI" ]]; then
	zenity --question --title "$ZEN_TITLE" \
		--text "Start $VIDEO_TYPE $TAG_RIP : 
$TITLE_LONG 
with $CODEC_VIDEO video codec
and $CODEC_AUDIO_1 $CODEC_AUDIO_2 audio codec(s)"
	if [ $? = "1" ]; then wazzuf_quit; fi
else
	echo -ne "\n *************************************\n"
	echo " Start $VIDEO_TYPE $TAG_RIP : $TITLE_LONG with $CODEC_VIDEO and $CODEC_AUDIO_1 $CODEC_AUDIO_2"
	echo -ne " *************************************\n"
fi

# Check if source is OK
case $SOURCE in
BD )
	check_device BD RIP
	;;
ISO_BD )
	check_device ISO_BD RIP
	ISO_FILE_PATH="$SOURCE_DIRECTORY/$ISO_FILE"
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ISO_FILE_PATH $ISO_FILE_PATH"; fi
	;;
M2TS )
	M2TS_FILE_PATH="$SOURCE_DIRECTORY/$M2TS_FILE"
	if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS_FILE_PATH $M2TS_FILE_PATH"; fi
	check_device M2TS RIP
        ;;
DVD )
	check_device DVD RIP
	check_ogmtools
        ;;
ISO_DVD )	
	check_device ISO_DVD RIP
	check_ogmtools
	;;
esac

check_nice
check_ionice

# Title(s) loop
time for TITLE_NUMBER in $TITLE_LIST
do
# Chapters(s) loop (useful if VIDEO_TYPE is SHOW and if DVD_EPISODES_ORG is CHAPTERS)
time for ((i=$CHAPTER_FIRST; i <= CHAPTER_LAST ; i++))
do
	case $CHAPTERS_CHOICE_FORCE in
		y* | Y* )
			CHAPTERS="$CHAPTERS_CHOICE_FIRST-$CHAPTERS_CHOICE_LAST"
			;;
		* )
			# nothing
			;;
	esac

	# tagging / set full working file and video filenames
	case $VIDEO_TYPE in
	MOVIE )
		BASE_WORKING_FILE=$TAG_TITLE_NAME.$DATE
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"
		TAG_AUDIO_CODEC=$CODEC_AUDIO_1
		MERGE_OUTPUT="$BASE_WORKING_FILE.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO_CODEC.$TAG_AUDIO.$TAG_SIGNATURE.mkv"
		MERGE_TITLE=$TITLE_NAME
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --info --title "$ZEN_TITLE" \
				--text "Work in progress: $TITLE_NAME ($DATE)" \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " Work in progress: $TITLE_NAME ($DATE)"
			echo -ne " *************************************\n"
		fi
		;;
	MUSIC )
		BASE_WORKING_FILE=$TAG_TITLE_NAME.$DATE
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"
		TAG_AUDIO_CODEC=$CODEC_AUDIO_1
		MERGE_OUTPUT="$BASE_WORKING_FILE.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO_CODEC.$TAG_AUDIO.$TAG_SIGNATURE.mkv"
		MERGE_TITLE=$TITLE_NAME
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --info --title "$ZEN_TITLE" \
				--text "Work in progress: $ARTIST_NAME - $TITLE_NAME ($DATE)" \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " Work in progress: $ARTIST_NAME - $TITLE_NAME ($DATE)"
			echo -ne " *************************************\n"
		fi
		;;
	SHOW )
		SEASON_TYPE="S"
		EPISODE_TYPE="E"
		if [[ $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
			BASE_WORKING_FILE="$TAG_TITLE_NAME.$SEASON_TYPE$SEASON_NUMBER.T$TITLE_NUMBER.C$i"			
			CHAPTERS="$i-$i"
		else
			BASE_WORKING_FILE="$TAG_TITLE_NAME.$SEASON_TYPE$SEASON_NUMBER.T$TITLE_NUMBER"		
		fi
		if [[ $DEBUG == "1" ]]; then echo "DEBUG CHAPTERS $CHAPTERS"; fi
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"

		if [ -f "$SOURCE_DIRECTORY/$EPISODES_FILE" ];	then
			if [[ $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
				EPISODE_NAME_FULL=`head -n $i "$SOURCE_DIRECTORY/$EPISODES_FILE" | tail -n 1`
			else
				EPISODE_NAME_FULL=`head -n $TITLE_NUMBER "$SOURCE_DIRECTORY/$EPISODES_FILE" | tail -n 1`
			fi
			EPISODE_NAME=`echo $EPISODE_NAME_FULL | cut -d '-' -f 2-10 | sed s/\ //`
			EPISODE_NUMBER=`echo $EPISODE_NAME_FULL | cut -d '-' -f 1 | sed s/\ //`			
			# EPISODE_TYPE removed if BONUS and not an Ã©pisode
			if [[ "$EPISODE_NAME_FULL" == *BONUS* ]]; then
				EPISODE_TAG=$EPISODE_NUMBER.`echo $EPISODE_NAME | sed s/\ /./g`
			else
				EPISODE_TAG=$EPISODE_TYPE$EPISODE_NUMBER.`echo $EPISODE_NAME | sed s/\ /./g`
			fi
		else
			FILE_NAME="$EPISODE_DENOMINATION $EPISODES_FILE (EPISODES_FILE) text"
			SOURCE_NAME="${SOURCE_DIRECTORY}"
			dont_exists_warn
			if [[ $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
				EPISODE_NAME_FULL=$i
				EPISODE_NAME=$i
				EPISODE_NUMBER=$i
			else
				# set to TITLE_NUMBER
				EPISODE_NAME_FULL=$TITLE_NUMBER
				EPISODE_NAME=$TITLE_NUMBER
				EPISODE_NUMBER=$TITLE_NUMBER
			fi
			EPISODE_TAG=$EPISODE_TYPE$EPISODE_NUMBER
		fi
		MERGE_OUTPUT="$TAG_TITLE_NAME.$SEASON_TYPE$SEASON_NUMBER.$EPISODE_TAG.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO.$TAG_SIGNATURE.mkv"
		#.$CODEC_AUDIO
		if [[ "$EPISODE_NAME_FULL" == *BONUS* ]]; then
			EPISODE_DENOMINATION=""
		fi
		MERGE_TITLE="$TITLE_LONG - $EPISODE_DENOMINATION $EPISODE_NAME_FULL"
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --info --title "$ZEN_TITLE" \
				--text "Work in progress: $EPISODE_DENOMINATION $EPISODE_NAME_FULL" \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " Work in progress: $EPISODE_DENOMINATION $EPISODE_NAME_FULL"
			echo -ne " *************************************\n"
		fi
		;;
	esac
	if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_OUTPUT $MERGE_OUTPUT"; fi


	# Retrieve IMdb informations
	if [[ ! $WAZZUF_UI == "GUI" ]]; then echo -ne "\n *************************************\n"; fi
	if [[ $IMDB_ID == "" ]]; then
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --warning --title "$ZEN_TITLE" \
				--text "No IMdb ID provided. Skipping..." \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne " No IMdb ID provided. Skipping..." && sleep 1
		fi
	else
		check_imdb
		if [[ $WAZZUF_UI == "GUI" ]]; then
			( get_imdb_informations ) \
			| zenity --info --title "$ZEN_TITLE" \
				--text "Retrieving IMdb informations...\n" \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne " Retrieving IMdb informations...\n"
			get_imdb_informations
		fi
	fi
	if [[ ! $WAZZUF_UI == "GUI" ]]; then echo -ne "\n *************************************\n"; fi


	# Extract full working file (.vob or .m2ts)
	# Save chapters informations and set chapters merge informations
	check_mplayer
	trap "echo -e '\nManual killed script (Ctrl-C) during extracting working file' && exit 1" 2
	case $SOURCE in
	DVD | ISO_DVD )
		# extract local working file + chapters file from DVD or DVD iso
		if [[ $SOURCE == "DVD" ]]; then
			DVDXCHAP_DEVICE="$DEVICE_PATH_BASE"
			MPLAYER_VOB_DUMP_DEVICE="$DEVICE_PATH_BASE"
		else
			DVDXCHAP_DEVICE="${SOURCE_DIRECTORY}/${ISO_FILE}"
			MPLAYER_VOB_DUMP_DEVICE="${SOURCE_DIRECTORY}/${ISO_FILE}"		
		fi
		if [[ $VIDEO_TYPE == "SHOW" && $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
			MERGE_CHAPTERS=""
			MPLAYER_VOB_DUMP_CHAPTERS="-chapter $CHAPTERS"
			FILE_NAME=$VOB_FILE
			if [ ! -f $FILE_NAME ]; then video_vob_dump; else file_exists; fi
		else
			case $CHAPTERS_CHOICE_FORCE in
				y* | Y* )
					DVDXCHAP_CHAPTERS="-c $CHAPTERS"
					FILE_NAME=$CHAPTERS_FILE_TXT
					if [ ! -f $FILE_NAME ]; then video_dvd_chapters_extract; else file_exists; fi
					MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_TXT"
					MPLAYER_VOB_DUMP_CHAPTERS="-chapter $CHAPTERS"
					FILE_NAME=$VOB_FILE
					if [ ! -f $FILE_NAME ]; then video_vob_dump; else file_exists; fi
					;;
				* )
					DVDXCHAP_CHAPTERS=""
					FILE_NAME=$CHAPTERS_FILE_TXT
					if [ ! -f $FILE_NAME ]; then video_dvd_chapters_extract; else file_exists; fi
					MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_TXT"
					MPLAYER_VOB_DUMP_CHAPTERS=""
					FILE_NAME=$VOB_FILE
					if [ ! -f $FILE_NAME ]; then video_vob_dump; else file_exists; fi
					;;
			esac
		fi
		SOURCE_FILE=$VOB_FILE
	        ;;
	BD | ISO_BD )
		# extract/copy local working file(s) from BD
		if [[ $SOURCE == "ISO_BD" ]]; then
			BD_MOUNT=$ISO_MOUNT_POINT
			iso_bd_manage mount
		else
			BD_MOUNT=`mount | grep udf | sed s/" type udf "/""/g | cut -d '(' -f 1 | cut -d ' ' -f 3-10`
		fi

		if [[ $WAZZUF_UI == "GUI" ]]; then
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.m2ts' --exclude='*.*' "${BD_MOUNT}"/BDMV/STREAM/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null"; fi
			( echo 10; ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.m2ts' --exclude='*.*' "${BD_MOUNT}"/BDMV/STREAM/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null ) \
			| zenity --progress --pulsate --auto-kill --auto-close --title="$ZEN_TITLE" --text="Copying all m2ts files from BR."
			if [ $? = "1" ]; then wazzuf_quit; fi
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.mpls' --exclude='*.*' "${BD_MOUNT}"/BDMV/PLAYLIST/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null"; fi
			( echo 10; ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.mpls' --exclude='*.*' "${BD_MOUNT}"/BDMV/PLAYLIST/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null ) \
			| zenity --progress --pulsate --auto-kill --auto-close --title="$ZEN_TITLE" --text="Copying all mpls files from BR."
			if [ $? = "1" ]; then wazzuf_quit; fi
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.clpi' --exclude='*.*' "${BD_MOUNT}"/BDMV/CLIPINF/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null"; fi
			( echo 10; ionice -c $IONICENESS nice -n $NICENESS rsync -aP --chmod=Fugo+r,u+w --include='*.clpi' --exclude='*.*' "${BD_MOUNT}"/BDMV/CLIPINF/ "${SOURCE_DIRECTORY}"/ 1>/dev/null 2>/dev/null ) \
			| zenity --progress --pulsate --auto-kill --auto-close --title="$ZEN_TITLE" --text="Copying all clpi files from BR."
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " Copying all m2ts/mpls/clpi files from BR..."
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.m2ts' --exclude='*.*' "${BD_MOUNT}"/BDMV/STREAM/ "${SOURCE_DIRECTORY}"/"; fi
			ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.m2ts' --exclude='*.*' "${BD_MOUNT}"/BDMV/STREAM/ "${SOURCE_DIRECTORY}"/
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.mpls' --exclude='*.*' "${BD_MOUNT}"/BDMV/PLAYLIST/ "${SOURCE_DIRECTORY}"/"; fi
			ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.mpls' --exclude='*.*' "${BD_MOUNT}"/BDMV/PLAYLIST/ "${SOURCE_DIRECTORY}"/
			if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.clpi' --exclude='*.*' "${BD_MOUNT}"/BDMV/CLIPINF/ "${SOURCE_DIRECTORY}"/"; fi
			ionice -c $IONICENESS nice -n $NICENESS  rsync -avP --chmod=Fugo+r,u+w --include='*.clpi' --exclude='*.*' "${BD_MOUNT}"/BDMV/CLIPINF/ "${SOURCE_DIRECTORY}"/
		fi

		if [[ $SOURCE == "ISO_BD" ]]; then iso_bd_manage umount; fi

		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --info --title "$ZEN_TITLE" \
				--text "Please now run wazzuf-conf-generator with chosen M2TS file to get more tracks informations,
or use M2TS instead of BD in $CONF_FILE and run wazzuf-pre-ripper."
		else
			echo -ne "\n *************************************\n"
			echo -ne " Please now run wazzuf-conf-generator with chosen M2TS file to get more tracks informations,\n"
			echo -ne " or use M2TS instead of BD in $CONF_FILE and run wazzuf-pre-ripper.\n"
			echo -ne " *************************************\n"
		fi
		exit 0
		;;
	M2TS )
		SOURCE_FILE="$M2TS_FILE_PATH"

		# chapters management
		MPLS_FILE="`echo "$M2TS_FILE_PATH" | sed 's!m2ts$!mpls!'`"
		if [[ ! $WAZZUF_UI == "GUI" ]]; then echo -ne "\n *************************************\n"; fi
		if [ -f "$MPLS_FILE" ]; then
			check_bdchapters
			if [[ $DEBUG == "1" ]]; then echo "DEBUG bdchapters -i "$MPLS_FILE" -o $CHAPTERS_FILE_XML"; fi
			if [[ $WAZZUF_UI == "GUI" ]]; then
				( echo 10; bdchapters -i "$MPLS_FILE" -o $CHAPTERS_FILE_XML 1>/dev/null ) \
				| zenity --progress --pulsate --auto-close --title "$ZEN_TITLE" \
					--text "Creating $CHAPTERS_FILE_XML..."
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo " Creating $CHAPTERS_FILE_XML..."
				bdchapters -i "$MPLS_FILE" -o $CHAPTERS_FILE_XML
			fi
			MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_XML"
		else
			if [[ $WAZZUF_UI == "GUI" ]]; then
				zenity --warning --title "$ZEN_TITLE" \
					--text "No chapters file to create. Next..." \
					--timeout=2
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo " No chapters file to create. Next..."
			fi
			MERGE_CHAPTERS=""
		fi
		if [[ ! $WAZZUF_UI == "GUI" ]]; then echo -ne "\n *************************************\n"; fi
		;;
	esac
	get_video_bitrate
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG MERGE_CHAPTERS $MERGE_CHAPTERS"
		echo "DEBUG SOURCE_FILE $SOURCE_FILE"
		echo "DEBUG VIDEO_BITRATE $VIDEO_BITRATE"
	fi


	## subtitle file(s) check/extract/copy
	trap "echo -e '\nManual killed script (Ctrl-C) during checking/extracting subtitles' && exit 1" 2
	TOTAL_SUBTITLE_SIZE="0"
	MERGE_SUBTITLES_FULL=""
	SUB_COUNTER=1
	while [ ! $SUB_COUNTER -eq 0 ]; do
		SUBTITLE_LANG_VARNAME=\$SUBTITLE_${SUB_COUNTER}_LANG
		SUBTITLE_LANG=`eval "echo $SUBTITLE_LANG_VARNAME"`

		if [[ $SUBTITLE_LANG == "" || $SUB_COUNTER -lt 1 ]]; then
			if [[ $WAZZUF_UI == "GUI" ]]; then
				zenity --info --title "$ZEN_TITLE" \
					--text "No more subtitle track choice. Next..." \
					--timeout=2
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo -ne "\n *************************************\n"
				echo " No more subtitle track choice. Next..." && sleep 1
				echo -ne " *************************************\n"
			fi
			SUB_COUNTER=0
		else
			SUBTITLE_NAME_VARNAME=\$SUBTITLE_${SUB_COUNTER}_NAME
			SUBTITLE_NAME=`eval "echo $SUBTITLE_NAME_VARNAME"`

			SUBTITLE_SID_VARNAME=\$SUBTITLE_${SUB_COUNTER}_SID
			SUBTITLE_SID=`eval "echo $SUBTITLE_SID_VARNAME"`

			SUBTITLE_FILE_FORCE_VARNAME=\$SUBTITLE_${SUB_COUNTER}_FILE_FORCE
			SUBTITLE_FILE_FORCE=`eval "echo $SUBTITLE_FILE_FORCE_VARNAME"`
			SUBTITLE_FILE_FORCE_PATH="$SOURCE_DIRECTORY/$SUBTITLE_FILE_FORCE"

			if [[ $DEBUG == "1" ]]; then
				echo ""
				echo "DEBUG SUB_COUNTER $SUB_COUNTER"
				echo "DEBUG SUBTITLE_NAME $SUBTITLE_NAME"
				echo "DEBUG SUBTITLE_SID $SUBTITLE_SID"
				echo "DEBUG SUBTITLE_FILE_FORCE_VARNAME $SUBTITLE_FILE_FORCE_VARNAME"
				echo "DEBUG SUBTITLE_FILE_FORCE $SUBTITLE_FILE_FORCE"
				echo "DEBUG SUBTITLE_FILE_FORCE_PATH $SUBTITLE_FILE_FORCE_PATH"
			fi
			# subtitle file (force external or not)
			if [[ "$SUBTITLE_FILE_FORCE" == "" ]]; then
				# check if provided variable is a number
				NUMBER_TO_CHECK="$SUBTITLE_SID"
				MESSAGE="SUBTITLE_${SUB_COUNTER}_SID $SUBTITLE_SID"
				SUB_FILE="$BASE_WORKING_FILE.$SUBTITLE_SID-$SUBTITLE_LANG"
				SUBTITLE_FILE="$SUB_FILE.idx"
				SUBTITLE_FILE_SUB="$SUB_FILE.sub"

				if [[ $SOURCE == "DVD" ]]; then
					MPLAYER_DEVICE="$DEVICE_PATH_BASE"
				else
					MPLAYER_DEVICE="${SOURCE_DIRECTORY}/${ISO_FILE}"		
				fi
				if [[ $VIDEO_TYPE == "SHOW" && $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
					MPLAYER_CHAPTERS="-chapter $CHAPTERS"
				else
					case $CHAPTERS_CHOICE_FORCE in
						y* | Y* )
							MPLAYER_CHAPTERS="-chapter $CHAPTERS"
							;;
						* )
							MPLAYER_CHAPTERS=""
							;;
					esac				
				fi
				subtitle_rip
			else
				# If srt file, check encoding
				if  [[ `echo "$SUBTITLE_FILE_FORCE" | grep -vE ".srt$"` == "" ]]; then subtitle_srt_check; fi
				# Copy subtitle file
				if [[ $WAZZUF_UI == "GUI" ]]; then
					cp "$SUBTITLE_FILE_FORCE_PATH" .
				else
					cp -v "$SUBTITLE_FILE_FORCE_PATH" .
				fi
				# If .idx file, copy .sub file too.
				if  [[ `echo "$SUBTITLE_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then
					SUBTITLE_FILE_SUB=`echo "$SUBTITLE_FILE_FORCE_PATH" | sed s/idx$/sub/`
					if [[ $WAZZUF_UI == "GUI" ]]; then
						cp $SUBTITLE_FILE_SUB .
					else
						cp -v $SUBTITLE_FILE_SUB .
					fi
				fi
				SUBTITLE_FILE="$SUBTITLE_FILE_FORCE"
			fi

			# subtitle files size
			if  [[ `echo "$SUBTITLE_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then 
				SUBTITLE_SIZE=$(expr `ls -l "$SUBTITLE_FILE" | cut -d ' ' -f 5` + `ls -l "$SUBTITLE_FILE_SUB" | cut -d ' ' -f 5`)
			else
				SUBTITLE_SIZE=`ls -l "$SUBTITLE_FILE" | cut -d ' ' -f 5`
			fi
			TOTAL_SUBTITLE_SIZE=$(expr $TOTAL_SUBTITLE_SIZE + $SUBTITLE_SIZE)

			if [[ $DEBUG == "1" ]]; then
				echo "DEBUG SUBTITLE_FILE $SUBTITLE_FILE"
				echo "DEBUG SUBTITLE_FILE_SUB $SUBTITLE_FILE_SUB"
				echo "DEBUG SUBTITLE_SIZE $SUBTITLE_SIZE"
			fi
 
			# Force no default subtitle (or not)
			case $SUBTITLE_NODEFAULT_FORCE in
			Y* | y* )
				MERGE_SUBTITLE="--language 0:$SUBTITLE_LANG --default-track 0:0 --track-name 0:$SUBTITLE_NAME $MERGE_SUBTITLE_CHARSET $SUBTITLE_FILE"
				;;
			* )
				MERGE_SUBTITLE="--language 0:$SUBTITLE_LANG --track-name 0:$SUBTITLE_NAME $MERGE_SUBTITLE_CHARSET $SUBTITLE_FILE"
				;;
			esac
			if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_SUBTITLE $MERGE_SUBTITLE"; fi
			MERGE_SUBTITLES_FULL="$MERGE_SUBTITLES_FULL $MERGE_SUBTITLE"

			let SUB_COUNTER=SUB_COUNTER+1
		fi
	done

	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG MERGE_SUBTITLES_FULL $MERGE_SUBTITLES_FULL"
		echo "DEBUG TOTAL_SUBTITLE_SIZE $TOTAL_SUBTITLE_SIZE"
	fi


	## Audio track(s) extract/encode
	trap "echo -e '\nManual killed script (Ctrl-C) during Audio track(s) extracting/encoding' && exit 1" 2
	TOTAL_AUDIO_SIZE="0"
	MERGE_AUDIO_FULL=""
	AUDIO_COUNTER=1
	while [ ! $AUDIO_COUNTER -eq 0 ]; do
		AUDIO_LANG_VARNAME=\$AUDIO_${AUDIO_COUNTER}_LANG
		AUDIO_LANG=`eval "echo $AUDIO_LANG_VARNAME"`

		if [[ $AUDIO_LANG == "" ]]; then
			if [[ $WAZZUF_UI == "GUI" ]]; then
				zenity --info --title "$ZEN_TITLE" \
					--text "No more audio track choice, next..." \
					--timeout=2
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo -ne "\n *************************************\n"
				echo " No more audio track choice, next..." && sleep 1
				echo -ne " *************************************\n"
			fi
			AUDIO_COUNTER=0
		else
			AUDIO_NAME_VARNAME=\$AUDIO_${AUDIO_COUNTER}_NAME
			AUDIO_NAME=`eval "echo $AUDIO_NAME_VARNAME"`

			AUDIO_AID_VARNAME=\$AUDIO_${AUDIO_COUNTER}_AID
			AUDIO_AID=`eval "echo $AUDIO_AID_VARNAME"`
			NUMBER_TO_CHECK="$AUDIO_AID"
			MESSAGE="AUDIO_${AUDIO_COUNTER}_AID $AUDIO_AID"
			check_integer

			AUDIO_SOURCE_VARNAME=\$AUDIO_${AUDIO_COUNTER}_SOURCE
			AUDIO_SOURCE=`eval "echo $AUDIO_SOURCE_VARNAME"`

			AUDIO_SYNC_VARNAME=\$AUDIO_${AUDIO_COUNTER}_SYNC
			AUDIO_SYNC=`eval "echo $AUDIO_SYNC_VARNAME"`

			CODEC_AUDIO_VARNAME=\$CODEC_AUDIO_${AUDIO_COUNTER}
			CODEC_AUDIO=`eval "echo $CODEC_AUDIO_VARNAME"`

			AC3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ac3"
			DTS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.dts"
			MP3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.mp3"
			OGG_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ogg"
			OPUS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.opus"
			THD_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.thd"
			WAV_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.wav"

			if [[ $DEBUG == "1" ]]; then
				echo "DEBUG AUDIO_COUNTER $AUDIO_COUNTER"
				echo "DEBUG AUDIO_NAME $AUDIO_NAME"
			fi

			audio_rip

			AUDIO_SIZE=`ls -l $AUDIO_FILE | cut -d ' ' -f 5`
			if [[ $DEBUG == "1" ]]; then echo "DEBUG AUDIO_SIZE $AUDIO_SIZE"; fi
			TOTAL_AUDIO_SIZE=$(expr $TOTAL_AUDIO_SIZE + $AUDIO_SIZE)

			# merge with or without audio sync
			if [[ $AUDIO_SYNC == "" ]]; then
				MERGE_AUDIO="--language 0:$AUDIO_LANG --track-name 0:${AUDIO_NAME} ${AUDIO_FILE}"
			else	
				MERGE_AUDIO="--language 0:$AUDIO_LANG --track-name 0:$AUDIO_NAME -y 0:$AUDIO_SYNC $AUDIO_FILE"
			fi
			if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_AUDIO $MERGE_AUDIO"; fi
			MERGE_AUDIO_FULL="${MERGE_AUDIO_FULL} ${MERGE_AUDIO}"

			let AUDIO_COUNTER=AUDIO_COUNTER+1
		fi
	done
	
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG TOTAL_AUDIO_SIZE $TOTAL_AUDIO_SIZE"
		echo "DEBUG MERGE_AUDIO_FULL $MERGE_AUDIO_FULL"
	fi


	## video encode
	trap "echo -e '\nManual killed script (Ctrl-C) during Video encoding' && exit 1" 2

	# change video bitrate if maximum target size provided
	if [[ ! "$TARGET_SIZE" == "" ]]; then

		# check provided TARGET_SIZE
		if [[ "$TARGET_SIZE" == "CD" ]]; then
			MAX_TARGET_SIZE=$CD_SIZE_DEFAULT
		elif [[ "$TARGET_SIZE" == "DVD" ]]; then
			MAX_TARGET_SIZE=$DVD_SIZE_DEFAULT
		else
			# test if a number
			if echo "$TARGET_SIZE" | egrep -vq '^[0-9]+$'; then
				if [[ $WAZZUF_UI == "GUI" ]]; then
					zenity --error --title "$ZEN_TITLE" \
						--text "TARGET_SIZE provided is not set to CD, DVD, or an integer ! Exiting." \
						--timeout=2
					if [ $? = "1" ]; then wazzuf_quit; fi
				else
					echo -ne "Error ! TARGET_SIZE provided is not set to CD, DVD, or an integer ! Exiting.\n"
				fi
				exit 1
			else
				MAX_TARGET_SIZE=$TARGET_SIZE
			fi
		fi

		# It is assumed that images size is negligible
		TOTAL_IMAGE_SIZE="0"
		OTHER_TRACKS_SIZE=$(expr $TOTAL_AUDIO_SIZE + $TOTAL_SUBTITLE_SIZE + $TOTAL_IMAGE_SIZE)
		MAX_VIDEO_SIZE=$(expr $MAX_TARGET_SIZE - $OTHER_TRACKS_SIZE)

		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG MAX_TARGET_SIZE $MAX_TARGET_SIZE"
			echo "DEBUG MAX_TARGET_SIZE $MAX_TARGET_SIZE"
			echo "DEBUG MAX_VIDEO_SIZE: $MAX_VIDEO_SIZE"
		fi

		case $CODEC_VIDEO in
		H264 )
			# global source bitrate (kb/s)
			SOURCE_BITRATE_STRING=`mediainfo --Inform="General;%OverallBitRate/String%" ${SOURCE_FILE}`
			# Could be in Mbps or Kbps
			if [[ $SOURCE_BITRATE_STRING == *Kbps* ]]
			then
				SOURCE_BITRATE=`echo $SOURCE_BITRATE_STRING | sed 's/ //g' | sed 's/Kbps//g'`
			elif  [[ $SOURCE_BITRATE_STRING == *Mbps* ]]
			then
				SOURCE_BITRATE=`echo $SOURCE_BITRATE_STRING | sed 's/ //g' | sed 's/Mbps/000/g'`
			else
				# error
				MESSAGE="Source bitrate $SOURCE_BITRATE_STRING (SOURCE_BITRATE_STRING)"
				not_recognized_exit
			fi
			# global source size (bytes)
			VIDEO_SIZE=`mediainfo --Inform="Video;%StreamSize%" "${SOURCE_FILE}"  | sed 's/ //g' | sed 's/MiB//g'`

			# estimated needed bitrate
			VIDEO_BITRATE=$(echo "scale=6; tmp = $SOURCE_BITRATE * $MAX_VIDEO_SIZE / $VIDEO_SIZE - 0.5; scale=0; tmp / 1" | bc)
			if [[ $WAZZUF_UI == "GUI" ]]; then
				zenity --info --title "$ZEN_TITLE" \
					--text "Estimated VIDEO_BITRATE for h264 encoding: $VIDEO_BITRATE kb/s.
Manually adjust the XXRIP_VIDEO_BITRATE value if the final size does not suit you." \
					--timeout=2
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo "Estimated VIDEO_BITRATE for h264 encoding: $VIDEO_BITRATE kb/s."
				echo "Manually adjust the XXRIP_VIDEO_BITRATE value if the final size does not suit you." && sleep 1
			fi
			;;
		XVID )
			# If bitrate value is negative, Xvid will use its absolute value as the target size (in kBytes) of the video
			# and compute the associated bitrate automagically
			# Convert bytes to kBytes
			VIDEO_BITRATE="-$(echo "scale=6; tmp = $MAX_VIDEO_SIZE / 1024 ; scale=0; tmp / 1" | bc)"
			if [[ $WAZZUF_UI == "GUI" ]]; then
				zenity --info --title "$ZEN_TITLE" \
					--text "Estimated VIDEO_BITRATE for Xvid encoding: $VIDEO_BITRATE kb/s.
Manually adjust the XXRIP_VIDEO_BITRATE value if the final size does not suit you." \
					--timeout=2
				if [ $? = "1" ]; then wazzuf_quit; fi
			else
				echo "Estimated VIDEO_BITRATE for Xvid encoding: $VIDEO_BITRATE kb/s."
				echo "Manually adjust the XXRIP_VIDEO_BITRATE value if the final size does not suit you." && sleep 1
			fi
			;;
		esac
	fi

	# video scaling
	if [[ "$VIDEO_SCALE" == "" ]]; then
		MENCODER_SCALE=""
	else
		# check if provided variable is a number
		NUMBER_TO_CHECK="$VIDEO_SCALE"
		MESSAGE="VIDEO_SCALE $VIDEO_SCALE"
		check_integer
		MENCODER_SCALE=",scale=-2:$VIDEO_SCALE"
	fi

	# check video cropping
	if [[ $VIDEO_CROP == "" ]]; then
		# ugly but not a problem for mencoder => warning only
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --warning --title "$ZEN_TITLE" \
				--text "Warning: VIDEO_CROP is empty ! Run wazzuf-pre-ripper or wazzuf-conf-generator for crop detection." \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo " Warning: VIDEO_CROP is empty ! Run wazzuf-pre-ripper or wazzuf-conf-generator for crop detection." && sleep 2
		fi
	fi

	if [[ ! $WAZZUF_UI == "GUI" ]]; then
		echo -ne "\n *************************************\n"
		echo " $SOURCE_FILE 2 pass $CODEC_VIDEO encoding"  && sleep 1
		echo -ne " *************************************\n"
	fi
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG VIDEO_BITRATE $VIDEO_BITRATE"
		echo "DEBUG VIDEO_SCALE $VIDEO_SCALE"
		echo "DEBUG VIDEO_CROP $VIDEO_CROP"
	fi
	video_rip
	VIDEO_SIZE=`ls -l ${VIDEO_FILE}  | cut -d ' ' -f 5`
	if [[ $DEBUG == "1" ]]; then echo "DEBUG VIDEO_SIZE $VIDEO_SIZE"; fi

	if [[ $VIDEO_RATIO_FORCE == "" ]]; then
		MERGE_VIDEO="$VIDEO_FILE"
	else
		# aspect-ratio check
		case $VIDEO_RATIO_FORCE in
		4/3 | 1.33 | 16/9 | 1.78 | 2.21 | 2.35 )
			MERGE_VIDEO="--aspect-ratio 0:$VIDEO_RATIO_FORCE $VIDEO_FILE"
			;;
		* )
			MESSAGE="Video aspect ratio $VIDEO_RATIO_FORCE (VIDEO_RATIO_FORCE)"
			not_recognized_exit
			;;
		esac
	fi


	## Cover art
	# Matroska Cover Art Guidelines http://www.matroska.org/technical/cover_art/index.html
	if [[ "$COVER" == "" ]]; then
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --info --title "$ZEN_TITLE" \
				--text "No image attachment. Skipping..." \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " No image attachment. Skipping..." && sleep 1
		        echo -ne " *************************************\n"
		fi
		MERGE_COVER=""
	else
		if [ ! -f "$SOURCE_DIRECTORY/$COVER" ]; then
			FILE_NAME="$COVER image"
			SOURCE_NAME="${SOURCE_DIRECTOR}"
			MERGE_COVER=""		
		else
			check_imagemagick
			# MIME types detection
			# "The pictures should only use the JPEG and PNG picture formats", Matroska Cover Art Guidelines
			# List of officially recognized image MIME types at the IANA homepage http://www.iana.org/assignments/media-types/image/index.html
			COVER_FORMAT_TEST=`file "$SOURCE_DIRECTORY/$COVER" | cut -d ':' -f 2 | cut -d ' ' -f 2`
			if [[ $DEBUG == "1" ]]; then echo "DEBUG COVER_FORMAT_TEST $COVER_FORMAT_TEST"; fi
			if [[ $COVER_FORMAT_TEST == "JPEG" ]]; then
				COVER_FORMAT="jpeg"
				COVER_HEIGHT=`convert "$SOURCE_DIRECTORY/$COVER" -print "%h" /dev/null`
				COVER_WIDTH=`convert "$SOURCE_DIRECTORY/$COVER" -print "%w" /dev/null`
				if [[ $DEBUG == "1" ]]; then
					echo "DEBUG COVER_HEIGHT $COVER_HEIGHT"
					echo "DEBUG COVER_WIDTH $COVER_WIDTH"
				fi
				cover_art_convert
				MERGE_COVER="--attachment-description \"cover-art\" --attachment-mime-type image/$COVER_FORMAT --attach-file $COVER_OUTPUT_SIMPLE --attachment-description \"cover-thumbnail\" --attachment-mime-type image/jpeg --attach-file $COVER_OUTPUT_THUMB"
			else
				if [[ $COVER_FORMAT_TEST == "PNG" ]]; then
					COVER_FORMAT="png"
					COVER_HEIGHT=`file "$SOURCE_DIRECTORY/$COVER" | cut -d "," -f 2 | cut -d " " -f 4`
					COVER_WIDTH=`file "$SOURCE_DIRECTORY/$COVER" | cut -d "," -f 2 | cut -d " " -f 2`
					if [[ $DEBUG == "1" ]]; then
						echo "DEBUG COVER_HEIGHT $COVER_HEIGHT"
						echo "DEBUG COVER_WIDTH $COVER_WIDTH"
					fi
					cover_art_convert
					MERGE_COVER="--attachment-description \"cover-art\" --attachment-mime-type image/$COVER_FORMAT --attach-file $COVER_OUTPUT_SIMPLE --attachment-description \"cover-thumbnail\" --attachment-mime-type image/jpeg --attach-file $COVER_OUTPUT_THUMB"
				else
					MESSAGE="$COVER image file format"
					not_recognized_exit	
				fi
			fi
		fi
	fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_COVER $MERGE_COVER"; fi


	## XML tags
	# http://matroska.org/technical/specs/tagging/index.html
	TAG_FILE="$BASE_WORKING_FILE.xml"
	if [ -f $TAG_FILE ] && [[ ! $WAZZUF_UI == "GUI" ]]; then
		FILE_NAME="XML tags"
		file_exists
	else
		# 3 templates:  tags-50-movie-template.xml  tags-50-music-template.xml  tags-50-show-template.xml
		# in TEMPLATES_PATH
		TEMPLATE_FILE_MOVIE="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-movie-template.xml"
		TEMPLATE_FILE_MUSIC="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-music-template.xml"
		TEMPLATE_FILE_SHOW="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-show-template.xml"

		# if empty tag: ugly but not really important
		XMLTAG_DATE_ENCODED=`date +%Y`
		XMLTAG_ENCODED_BY="$TAG_SIGNATURE"
		XMLTAG_COMMENT="$COMMENT"
		XMLTAG_DATE_RELEASE="$DATE"
		xml_tagging
	fi

	# second check, if generation problem, and to fill MERGE_XMLTAGS
	if [ -f $TAG_FILE ]; then
		MERGE_XMLTAGS="--global-tags $TAG_FILE"
	else
		if [[ $WAZZUF_UI == "GUI" ]]; then
			zenity --error --title "$ZEN_TITLE" \
				--text "XML tags file generation problem. Skipping..." \
				--timeout=2
			if [ $? = "1" ]; then wazzuf_quit; fi
		else
			echo -ne "\n *************************************\n"
			echo " XML tags file generation problem. Skipping..."  && sleep 2
			echo -ne " *************************************\n"
		fi
		MERGE_XMLTAGS=""
	fi
	if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_XMLTAGS $MERGE_XMLTAGS"; fi


	## merge
	trap "echo -e '\nManual killed script (Ctrl-C) during final mkv merge' && exit 1" 2
	if [[ ! $WAZZUF_UI == "GUI" ]]; then
		echo -ne "\n *************************************\n"
		echo " Final file merge:"
		echo -ne " *************************************\n"
	fi

	TOTAL_TRACKS_SIZE=$(expr $TOTAL_AUDIO_SIZE + $TOTAL_SUBTITLE_SIZE + $TOTAL_IMAGE_SIZE + $VIDEO_SIZE )
	LOCAL_AVAILABLE_DISK_SIZE=$(expr `df -k . | awk '/[0-9]%/{print $(NF-2)}'` \* 1024 )

	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG TOTAL_TRACKS_SIZE $TOTAL_TRACKS_SIZE"
		echo "DEBUG LOCAL_AVAILABLE_DISK_SIZE $LOCAL_AVAILABLE_DISK_SIZE"
		echo "DEBUG nice -n $NICENESS mkvmerge -o $MERGE_OUTPUT --title \"$MERGE_TITLE\" $MERGE_VIDEO $MERGE_AUDIO_FULL $MERGE_SUBTITLES_FULL $MERGE_CHAPTERS $MERGE_COVER $MERGE_XMLTAGS"
	fi

	if [[ "$TOTAL_TRACKS_SIZE" -gt "$LOCAL_AVAILABLE_DISK_SIZE" ]]; then
		MESSAGE="`pwd`"
		disk_full_quit
	fi

	check_mkvmerge
	if [[ $WAZZUF_UI == "GUI" ]]; then
		( echo 10; nice -n $NICENESS mkvmerge \
			-o $MERGE_OUTPUT --title "$MERGE_TITLE" \
			$MERGE_VIDEO \
			$MERGE_AUDIO_FULL \
			$MERGE_SUBTITLES_FULL \
			$MERGE_CHAPTERS \
			$MERGE_COVER \
			$MERGE_XMLTAGS 1>/dev/null 2>/dev/null ) \
			| zenity --progress --pulsate --title="$ZEN_TITLE - Final file merge" --text="Creating $MERGE_OUTPUT" --auto-close --auto-kill
			if [ $? = "1" ]; then wazzuf_quit; fi
	else
		nice -n $NICENESS mkvmerge \
			-o $MERGE_OUTPUT --title "$MERGE_TITLE" \
			$MERGE_VIDEO \
			$MERGE_AUDIO_FULL \
			$MERGE_SUBTITLES_FULL \
			$MERGE_CHAPTERS \
			$MERGE_COVER \
			$MERGE_XMLTAGS
	fi


## nfo generator
if [[ $WAZZUF_UI == "GUI" ]]; then
	( generate_nfo ) | zenity --progress --pulsate --title "$ZEN_TITLE" --text "Generating nfo file..." --auto-close
	if [ $? = "1" ]; then wazzuf_quit; fi
else
	echo -ne "\n *************************************\n"
	echo " Generating nfo file..."
	generate_nfo
	echo -ne " *************************************\n"
fi

done
done

cd ..
if [[ $WAZZUF_UI == "GUI" ]]; then
	# basic information
	zenity --info --title "$ZEN_TITLE" --text "$TITLE_LONG $TAG_RIP finished"
else
	echo -ne "\n *************************************\n"
	echo " $TITLE_LONG $TAG_RIP finished"
	echo -ne " *************************************\n"
fi

exit 0
