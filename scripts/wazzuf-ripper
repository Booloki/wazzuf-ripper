#! /bin/bash
# Wazzuf Ripper
# DVD/BD rip script
# booloki@lokizone.net

GLOBAL_CONF_FILE="/etc/wazzuf-ripper/wazzuf-ripper-global.conf"
source $GLOBAL_CONF_FILE

# basic error catching
trap "echo -e '\nWazzuf Ripper failed !' && exit 1" 15

# check wazzuf files
source $FUNCTIONS_CHECK
checkandsource_wazzuf_conf
checkandsource_wazzuf_files

# video codec choice check
case $1 in
h264 | x264 | H264 | X264 )
        CODEC_VIDEO="H264"
        ;;
xvi* | Xvi* | XVI* )
        CODEC_VIDEO="XVID"
        ;;
dump | DUMP )
        CODEC_VIDEO="DUMP"
        ;;
dump_crop | DUMP_CROP )
        CODEC_VIDEO="DUMP_CROP"
        ;;
"" )
	# use default CODEC_VIDEO
	CODEC_VIDEO=$DEFAULT_CODEC_VIDEO
	;;
* )
        wazzuf_usage
        ;;
esac

# audio 1 codec choice check
case $2 in
DUMP )
	CODEC_AUDIO_1=$AUDIO_1_SOURCE
	;;
AC3 | AC351 | AC320 )
        CODEC_AUDIO_1=$2
        ;;
ogg | vorbis | OGG | VORBIS )
        CODEC_AUDIO_1="VORBIS"
        ;;
mp3 | MP3 | Mp3 )
        CODEC_AUDIO_1="MP3"
        ;;
OPUS | Opus | opus )
	CODEC_AUDIO_1="OPUS"
	;;
"" )
        # use default CODEC_AUDIO
	if [ $DEFAULT_CODEC_AUDIO == "DUMP" ]; then
		CODEC_AUDIO_1=$AUDIO_1_SOURCE
	else
		CODEC_AUDIO_1=$DEFAULT_CODEC_AUDIO
	fi
        ;;
* )
        wazzuf_usage
        ;;
esac

# audio 2 codec choice check
if [[ ! $AUDIO_2_LANG == "" ]]; then
	case $3 in
	DUMP )
		CODEC_AUDIO_2=$AUDIO_2_SOURCE
		;;
	AC3 | AC351 | AC320 )
		CODEC_AUDIO_2="AC3"
		;;
	ogg | vorbis | OGG | VORBIS )
		CODEC_AUDIO_2="VORBIS"
		;;
	mp3 | MP3 | Mp3 )
		CODEC_AUDIO_2="MP3"
		;;
	OPUS | Opus | opus )
		CODEC_AUDIO_2="OPUS"
		;;
	* )
		# use default CODEC_AUDIO
		if [ $DEFAULT_CODEC_AUDIO == "DUMP" ]; then
			CODEC_AUDIO_2=$AUDIO_2_SOURCE
		else
			CODEC_AUDIO_2=$DEFAULT_CODEC_AUDIO
		fi
	        ;;
	esac
else
	CODEC_AUDIO_2=""
fi


# enter working directory
mkdir -p "$WORKING_PATH_BASE/$TAG_TITLE_NAME"
cd $WORKING_PATH_BASE/$TAG_TITLE_NAME


case $VIDEO_TYPE in
MOVIE )
	TITLE_LONG=$TITLE_NAME
	DVD_CHAPTER_FIRST="1"
	DVD_CHAPTER_LAST="1"
	DVD_TITLE_LIST=$DVD_TITLE_NUMBER
        ;;
SHOW )
	TITLE_LONG="$TITLE_NAME - $SEASON_DENOMINATION $SEASON_NUMBER"
	if [[ $DVD_EPISODES_ORG == "" ]]; then echo " DVD_EPISODES_ORG is empty ! Exiting..." && exit 1; fi
	if [[ $DVD_EPISODES_ORG == "CHAPTERS" ]]; then	DVD_TITLE_LIST=$DVD_TITLE_NUMBER; fi
        ;;
MUSIC )
	TITLE_LONG="$ARTIST_NAME - $TITLE_NAME"
	DVD_CHAPTER_FIRST="1"
	DVD_CHAPTER_LAST="1"
	DVD_TITLE_LIST=$DVD_TITLE_NUMBER
        ;;
* )
	echo -ne "\n *************************************\n"
	echo " VIDEO_TYPE not set to MOVIE, SHOW or MUSIC ! Exiting..."
	echo -ne " *************************************\n"
	exit 1
        ;;
esac


echo -ne "\n *************************************\n"
echo " Starting $TITLE_LONG $TAG_RIP with $CODEC_VIDEO and $CODEC_AUDIO_1 $CODEC_AUDIO_2"
echo -ne " *************************************\n"

# Check if source is OK
case $SOURCE in
BD )
	check_device BD RIP
	;;
ISO_BD )
	check_device ISO_BD RIP
	ISO_FILE_PATH="$SOURCE_DIRECTORY/$ISO_FILE"
	if [[ $DEBUG == "1" ]]; then echo "DEBUG ISO_FILE_PATH $ISO_FILE_PATH"; fi
	;;
M2TS )
	M2TS_FILE_PATH="$SOURCE_DIRECTORY/$M2TS_FILE"
	if [[ $DEBUG == "1" ]]; then echo "DEBUG M2TS_FILE_PATH $M2TS_FILE_PATH"; fi
	check_device M2TS RIP
        ;;
DVD )
	check_device DVD RIP
	check_ogmtools
        ;;
ISO_DVD )	
	check_device ISO_DVD RIP
	check_ogmtools
	;;
* )
        echo -ne "\n Media source issue: make sure you filled DVD, ISO_DVD, BD, ISO_BD or M2TS in configuration file.\n"
        exit 1
        ;;
esac

check_nice
check_ionice

time for DVD_TITLE_NUMBER in $DVD_TITLE_LIST
do
time for ((i=$DVD_CHAPTER_FIRST; i <= DVD_CHAPTER_LAST ; i++))
do
	# check multichapters
	case $MULTICHAP_FORCE in
		y* | Y* )
			CHAPTERS="$MULTICHAP_FIRST-$MULTICHAP_LAST"
			case $SOURCE in
			DVD | ISO_DVD )
				DVD_CHAPTER_NUMBER=$CHAPTERS
				;;
			* )
				DVD_CHAPTER_NUMBER=$i
				;;
			esac
			;;
		* )
			DVD_CHAPTER_NUMBER=$i
			CHAPTERS="$i-$i"
			;;
	esac

	# tagging / set full working file and video filenames
	case $VIDEO_TYPE in
	MOVIE )
		BASE_WORKING_FILE=$TAG_TITLE_NAME.$DATE
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"
		TAG_AUDIO_CODEC=$CODEC_AUDIO_1
		MERGE_OUTPUT="$BASE_WORKING_FILE.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO_CODEC.$TAG_AUDIO.$TAG_SIGNATURE.mkv"
		MERGE_TITLE=$TITLE_NAME
		echo -ne "\n *************************************\n"
		echo " Work in progress: $TITLE_NAME ($DATE)"
		echo -ne " *************************************\n"
		;;
	MUSIC )
		BASE_WORKING_FILE=$TAG_TITLE_NAME.$DATE
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"
		TAG_AUDIO_CODEC=$CODEC_AUDIO_1
		MERGE_OUTPUT="$BASE_WORKING_FILE.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO_CODEC.$TAG_AUDIO.$TAG_SIGNATURE.mkv"
		MERGE_TITLE=$TITLE_NAME
		echo -ne "\n *************************************\n"
		echo " Work in progress: $ARTIST_NAME - $TITLE_NAME ($DATE)"
		echo -ne " *************************************\n"
		;;
	SHOW )
		SEASON_TYPE="S"
		EPISODE_TYPE="E"
		BASE_WORKING_FILE="$TAG_TITLE_NAME.$SEASON_TYPE$SEASON_NUMBER.T$DVD_TITLE_NUMBER.C$DVD_CHAPTER_NUMBER"
		VOB_FILE="$BASE_WORKING_FILE.vob"
		CHAPTERS_FILE_TXT="$BASE_WORKING_FILE-chapters.txt"
		CHAPTERS_FILE_XML="$BASE_WORKING_FILE-chapters.xml"
		XVID_FILE="$BASE_WORKING_FILE.xvid"
		H264_FILE="$BASE_WORKING_FILE.h264"
		DUMP_FILE="$BASE_WORKING_FILE.mpeg"
		DUMP_CROP_FILE="$BASE_WORKING_FILE.mpeg2"

		if [ ! -f "$SOURCE_DIRECTORY/$EPISODES_FILE" ]
		then
			echo -ne "\n *************************************\n"
			echo " Warning ! $EPISODE_DENOMINATION text file does not exists in $SOURCE_DIRECTORY !" && sleep 2
			echo -ne " *************************************\n"
			EPISODE_NAME_FULL=$i
			EPISODE_NAME=$i
			EPISODE_NUMBER=$i
			EPISODE_TAG=$EPISODE_TYPE$EPISODE_NUMBER
		else
			if [[ $DVD_EPISODES_ORG == "CHAPTERS" ]]; then
				EPISODE_NAME_FULL=`head -n $i "$SOURCE_DIRECTORY/$EPISODES_FILE" | tail -n 1`
			else
				EPISODE_NAME_FULL=`head -n $DVD_TITLE_NUMBER "$SOURCE_DIRECTORY/$EPISODES_FILE" | tail -n 1`
			fi
			EPISODE_NAME=`echo $EPISODE_NAME_FULL | cut -d '-' -f 2-10 | sed s/\ //`
			EPISODE_NUMBER=`echo $EPISODE_NAME_FULL | cut -d '-' -f 1 | sed s/\ //`
			EPISODE_TAG=$EPISODE_TYPE$EPISODE_NUMBER.`echo $EPISODE_NAME | sed s/\ /./g`
		fi
		MERGE_OUTPUT="$TAG_TITLE_NAME.$SEASON_TYPE$SEASON_NUMBER.$EPISODE_TAG.$TAG_RIP.$CODEC_VIDEO.$TAG_AUDIO.$TAG_SIGNATURE.mkv"

		MERGE_TITLE="$TITLE_LONG - $EPISODE_DENOMINATION $EPISODE_NAME_FULL"
		echo -ne "\n *************************************\n"
		echo " Work in progress: $EPISODE_DENOMINATION $EPISODE_NAME_FULL"
		echo -ne " *************************************\n"
		;;
	esac
	if [[ $DEBUG == "1" ]]; then echo "DEBUG MERGE_OUTPUT $MERGE_OUTPUT"; fi

	# Retrieve IMdb informations
	echo -ne "\n *************************************\n"
	if [[ $IMDB_ID == "" ]]; then
		echo -ne " No IMdb ID provided. Skipping..." && sleep 1
	else
		check_imdb
		echo -ne " Retrieving IMdb informations..."
		get_imdb_informations
	fi
	echo -ne "\n *************************************\n"


	# Extract full working file (.vob or .m2ts)
	# Save chapters informations (DVD/ISO_DVD only) and set chapters merge informations
	# dvdxchap doesn't work on vob files... so DVD/ISO_DVD media is mandatory
	check_mplayer
	trap "echo -e '\nManual killed script (Ctrl-C) during extracting working file' && exit 1" 2
	case $SOURCE in
	DVD )
		case $MULTICHAP_FORCE in
			y* | Y* )
				echo -ne "\n *************************************\n"
				if [ ! -f $CHAPTERS_FILE_TXT ]; then echo " Creating $CHAPTERS_FILE_TXT..."; dvdxchap -t $DVD_TITLE_NUMBER -c $CHAPTERS /dev/dvd > $CHAPTERS_FILE_TXT; else echo " $CHAPTERS_FILE_TXT file exists. Next..."; fi
				echo -ne " *************************************\n"
				MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_TXT"
				;;
			* )
				echo -ne "\n *************************************\n"
				echo " No chapters file to create. Next..."
				echo -ne " *************************************\n"
				MERGE_CHAPTERS=""
				;;
		esac

		if [ ! -f $VOB_FILE ]; then
                	# extract local working file from DVD
	               ionice -c $IONICENESS nice -n $NICENESS mplayer -dumpstream dvd://$DVD_TITLE_NUMBER -chapter $CHAPTERS -dumpfile $VOB_FILE
		else
	                echo -ne "\n *************************************\n"
	                echo " $VOB_FILE file exists. Next..."  && sleep 1
        	        echo -ne " *************************************\n"
		fi

		SOURCE_FILE=$VOB_FILE

		if [ "${DVDRIP_VIDEO_BITRATE}" = "orig" ] || [ "${CODEC_VIDEO}" = "DUMP_CROP" ]; then
			VIDEO_BITRATE=`avconv -i ${SOURCE_FILE} 2>&1 | grep 'Video: ' | sed 's!^.*\s\([0-9]\+\)\skb/s.*!\1!'`
		else
			VIDEO_BITRATE=$DVDRIP_VIDEO_BITRATE
		fi
	        ;;
	ISO_DVD )
		case $MULTICHAP_FORCE in
			y* | Y* )
				echo -ne "\n *************************************\n"
				if [ ! -f $CHAPTERS_FILE_TXT ]; then echo " Creating $CHAPTERS_FILE_TXT..."; dvdxchap -t $DVD_TITLE_NUMBER -c $CHAPTERS "$SOURCE_DIRECTORY/$ISO_FILE" > $CHAPTERS_FILE_TXT; else echo " $CHAPTERS_FILE_TXT file exists. Next..."; fi
				echo -ne " *************************************\n"
				MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_TXT"
				;;
			* )
				echo -ne "\n *************************************\n"
				echo " No chapters file to create. Next..."
				echo -ne " *************************************\n"
				MERGE_CHAPTERS=""
				;;
		esac

		if [ ! -f $VOB_FILE ]; then
			echo -ne "\n *************************************\n"
			echo " Extracting $VOB_FILE from $ISO_FILE..."
			ionice -c $IONICENESS nice -n $NICENESS mplayer -dvd-device "$SOURCE_DIRECTORY/$ISO_FILE" -dumpstream dvd://$DVD_TITLE_NUMBER -chapter $CHAPTERS -dumpfile $VOB_FILE
			echo -ne " *************************************\n"
		else
	                echo -ne "\n *************************************\n"
	                echo " $VOB_FILE file exists. Next..."  && sleep 1
        	        echo -ne " *************************************\n"
		fi

		SOURCE_FILE=$VOB_FILE

		if [ "${DVDRIP_VIDEO_BITRATE}" = "orig" ] || [ "${CODEC_VIDEO}" = "DUMP_CROP" ]; then
			VIDEO_BITRATE=`avconv -i ${SOURCE_FILE} 2>&1 | grep 'Video: ' | sed 's!^.*\s\([0-9]\+\)\skb/s.*!\1!'`
		else
			VIDEO_BITRATE=$DVDRIP_VIDEO_BITRATE
		fi
	        ;;
	BD | ISO_BD )
		# extract/copy local working file(s) from BD

		if [[ $SOURCE == "ISO_BD" ]]; then
			BD_MOUNT=$ISO_MOUNT_POINT
			iso_bd_manage mount
		else
			BD_MOUNT=`mount | grep udf | sed s/" type udf "/""/g | cut -d '(' -f 1 | cut -d ' ' -f 3-10`
		fi

		echo -ne "\n *************************************\n"
		echo " Copying all m2ts/mpls files from BR..."
		if [[ $DEBUG == "1" ]]; then echo "DEBUG ionice -c $IONICENESS nice -n $NICENESS cp -vn \"${BD_MOUNT}\"/BDMV/STREAM/*.m2ts \"$SOURCE_DIRECTORY\"/"; fi
		ionice -c $IONICENESS nice -n $NICENESS cp -vn "${BD_MOUNT}"/BDMV/STREAM/*.m2ts "$SOURCE_DIRECTORY"/
		# file have 444 rights cause read-only source
		sudo chmod 644 "$SOURCE_DIRECTORY"/*.m2ts
		SOURCE_FILE="$SOURCE_DIRECTORY/$M2TS_FILE"
		# chapters management
		if [[ $DEBUG == "1" ]]; then echo "DEBUG cp -vn ${BD_MOUNT}/BDMV/PLAYLIST/*.mpls $SOURCE_DIRECTORY/"; fi
		sudo chmod 644 "$SOURCE_DIRECTORY"/*.mpls
		cp -vn "${BD_MOUNT}"/BDMV/PLAYLIST/*.mpls "$SOURCE_DIRECTORY"/

		SOURCE_FILE="$M2TS_FILE"
		MERGE_CHAPTERS=""

		if [ "${BDRIP_VIDEO_BITRATE}" = "orig" ] || [ "${CODEC_VIDEO}" = "DUMP_CROP" ]; then
			VIDEO_BITRATE=`avconv -i ${SOURCE_FILE} 2>&1 | grep 'Video: ' | sed 's!^.*\s\([0-9]\+\)\skb/s.*!\1!'`
		else
			VIDEO_BITRATE=$BDRIP_VIDEO_BITRATE
		fi

		if [[ $SOURCE == "ISO_BD" ]]; then iso_bd_manage umount; fi

		echo -ne " Please now use M2TS instead of BD in $CONF_FILE,\n"
		echo -ne " and run wazzuf-pre-ripper to get more tracks informations.\n"
		exit 0
		echo -ne " *************************************\n"
		;;
	M2TS )
		SOURCE_FILE="$M2TS_FILE_PATH"
		MERGE_CHAPTERS=""

		if [ "${BDRIP_VIDEO_BITRATE}" = "orig" ] || [ "${CODEC_VIDEO}" = "DUMP_CROP" ]; then
			VIDEO_BITRATE=`avconv -i ${SOURCE_FILE} 2>&1 | grep 'Video: ' | sed 's!^.*\s\([0-9]\+\)\skb/s.*!\1!'`
		else
			VIDEO_BITRATE=$BDRIP_VIDEO_BITRATE
		fi

		# chapters management
		MPLS_FILE="`echo "$M2TS_FILE_PATH" | sed 's!m2ts$!mpls!'`"
		echo -ne "\n *************************************\n"
		if [ -f $MPLS_FILE ]; then
			echo " Creating $CHAPTERS_FILE_XML..."
			check_bdchapters
			bdchapters -i "$MPLS_FILE" -o $CHAPTERS_FILE_XML
			MERGE_CHAPTERS="--chapters $CHAPTERS_FILE_XML"
		else
			echo " No chapters file to create. Next..."
			MERGE_CHAPTERS=""
		fi
		echo -ne "\n *************************************\n"
		;;
	esac


	## subtitle(s) check/extract/copy
	trap "echo -e '\nManual killed script (Ctrl-C) during checking/extracting subtitles' && exit 1" 2
	if [[ $SUBTITLE_1_LANG == "" ]]; then
		echo -ne "\n *************************************\n"
		echo " No subtitle track choice, next..." && sleep 1
		echo -ne " *************************************\n"
		TOTAL_SUBTITLE_SIZE="0"
	else
		# subtitle track 1
		SUBTITLE_LANG=$SUBTITLE_1_LANG
		SUBTITLE_NAME="$SUBTITLE_1_NAME"
		SUBTITLE_FILE_FORCE_PATH="$SOURCE_DIRECTORY/$SUBTITLE_1_FILE_FORCE"

		echo -ne "\n *************************************\n"
		echo " Subtitle 1 track...."
		# subtitle file (force external or not)
		if [[ "$SUBTITLE_1_FILE_FORCE" == "" ]]; then
			if echo $SUBTITLE_1_SID | egrep -vq '^[0-9]+$'; then echo -ne "SUBTITLE_1_SID provided is not an integer ! Exiting....\n"; exit 1; fi
			SUBTITLE_SID=$SUBTITLE_1_SID
			SUB_FILE="$BASE_WORKING_FILE.$SUBTITLE_SID-$SUBTITLE_LANG"
			SUBTITLE_FILE="$SUB_FILE.idx"
			SUBTITLE_FILE_SUB="$SUB_FILE.sub"
			subtitle_rip
		else
			# If srt file, check encoding
			if  [[ `echo "$SUBTITLE_1_FILE_FORCE" | grep -vE ".srt$"` == "" ]]; then subtitle_srt_check; fi
			# Copy subtitle file
			cp -v "$SUBTITLE_FILE_FORCE_PATH" .
			# If .idx file, copy .sub file too.
			if  [[ `echo "$SUBTITLE_1_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then
				SUBTITLE_FILE_SUB=`echo "$SUBTITLE_FILE_FORCE_PATH" | sed s/idx$/sub/`
				cp -v $SUBTITLE_FILE_SUB .				
			fi
			SUBTITLE_FILE="$SUBTITLE_1_FILE_FORCE"
		fi

		# subtitle 1 files size
		if  [[ `echo "$SUBTITLE_1_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then 
			SUBTITLE_1_SIZE=$(expr `ls -l $SUBTITLE_FILE | cut -d ' ' -f 5` + `ls -l $SUBTITLE_FILE_SUB | cut -d ' ' -f 5`)
		else
			SUBTITLE_1_SIZE=`ls -l $SUBTITLE_FILE | cut -d ' ' -f 5`
		fi

		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG SUBTITLE_FILE $SUBTITLE_FILE"
			echo "DEBUG SUBTITLE_FILE_SUB $SUBTITLE_FILE_SUB"
			echo "DEBUG SUBTITLE_1_SIZE $SUBTITLE_1_SIZE"
		fi
 
		# Force no default subtitle (or not)
		case $SUBTITLE_NODEFAULT_FORCE in
		Y* | y* )
			MERGE_SUBTITLES_1="--language 0:$SUBTITLE_LANG --default-track 0:0 --track-name 0:$SUBTITLE_NAME $SUBTITLE_FILE"
			;;
		* )
			MERGE_SUBTITLES_1="--language 0:$SUBTITLE_LANG --track-name 0:$SUBTITLE_NAME $SUBTITLE_FILE"
			;;
		esac
		
		# subtitle track 2
		if [[ $SUBTITLE_2_LANG == "" ]]; then
			echo -ne "\n *************************************\n"
			echo " No second subtitle track choice. Next..." && sleep 1
	        	echo -ne " *************************************\n"
			MERGE_SUBTITLES_FULL="$MERGE_SUBTITLES_1"
			SUBTITLE_2_SIZE="0"
		else
			SUBTITLE_LANG=$SUBTITLE_2_LANG
			SUBTITLE_NAME="$SUBTITLE_2_NAME"
			SUBTITLE_FILE_FORCE_PATH="$SOURCE_DIRECTORY/$SUBTITLE_2_FILE_FORCE"
		
			echo -ne "\n *************************************\n"
			echo " Subtitle 2 track..."
			# subtitle file (force external or not)
			if [[ "$SUBTITLE_2_FILE_FORCE" == "" ]]; then
				if echo $SUBTITLE_2_SID | egrep -vq '^[0-9]+$'; then echo -ne "SUBTITLE_2_SID provided is not an integer ! Exiting....\n"; exit 1; fi
				SUBTITLE_SID=$SUBTITLE_2_SID
				SUB_FILE="$BASE_WORKING_FILE.$SUBTITLE_SID-$SUBTITLE_LANG"
				SUBTITLE_FILE="$SUB_FILE.idx"
				SUBTITLE_FILE_SUB="$SUB_FILE.sub"
				subtitle_rip
			else
				# If srt file, check encoding
				if  [[ `echo "$SUBTITLE_2_FILE_FORCE" | grep -vE ".srt$"` == "" ]]; then subtitle_srt_check; fi
				# Copy subtitle file
				cp -v "$SUBTITLE_FILE_FORCE_PATH" .
				# If .idx file, copy .sub file too.
				if  [[ `echo "$SUBTITLE_2_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then
					SUBTITLE_FILE_SUB=`echo "$SUBTITLE_FILE_FORCE_PATH" | sed s/idx$/sub/`
					cp -v $SUBTITLE_FILE_SUB .					
				fi
				SUBTITLE_FILE="$SUBTITLE_2_FILE_FORCE"
			fi

			# subtitle 2 files size
			if  [[ `echo "$SUBTITLE_2_FILE_FORCE" | grep -vE ".idx$"` == "" ]]; then 
				SUBTITLE_2_SIZE=$(expr `ls -l $SUBTITLE_FILE | cut -d ' ' -f 5` + `ls -l $SUBTITLE_FILE_SUB | cut -d ' ' -f 5`)
			else
				SUBTITLE_2_SIZE=`ls -l $SUBTITLE_FILE | cut -d ' ' -f 5`
			fi

			if [[ $DEBUG == "1" ]]; then
				echo "DEBUG SUBTITLE_FILE $SUBTITLE_FILE"
				echo "DEBUG SUBTITLE_FILE_SUB $SUBTITLE_FILE_SUB"
				echo "DEBUG SUBTITLE_2_SIZE $SUBTITLE_2_SIZE"
			fi

			# Force no default subtitle (or not)
			case $SUBTITLE_NODEFAULT_FORCE in
			Y* | y* )
				MERGE_SUBTITLES_2="--language 0:$SUBTITLE_LANG --default-track 0:0 --track-name 0:$SUBTITLE_NAME $SUBTITLE_FILE"
				;;
			* )
				MERGE_SUBTITLES_2="--language 0:$SUBTITLE_LANG --track-name 0:$SUBTITLE_NAME $SUBTITLE_FILE"
				;;
			esac
			MERGE_SUBTITLES_FULL="$MERGE_SUBTITLES_1 $MERGE_SUBTITLES_2"
		fi

		TOTAL_SUBTITLE_SIZE=$(expr $SUBTITLE_1_SIZE + $SUBTITLE_2_SIZE)
		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG SUBTITLE_1_SIZE $SUBTITLE_1_SIZE"
			echo "DEBUG SUBTITLE_2_SIZE $SUBTITLE_2_SIZE"
			echo "DEBUG TOTAL_SUBTITLE_SIZE $TOTAL_SUBTITLE_SIZE"
		fi
	fi


	## Audio track(s) extract/encode
	trap "echo -e '\nManual killed script (Ctrl-C) during Audio track(s) extracting/encoding' && exit 1" 2

	# audio track 1
	AUDIO_AID=$AUDIO_1_AID
	AUDIO_SOURCE=$AUDIO_1_SOURCE
	AUDIO_LANG=$AUDIO_1_LANG
	AUDIO_NAME=$AUDIO_1_NAME
	CODEC_AUDIO=$CODEC_AUDIO_1
	DTS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.dts"
	WAV_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.wav"
	MP3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.mp3"
	OGG_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ogg"
	OPUS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.opus"
	AC3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ac3"

	audio_rip

	AUDIO_1_SIZE=`ls -l $AUDIO_FILE | cut -d ' ' -f 5`

	# merge with or without audio sync
	if [[ $AUDIO_1_SYNC == "" ]]; then
		MERGE_AUDIO_1="--language 0:$AUDIO_1_LANG --track-name 0:$AUDIO_1_NAME $AUDIO_FILE"
	else	
		MERGE_AUDIO_1="--language 0:$AUDIO_1_LANG --track-name 0:$AUDIO_1_NAME -y 0:$AUDIO_1_SYNC $AUDIO_FILE"
	fi

	# audio track 2
	if [[ $AUDIO_2_LANG == "" ]]; then
		echo -ne "\n *************************************\n"
		echo " No second audio track choice. Next..."  && sleep 1
        	echo -ne " *************************************\n"
		AUDIO_2_SIZE="0"
	else
		AUDIO_AID=$AUDIO_2_AID
		AUDIO_SOURCE=$AUDIO_2_SOURCE
		AUDIO_LANG=$AUDIO_2_LANG
		AUDIO_NAME=$AUDIO_2_NAME
		CODEC_AUDIO=$CODEC_AUDIO_2
		DTS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.dts"
		WAV_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.wav"
		MP3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.mp3"
		OGG_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ogg"
		OPUS_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.opus"
		AC3_FILE="$BASE_WORKING_FILE.$AUDIO_AID-$AUDIO_LANG.ac3"

		audio_rip

		AUDIO_2_SIZE=`ls -l $AUDIO_FILE | cut -d ' ' -f 5`

		if [[ $AUDIO_2_SYNC == "" ]]; then
			MERGE_AUDIO_2="--language 0:$AUDIO_2_LANG --track-name 0:$AUDIO_2_NAME $AUDIO_FILE"
		else	
			MERGE_AUDIO_2="--language 0:$AUDIO_2_LANG --track-name 0:$AUDIO_2_NAME -y 0:$AUDIO_2_SYNC $AUDIO_FILE"
		fi					
	fi
	MERGE_AUDIO_FULL="$MERGE_AUDIO_1 $MERGE_AUDIO_2"
	TOTAL_AUDIO_SIZE=$(expr $AUDIO_1_SIZE + $AUDIO_2_SIZE)
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG AUDIO_1_SIZE $AUDIO_1_SIZE"
		echo "DEBUG AUDIO_2_SIZE $AUDIO_2_SIZE"
		echo "DEBUG TOTAL_AUDIO_SIZE $TOTAL_AUDIO_SIZE"
	fi


	## video encode
	trap "echo -e '\nManual killed script (Ctrl-C) during Video encoding' && exit 1" 2

	# change video bitrate if maximum target size provided
	if [[ ! "$TARGET_SIZE" == "" ]]; then

		# check provided TARGET_SIZE
		if [[ "$TARGET_SIZE" == "CD" ]]; then
			MAX_TARGET_SIZE=$CD_SIZE_DEFAULT
		elif [[ "$TARGET_SIZE" == "DVD" ]]; then
			MAX_TARGET_SIZE=$DVD_SIZE_DEFAULT
		else
			# test if a number
			if echo "$TARGET_SIZE" | egrep -vq '^[0-9]+$'; then
				echo -ne "TARGET_SIZE provided is not set to CD, DVD, or an integer ! Exiting....\n"
				exit 1
			else
				MAX_TARGET_SIZE=$TARGET_SIZE
			fi
		fi

		# It is assumed that images size is negligible
		TOTAL_IMAGE_SIZE="0"
		OTHER_TRACKS_SIZE=$(expr $TOTAL_AUDIO_SIZE + $TOTAL_SUBTITLE_SIZE + $TOTAL_IMAGE_SIZE)
		MAX_VIDEO_SIZE=$(expr $MAX_TARGET_SIZE - $OTHER_TRACKS_SIZE)

		if [[ $DEBUG == "1" ]]; then
			echo "DEBUG MAX_TARGET_SIZE $MAX_TARGET_SIZE"
			echo "DEBUG MAX_TARGET_SIZE $MAX_TARGET_SIZE"
			echo "DEBUG MAX_VIDEO_SIZE: $MAX_VIDEO_SIZE"
		fi

		case $CODEC_VIDEO in
		H264 )
			# global source bitrate (kb/s)
			SOURCE_BITRATE=`avconv -i ${SOURCE_FILE} 2>&1 | grep "bitrate: " | cut -d ' ' -f 8`
			# global source size (bytes)
			VIDEO_SIZE=`ls -l ${SOURCE_FILE}  | cut -d ' ' -f 5`

			# estimated needed bitrate
			VIDEO_BITRATE=$(echo "scale=6; tmp = $SOURCE_BITRATE * $MAX_VIDEO_SIZE / $VIDEO_SIZE - 0.5; scale=0; tmp / 1" | bc)
			echo "Estimated VIDEO_BITRATE for h264 encoding: $VIDEO_BITRATE kb/s."
			echo "Manually adjust the XXRIP_VIDEO_BITRATE value if the final size does not suit you." && sleep 1
			;;
		XVID )
			# If bitrate value is negative, Xvid will use its absolute value as the target size (in kBytes) of the video
			# and compute the associated bitrate automagically
			# Convert bytes to kBytes
			VIDEO_BITRATE="-$(echo "scale=6; tmp = $MAX_VIDEO_SIZE / 1024 ; scale=0; tmp / 1" | bc)"
			;;
		esac
	fi

	# video scaling
	if [[ "$VIDEO_SCALE" == "" ]]; then
		MENCODER_SCALE=""
	else
		# check provided variable is a number
		if echo "$VIDEO_SCALE" | egrep -vq '^[0-9]+$'; then echo -ne "VIDEO_SCALE provided is not an integer ! Exiting....\n"; exit 1; fi
		MENCODER_SCALE=",scale=-2:$VIDEO_SCALE"
	fi

	# check video cropping
	if [[ $VIDEO_CROP == "" ]]; then echo " Warning: VIDEO_CROP is empty ! Run wazzuf-pre-ripper for crop detection." && sleep 2; fi

	echo -ne "\n *************************************\n"
	echo " $SOURCE_FILE 2 pass $CODEC_VIDEO encoding"  && sleep 1
	if [[ $DEBUG == "1" ]]; then
		echo "DEBUG VIDEO_BITRATE $VIDEO_BITRATE"
		echo "DEBUG VIDEO_SCALE $VIDEO_SCALE"
		echo "DEBUG VIDEO_CROP $VIDEO_CROP"
	fi
	echo -ne " *************************************\n"

	video_rip

	if [[ $VIDEO_RATIO_FORCE == "" ]]; then
		MERGE_VIDEO="$VIDEO_FILE"
	else
		# aspect-ratio check
		case $VIDEO_RATIO_FORCE in
		4/3 | 1.33 | 16/9 | 1.78 | 2.21 | 2.35 )
			MERGE_VIDEO="--aspect-ratio 0:$VIDEO_RATIO_FORCE $VIDEO_FILE"
			;;
		* )
			echo -ne "\n *************************************\n"
			echo " $VIDEO_RATIO_FORCE : video aspect ratio not recognized ! Exiting..."
			echo -ne " *************************************\n"
			exit 1
			;;
		esac
	fi


	## Cover art
	# Matroska Cover Art Guidelines http://www.matroska.org/technical/cover_art/index.html
	if [[ "$SOURCE_DIRECTORY/$COVER" == "" ]]; then
		echo -ne "\n *************************************\n"
		echo " No image attachment. Skipping..." && sleep 1
	        echo -ne " *************************************\n"
		MERGE_COVER=""
	else
		if [ ! -f "$SOURCE_DIRECTORY/$COVER" ]; then
			echo -ne "\n *************************************\n"
			echo " Warning ! $COVER image file does not exists in $SOURCE_DIRECTORY ! Skipping..." && sleep 2
	        	echo -ne " *************************************\n"
			MERGE_COVER=""		
		else
			check_imagemagick
			# MIME types detection
			# "The pictures should only use the JPEG and PNG picture formats", Matroska Cover Art Guidelines
			# List of officially recognized image MIME types at the IANA homepage http://www.iana.org/assignments/media-types/image/index.html
			COVER_FORMAT_TEST=`file "$SOURCE_DIRECTORY/$COVER" | cut -d ':' -f 2 | cut -d ' ' -f 2`
			if [[ $COVER_FORMAT_TEST == "JPEG" ]]; then
				COVER_FORMAT=jpeg
				COVER_HEIGHT=`convert "$SOURCE_DIRECTORY/$COVER" -print "%h" /dev/null`
				COVER_WIDTH=`convert "$SOURCE_DIRECTORY/$COVER" -print "%w" /dev/null`
				cover_art_convert
			else
				if [[ $COVER_FORMAT_TEST == "PNG" ]]; then
					COVER_FORMAT=png
					COVER_HEIGHT=`file "$SOURCE_DIRECTORY/$COVER" | cut -d "," -f 2 | cut -d " " -f 4`
					COVER_WIDTH=`file "$SOURCE_DIRECTORY/$COVER" | cut -d "," -f 2 | cut -d " " -f 2`
					cover_art_convert
				else
					echo -ne "\n *************************************\n"
					echo " $COVER file format unrecognized, so no image attachment. Next... " && sleep 2
			        	echo -ne " *************************************\n"
					MERGE_COVER=""		
				fi
			fi
		fi
	fi


	## xml tags
	# http://matroska.org/technical/specs/tagging/index.html
	TAG_FILE="$BASE_WORKING_FILE.xml"
	if [ ! -f $TAG_FILE ]; then
		# 3 templates:  tags-50-movie-template.xml  tags-50-music-template.xml  tags-50-show-template.xml
		# in TEMPLATES_PATH
		TEMPLATE_FILE_MOVIE="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-movie-template.xml"
		TEMPLATE_FILE_MUSIC="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-music-template.xml"
		TEMPLATE_FILE_SHOW="$WAZZUF_PATH/$TEMPLATES_PATH/tags-50-show-template.xml"

		# if empty tag: ugly but not really important
		XMLTAG_DATE_ENCODED=`date +%Y`
		XMLTAG_ENCODED_BY="$TAG_SIGNATURE"
		XMLTAG_COMMENT="$COMMENT"
		XMLTAG_DATE_RELEASE="$DATE"
		# DATE_TAGGED useless

		xml_tagging
	else
		echo -ne "\n *************************************\n"
		echo " xml tags file exists. Next..."  && sleep 1
		echo -ne " *************************************\n"		
	fi

	# second check, if generation problem, and to fill MERGE_XMLTAGS
	if [ -f $TAG_FILE ]; then
		MERGE_XMLTAGS="--global-tags $TAG_FILE"
	else
		echo -ne "\n *************************************\n"
		echo " xml tags file generation problem. Skipping..."  && sleep 2
		echo -ne " *************************************\n"
		MERGE_XMLTAGS=""
	fi


	## merge
	trap "echo -e '\nManual killed script (Ctrl-C) during final mkv merge' && exit 1" 2

	# global merge command
	echo -ne "\n *************************************\n"
	echo " Final file merge:"
	if [[ $DEBUG == "1" ]]; then echo "DEBUG nice -n $NICENESS mkvmerge -o $MERGE_OUTPUT --title "$MERGE_TITLE" $MERGE_VIDEO $MERGE_AUDIO_FULL $MERGE_SUBTITLES_FULL $MERGE_CHAPTERS $MERGE_COVER $MERGE_XMLTAGS"; fi
	echo -ne " *************************************\n"
	check_mkvmerge
	nice -n $NICENESS mkvmerge \
		-o $MERGE_OUTPUT --title "$MERGE_TITLE" \
		$MERGE_VIDEO \
		$MERGE_AUDIO_FULL \
		$MERGE_SUBTITLES_FULL \
		$MERGE_CHAPTERS \
		$MERGE_COVER \
		$MERGE_XMLTAGS


## nfo generator
echo -ne "\n *************************************\n"
echo " Generate nfo file..."
generate_nfo
echo -ne " *************************************\n"

done
done

cd ..
echo -ne "\n *************************************\n"
echo " $TITLE_LONG $TAG_RIP Finished"
echo -ne " *************************************\n"

exit 0
